<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>AlgorithmDog</title>
    <link>http://www.iwgc.cn/list/5566</link>
    <description>AlgorithmDog 讲述机器学习和系统研发的轶事,希望把这些事讲得生动有趣.每周日更新哦.欢迎关注.</description>
    <item>
      <title>一个小调查：您认为 Master 是谁？</title>
      <link>http://www.iwgc.cn/link/4184256</link>
      <description>&lt;p&gt;&lt;span&gt;最近几日，名为“Master”(大师)的神秘账号在各大围棋网站横扫顶尖职业棋手。柯洁、朴廷桓和井山裕太等世界级顶级选手均败在此“人”手上。看古力的微博，颇有骑士冲击机枪阵地的无奈和悲壮。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Q3H1TCddfvPWU42skFXia8d7T9M6MrWdbibzx9hAEUBfA2TRyEzrqW0yCm3OzFPZV9phC6GhuX4UM0wibicUKVe5DA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这千年未有之变局，被我们这代人中的精英创造出来了，被我们这代的所有人遇到了。那么&lt;/span&gt;这个神秘高手究竟是谁？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;iframe scrolling="no" frameborder="0" class="vote_iframe js_editor_vote_card" data-display-style="height: 226px;" data-display-src="/cgi-bin/readtemplate?t=vote/vote-new_tmpl&amp;amp;__biz=MzI2MDIxMjQyMg==&amp;amp;supervoteid=454092467&amp;amp;token=1104363445&amp;amp;lang=zh_CN" data-src="/mp/newappmsgvote?action=show&amp;amp;__biz=MzI2MDIxMjQyMg==&amp;amp;supervoteid=454092467#wechat_redirect" data-supervoteid="454092467" allowfullscreen=""&gt;&lt;/iframe&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多人会认为是 AlphaGo，依据是下面的 Tweet。但这条 Tweet 并不是由 AlphaGo 或者 DeepMind 的官方账号发出。 DeepMind 也没有回应这条 Tweet。依据这条 Tweet 而认定 Master 就是 AlphaGo，证据并不是很充分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Q3H1TCddfvPWU42skFXia8d7T9M6MrWdbc3An1h2YvFlrIXVBJibtDj5ib4gZJ5rK3SwrEKbnV2gujetkxWgu34Iw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 03 Jan 2017 19:13:44 +0800</pubDate>
    </item>
    <item>
      <title>Akka 使用系列之一: 快速入门</title>
      <link>http://www.iwgc.cn/link/4058006</link>
      <description>&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;最近在看 Spark 相关的资料，准备整理一个 Spark 系列。Akka 是 Spark 实现内部通讯的组件，Spark 启动过程的第一步便是建立 Akka 的 ActorSystem。因此看了有几篇文章学习了下 Akka 相关知识。&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-3677" style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Q3H1TCddfvMv8NB6Y07EoWVQjSbhiawaXFgUbWj0KsRgFoNF2X5dPLeddLNPrtPbiaw2R49ZicB3OhHvvfessuLHA/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span&gt;1 Actor 模型和 Akka 简介&lt;/span&gt;&lt;/h3&gt;&lt;hr&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Actor 模型由 Carl Hewitt 于上世纪70年代早期提出，目的是为了解决分布式编程中一系列的编程问题。Actor 的要点包括：Actor 是一个个相互之间独立的实体; Actor 可以通过消息来通信，一个 Actor 收到其他Actor的信息后，可以根据需要作出各种相应反应；消息的类型可以是任意的，消息的内容也可以是任意的；当一个 Actor 收到多个消息时，它先建立一个消息队列，将接收到的消息就放入队列，每次从队列中取出一个消息体进行处理。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Akka 是一个用 Scala 编写的库，用于简化编写容错的、高可伸缩性的 Java 和 Scala 的 Actor 模型应用。Akka 使得开发人员可以更轻松地开发正确的具有容错性、可扩展性和跨平台的并发程序，在工业界得到了广泛应用。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span&gt;2 Akka 入门&lt;/span&gt;&lt;/h3&gt;&lt;hr&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面我们将从一个学生老师例子出发，快速入门 Actor 模型。例子是从博客&amp;nbsp;&lt;a style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;rerun&amp;nbsp;&lt;/a&gt;拿来的 (我就是看这个博客学习 Akka 的，强烈推荐英语好的同学看看)。这个例子有两个角色，一个是勤学好问的学生，一个是睿智的老师。每天早上，学生都会给老师发送一封邮件，向老师请教问题；而老师看到邮件之后，通过邮件给学生发送答案。在这个过程中，有几点需要注意：&lt;/p&gt;&lt;blockquote style=" border: 0px; padding-right: 3em; padding-left: 3em; vertical-align: baseline; quotes: none; font-style: italic; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&lt;p&gt;1. 邮件一旦发送，就不能改变；&lt;br/&gt;2. 学生和老师都按照自己的工作节奏检查邮箱；&lt;br/&gt;3. 学生发送邮件之后，可以不等老师的回复。即工作流程可以是阻塞，也可以是非阻塞；&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Akka 用于简化编写容错的、高可伸缩性的 Actor 模型应用，即我们很容易用 Akka 实现上述学生老师的 Actor 模型。我们先建立老师 Actor, 将老师 Actor 实现成一个服务（我是不是想歪了），代码如下所示。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Q3H1TCddfvMv8NB6Y07EoWVQjSbhiawaXIibsF8via9K0D7RgMEiclyfAibQU8CsAF1UibXicibTurbCLRX1MdHEPzr3IQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;然后我们建立学生 Actor, 将学生 Actor 作为客户端。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Q3H1TCddfvMv8NB6Y07EoWVQjSbhiawaXNCCmyyaMx5F6fEL31aibmK1dKlDXHfjibKT50H8QNFic7NLAlGzfESq5w/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;不管是服务端还是客户端，程序开始都从 lietal.conf 配置文件读入相应的配置。其中服务端读入 RemoteServerSideActor 的配置，而客户端读入 RemoteClientSideActor 的配置。lietal.conf 配置文件放在资源目录 src/main/resources，以便打包时打入包内。lietal.conf 的内容如下所示。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Q3H1TCddfvMv8NB6Y07EoWVQjSbhiawaXKGos2yFJqOL0E8VEqj5qWia8hibqXic5icdxzOMFiboZ4s4fYNMY6rvGjlA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;从配置文件来看，如果我们在服务端启动两个老师 Actor， 他们会共用一个端口。我们很容易理解，所有发往老师 Actor 的消息都发往了服务器的一个端口，Akka 内部有一套机制将消息分发到不同的 Actor 中。这套机制就是 Akka 的 dispatcher，负责分发不同的消息到不同的 Actor。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;完整项目代码已经上传到&amp;nbsp;https://github.com/algorithmdog/AkkaUsageLearner&amp;nbsp;上了，需要的同学自取。将完整项目打包之后，分别以 TearcherService 和 StudentClient 为主类运行程序，老师 Actor 和学生 Actor 之间的通信就运行起来了。下面是老师服务端运行的结果。&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-3684" style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Q3H1TCddfvMv8NB6Y07EoWVQjSbhiawaXDOlh30beicTENRX7FzyMjnm286LXQQV91HRhv0g96L98cO18xVO0ByQ/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;下面是学生客户端运行的结果。&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-3685" style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Q3H1TCddfvMv8NB6Y07EoWVQjSbhiawaXcfic1wHgHFEKPIadEzPj2lqQPSXicQZZdnoWnBenRAiblFR90tBGesfcQ/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span&gt;3 总结&lt;/span&gt;&lt;/h3&gt;&lt;hr&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 一开始我只想实现一个单机版本的老师学生 Actor，实现之后发现不能体现 Akka 的特点，因此又实现一个网络版的老师学生 Actor。实现完网络版之后，稍微加深了对 Actor 之间消息传递的理解。完整项目代码已经上传到&amp;nbsp;&lt;span&gt;https://github.com/algorithmdog/AkkaUsageLearner&amp;nbsp;&lt;/span&gt;上啦。欢迎关注我的公众号，每两周的更新就会有提醒哦~&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-2360" style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz/Q3H1TCddfvPE2JpYR7tQ2eqqCLpF5ncuTx6MNCib7Qd3FF67BsxicqGoLo1Y44rRGAah5gUfUrV6QTjIVaanBsDA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/a&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 本文主要参考了 http://shiyanjun.cn/archives/1178.html 和 http://rerun.me/2014/09/11/introducing-actors-akka-notes-part-1/ 两篇博客。第一篇博客注重实战，代码比较完整；第二篇则深入浅出的解释了相关的概念原理。推荐大家阅读。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Sun, 25 Dec 2016 16:11:06 +0800</pubDate>
    </item>
  </channel>
</rss>
