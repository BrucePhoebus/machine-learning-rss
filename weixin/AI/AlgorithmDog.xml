<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>AlgorithmDog</title>
    <link>http://www.iwgc.cn/list/5566</link>
    <description>AlgorithmDog 讲述机器学习和系统研发的轶事,希望把这些事讲得生动有趣.每周日更新哦.欢迎关注.</description>
    <item>
      <title>Akka 使用系列之三: 层次结构</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Akka 是用层次结构组织 Actors 的。&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-3677" style="background: transparent; border-width: 0px; border-style: initial; border-color: initial; vertical-align: baseline; color: rgb(116, 51, 153);"&gt;&lt;img src="http://img04.iwgc.cn/mpimg/87efa647b1e254dc6522dd3bd7ed5dab36f0d330"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们需要实现一个翻译模块，其功能是输入中文输出多国语言。我们可以让一个 Master Actor 负责接收外界输入，多个 Worker Actor 负责将输入翻译成特定语言，Master Actor 和 Worker Actor 之间是上下级层次关系。下图展示了这种层级结构。&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-3889" style="background: transparent; border-width: 0px; border-style: initial; border-color: initial; vertical-align: baseline; color: rgb(116, 51, 153);"&gt;&lt;img src="http://img04.iwgc.cn/mpimg/1bd35e79c94af4933c76523d1aca69f88f241f21"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;具体代码实现如下所示。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Master&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Actor&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ActorLogging&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp;val english2chinese 
 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;actorOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Props&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;English2Chinese&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;span&gt;"English2Chinese"&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp;val english2cat &amp;nbsp; &amp;nbsp; 
 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;actorOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Props&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;English2Cat&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;span&gt;"English2Cat"&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;

 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; receive &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; eng1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;english2chinese &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt; eng1
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;english2cat &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt; eng1&lt;br&gt;&lt;/span&gt;&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;}&lt;br&gt;&lt;/span&gt;&lt;span&gt;}&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;English2Chinese&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Actor&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ActorLogging&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; receive &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; eng&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"我翻译不出来!"&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;}&lt;br&gt;&lt;/span&gt;&lt;span&gt;}&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;English2Cat&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Actor&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ActorLogging&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; receive &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; eng&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"喵喵喵!"&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;}&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;}&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Main&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;args&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;Array&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;])&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;val sys &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ActorSystem&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"system"&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;val master &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; sys&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;actorOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Props&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Master&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;span&gt;"Master"&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;master &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Hello,world!"&lt;/span&gt;&lt;span&gt;
 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span&gt;}&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;我们在 Master Actor 中使用 context.actorOf 实例化 English2Chinese 和 English2Cat，便可以在它们之间形成层次关系。这点通过它们的 actor 地址得到证实。&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-3891" style="background: transparent; border-width: 0px; border-style: initial; border-color: initial; vertical-align: baseline; color: rgb(116, 51, 153);"&gt;&lt;img src="http://img05.iwgc.cn/mpimg/ad3f52ab2d2cd61d2761a5ac6d31c1a9789dc3cf"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上面的 Actors 层次结构是我们程序里 Actor 的层次结构。这个层次结构是 Actor System 层次结构的一部分。Actor System 层次结构从根节点出来有两个子节点：UserGuardian 和 SystemGuardian。用户程序产生的所有 Actor 都在 UserGuardian 节点下，SystemGuardian 节点则包含系统中的一些 Actor，比如 deadLetterListener。如果一个 Actor 已经 stop 了，发送给这个 Actor 的消息就会被转送到 deadLetterListener。因此完整的 Actor 层次结构如下所示。&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-3895" style="background: transparent; border-width: 0px; border-style: initial; border-color: initial; vertical-align: baseline; color: rgb(116, 51, 153);"&gt;&lt;img src="http://img03.iwgc.cn/mpimg/ff31d377eca67eff0d550b834d4a60d6613d92c0"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们使用 Akka 开发并行程序时，可以使用层级结构组织 Actors。层次结构不仅比较符合人类直觉，还为容错提供了机制保障。我们将会在下一篇文章介绍容错机制。本文的代码已经上传到 https://github.com/algorithmdog/AkkaUsageLearner。欢迎关注 AlgorithmDog 公众号，每两周的更新会有推送哦。&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-2360" style="background: transparent; border-width: 0px; border-style: initial; border-color: initial; vertical-align: baseline; color: rgb(116, 51, 153);"&gt;&lt;img src="http://img04.iwgc.cn/mpimg/8a2b169c29c09d867a8f4b0602f2a7acf3ac2785"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 28 Feb 2017 00:39:29 +0800</pubDate>
    </item>
    <item>
      <title>动态图计算：Tensorflow 第一次清晰地在设计理念上领先</title>
      <link>http://www.iwgc.cn/link/4694430</link>
      <description>&lt;div class="article-content"&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;2017 年 2 月 8 号，Google 在其博客上发布 TensorFlow Fold ，支持动态图计算。动态图计算是 Tensorflow 第一次清晰地在设计理念上领先。&lt;span style="border: 0px; vertical-align: baseline; background: transparent;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a rel="attachment wp-att-1896" style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487049222slKF75.jpg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span style="border: 0px; vertical-align: baseline; background: transparent;"&gt;1. 图计算&lt;/span&gt;&lt;/h3&gt;&lt;hr&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span style="border: 0px; vertical-align: baseline; background: transparent;"&gt;&lt;/span&gt;&lt;br&gt;&lt;/h3&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;梯度计算，或者自动求导，是深度学习框架中不可回避的问题。图计算是深度学习框架实现梯度计算的一种方式。不同于一般的编程模式，图计算先生成计算图，然后按照计算图执行计算过程。下面这段代码便属于图计算程序。&lt;/p&gt;&lt;pre class="wp-code-highlight prettyprint prettyprinted" style=" border: 1px solid rgb(204, 204, 204); margin-top: 6px; margin-bottom: 24px; padding: 2px 7px; vertical-align: baseline ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;A &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; &lt;/span&gt;&lt;span class="typ" style="border: 0px; vertical-align: baseline; color: rgb(102, 0, 102); background: transparent;"&gt;Variable&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="str" style="border: 0px; vertical-align: baseline; color: rgb(0, 136, 0); background: transparent;"&gt;'A'&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;B &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; &lt;/span&gt;&lt;span class="typ" style="border: 0px; vertical-align: baseline; color: rgb(102, 0, 102); background: transparent;"&gt;Variable&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="str" style="border: 0px; vertical-align: baseline; color: rgb(0, 136, 0); background: transparent;"&gt;'B'&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;C &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; B &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;*&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; A
D &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; C &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;+&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; &lt;/span&gt;&lt;span class="typ" style="border: 0px; vertical-align: baseline; color: rgb(102, 0, 102); background: transparent;"&gt;Constant&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="lit" style="border: 0px; vertical-align: baseline; color: rgb(0, 102, 102); background: transparent;"&gt;1&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;&lt;/span&gt;&lt;span class="com" style="border: 0px; vertical-align: baseline; color: rgb(136, 0, 0); background: transparent;"&gt;# compiles the function&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;f &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; compile&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;D&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;d &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; f&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;A&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;np&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;.&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;ones&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="lit" style="border: 0px; vertical-align: baseline; color: rgb(0, 102, 102); background: transparent;"&gt;10&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;),&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; B&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;np&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;.&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;ones&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="lit" style="border: 0px; vertical-align: baseline; color: rgb(0, 102, 102); background: transparent;"&gt;10&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)*&lt;/span&gt;&lt;span class="lit" style="border: 0px; vertical-align: baseline; color: rgb(0, 102, 102); background: transparent;"&gt;2&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;当执行 C = B * A 这一行代码时，程序并没有进行真正的计算，而是生成了下面的计算图。只有执行 d = f(A=np.ones(10), B=np.ones(10)*2) 这行代码时，程序才会将数据灌进 A 和 B，运算得到 d。&lt;/p&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&lt;a rel="attachment wp-att-3841" style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487049222TLa6yw.png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;图计算怎么实现梯度计算？我们来看下面用图计算实现梯度计算的代码。&lt;/p&gt;&lt;pre class="wp-code-highlight prettyprint prettyprinted" style=" border: 1px solid rgb(204, 204, 204); margin-top: 6px; margin-bottom: 24px; padding: 2px 7px; vertical-align: baseline ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;A &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; &lt;/span&gt;&lt;span class="typ" style="border: 0px; vertical-align: baseline; color: rgb(102, 0, 102); background: transparent;"&gt;Variable&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="str" style="border: 0px; vertical-align: baseline; color: rgb(0, 136, 0); background: transparent;"&gt;'A'&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;B &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; &lt;/span&gt;&lt;span class="typ" style="border: 0px; vertical-align: baseline; color: rgb(102, 0, 102); background: transparent;"&gt;Variable&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="str" style="border: 0px; vertical-align: baseline; color: rgb(0, 136, 0); background: transparent;"&gt;'B'&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;C &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; B &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;*&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; A
D &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; C &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;+&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; &lt;/span&gt;&lt;span class="typ" style="border: 0px; vertical-align: baseline; color: rgb(102, 0, 102); background: transparent;"&gt;Constant&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="lit" style="border: 0px; vertical-align: baseline; color: rgb(0, 102, 102); background: transparent;"&gt;1&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;&lt;/span&gt;&lt;span class="com" style="border: 0px; vertical-align: baseline; color: rgb(136, 0, 0); background: transparent;"&gt;# get gradient node.&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;gA&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;,&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; gB &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; D&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;.&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;grad&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;wrt&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=[&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;A&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;,&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; B&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;])&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;&lt;/span&gt;&lt;span class="com" style="border: 0px; vertical-align: baseline; color: rgb(136, 0, 0); background: transparent;"&gt;# compiles the gradient function.&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;f &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; compile&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;([&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;gA&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;,&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; gB&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;])&lt;br&gt;&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;grad_a&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;,&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; grad_b &lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; f&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;A&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;np&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;.&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;ones&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="lit" style="border: 0px; vertical-align: baseline; color: rgb(0, 102, 102); background: transparent;"&gt;10&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;),&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt; B&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;=&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;np&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;.&lt;/span&gt;&lt;span class="pln" style="border: 0px; vertical-align: baseline; color: rgb(0, 0, 0); background: transparent;"&gt;ones&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;(&lt;/span&gt;&lt;span class="lit" style="border: 0px; vertical-align: baseline; color: rgb(0, 102, 102); background: transparent;"&gt;10&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)*&lt;/span&gt;&lt;span class="lit" style="border: 0px; vertical-align: baseline; color: rgb(0, 102, 102); background: transparent;"&gt;2&lt;/span&gt;&lt;span class="pun" style="border: 0px; vertical-align: baseline; color: rgb(102, 102, 0); background: transparent;"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;D 的 grad 函数产生向后计算图，返回 gA 和 gB 梯度节点（下图中的红色节点）。&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-3858" style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487049223nfEA20.png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;图计算在内存使用和运算时间两个方面比较高效。如下图所示，图计算能够对上述代码中的乘法和加法运算进行运算折叠。如果使用 GPU 计算，运算折叠之后的程序只需用到一个GPU内核（而不是两个）。&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-3862" style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487049223e7wrTR.png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span style="border: 0px; vertical-align: baseline; background: transparent;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span style="border: 0px; vertical-align: baseline; background: transparent;"&gt;2. 动态图计算&lt;/span&gt;&lt;/h3&gt;&lt;hr&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span style="border: 0px; vertical-align: baseline; background: transparent;"&gt;&lt;/span&gt;&lt;br&gt;&lt;/h3&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上面介绍了图计算和图计算的优点，图计算也有不够灵活的缺点。因为图计算在输入数据之前就定义图结构，因此用一张图计算所有的输入数据。但是有些时候，我们必须针对不同的输入数据建立不同的计算图。例如自然语言理解中的解析树（parse trees），源代码中的抽象语法树（abstract syntax trees）以及网页中的 DOM 树等等。&lt;/p&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;如果我们还要用图计算，解决这个问题的方法就显得比较 trick 了。 LSTM 对长度不定的句子建模的场景中，先把长度相近的句子聚在一起（bucketing），然后把长度补到最长的那句 (padding)，这样就能用统一的一张图计算所有的句子了。如果是树型结构，则需要先将树转化序列，然后在 bucketing 和 padding。另外一种方法则是放弃或者部分放弃图计算。Torch 和 Chainer 没有采用图计算，不需用一张图计算所有数据。Theano 用 scan 实现循环功能，算是部分放弃图计算。这样做的代价就是不能利用图计算高效的优点。&lt;/p&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次 Google 提出的动态图计算则解决这个问题。动态图计算对批量训练中的每一个样本生成一张计算图，然后把这些计算图进行归并生成一张大的计算图，最后用下面的贪心算法高效地这张大的计算图。这样一方面能够利用图计算高效的优点，另一方面又能处理不同输入需要不同计算图的场景。&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-3867" style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487049223umidFD.jpg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span style="border: 0px; vertical-align: baseline; background: transparent;"&gt;3. 总结&lt;/span&gt;&lt;/h3&gt;&lt;hr&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span style="border: 0px; vertical-align: baseline; background: transparent;"&gt;&lt;/span&gt;&lt;br&gt;&lt;/h3&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Tensorflow 是开源最迟的深度学习框架，积累不如 MXNet、Theano、Caffe 和 Torch 深厚。因此给大家的感觉，Tensorflow 一直在追赶这些深度学习框架。Tensorflow 出一个新东西，我们似乎可以在其他深度学习框架中找到。动态图计算是 Tensorflow 第一次清晰地在设计理念上领先于其他深度学习框架。&lt;/p&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当然动态图计算还刚刚问世，应该还需要时间优化。毕竟，承载动态图计算思想的 Tensorflow Fold 并不是 Google 的正式项目。最后欢迎关注我的公众号，每两周的更新就会有提醒哦~&lt;/p&gt;&lt;p&gt;&lt;a rel="attachment wp-att-2360" style="border: 0px; vertical-align: baseline; color: rgb(116, 51, 153); background: transparent;"&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487049224FyXSki.jpg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style=" border: 0px; margin-bottom: 24px; vertical-align: baseline; color: rgb(51, 51, 51); ; ; ; ; ; ; "&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;h3 style=" border: 0px; margin-bottom: 10px; vertical-align: baseline; clear: both; line-height: 1.5em; ; ; ; ; "&gt;&lt;span style="border: 0px; vertical-align: baseline; background: transparent;"&gt;参考文献&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span style="border: 0px; vertical-align: baseline; background: transparent;"&gt;1.&amp;nbsp;http://mxnet.io/architecture/program_model.html?highlight=programming%20models%20deep%20learning&lt;/span&gt;&lt;/p&gt;&lt;p&gt;2.&amp;nbsp;https://openreview.net/pdf?id=ryrGawqex&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;span style="line-height: 25.6px;"&gt;帮朋友所在部门发个招聘广告&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="line-height: 25.6px;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;腾讯MIG06-自然语言处理研究员（深圳）&lt;br&gt;工作职责：&lt;br&gt;负责对话机器人框架的设计，或核心算法模块的研发工作；&lt;br&gt;负责信息检索、推荐系统的整体方案设计，或核心算法模块研发；&lt;br&gt;负责自然语言处理、对话管理，文本挖掘相关的研究工作；&lt;br&gt;负责大规模文本分类、语义标签提取、摘要生成等技术的研发工作；&lt;br&gt;负责大规模机器学习的研发工作；&lt;br&gt;&lt;br&gt;任职资格&lt;br&gt;3年及以上自然语言处理、机器学习、文本挖掘相关工作经验；&lt;br&gt;熟练掌握c++、linux后台开发技能；&lt;br&gt;对语音识别、对话管理等研发经验者尤佳，有知识图谱建设经验者优先；&lt;br&gt;对会话机器人有感兴趣，对前沿技术感兴趣；&lt;br&gt;积极主动，勇于接受挑战，富有创新精神。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: rgb(217, 33, 66);"&gt;有意向的同学，欢迎发邮件到&amp;nbsp;sunnynsun@tencent.com&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt;</description>
      <pubDate>Tue, 14 Feb 2017 12:53:57 +0800</pubDate>
    </item>
  </channel>
</rss>
