<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>CSDN大数据</title>
    <link>http://www.iwgc.cn/list/1933</link>
    <description>CSDN分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点,提供云计算和大数据技术、平台、实践和产业信息等服务.</description>
    <item>
      <title>京东分布式数据库系统演进之路</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;张成远，京东云资深架构师，《Mariadb原理与实现》作者，开源项目speedy作者，2012年加入京东数据库研发团队，负责京东分布式数据库系统的架构与研发工作，主导了京东分布式数据库系统在公司的落地及大规模推广，擅长高性能服务器开发、分布式缓存/数据库/存储等大规模分布式系统架构。&amp;nbsp;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;关于数据库的使用，在京东有几个趋势，早期在京东主要用SqlServer及Oracle也有少量采用MySQL，随着业务发展技术积累及使用成本等因素，很多业务都开始使用MySQL，包括早期使用SqlServer及Oracle的很多核心业务也都渐渐的开始迁移到MySQL，单机的MySQL往往无法支撑这类业务，需要考分布式的解决方案，另外原本使用MySQL的业务随着数据量及访问量的增加也会遇到瓶颈最终也会考虑采用分布式解决的方案，整个京东发展趋势如图1所示。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/a61ec1c2104fa24d1d81bbfad2f2b8aae284ff09"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图1 业务使用数据库演变趋势&lt;/center&gt;&lt;p&gt;分布式的数据库解决方案有很多种，在各个互联网公司使用得也是非常的普遍，本质上就是将数据拆开存储在多个节点上从而缓解单节点的压力，业务层面也可以根据业务特点自行进行拆分，如图2所示，假设有一张user表，以ID为拆分键，假设拆分成两份，最简单的就是奇数ID的数据落到一个存储节点上，偶数ID的数据落到另外一个存储节点上，实际部署示意图如图3所示。&lt;/p&gt;&lt;p&gt;除了业务层面做拆分，也可以考虑采用较为通用的一些解决方案，主要分为两类，一类是客户端解决方案，这种方案是在业务应用中引入特定的客户端包，通过该客户端包完成数据的拆分查询及结果汇总等操作，这种方案对业务有一定侵入性，随着业务应用实例部署的数量比较大，数据库端可能会面临连接数压力比较大的问题，另外版本升级也比较困难，优点是链路较短，从应用实例直接到数据库。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/596dbb2a62171ca8a5fc2b9f1ec45c8ffa4b7098"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图2 数据拆分示意图&lt;/center&gt;&lt;p&gt;另一类是中间件的解决方案，这种方案是提供兼容数据库传输协议及语法规范的代理，业务在连接中间件的时候可以直接使用传统的JDBC等客户端，从而大大减轻了业务开发层面的负担，弊端是中间件的开发难度会比客户端方案稍微高一点，另外网络传输链路上多走了一段，理论上对性能略有影响，实际使用环境中这些系统都是在机房内网访问，这种网络上的影响完全可以忽略不计。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/f555d789e1d319db94dbe239693fbef6940d3b26"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图3 系统部署示意图&lt;/center&gt;&lt;p&gt;根据上述分析，为了更好的支撑京东大量的大规模数据量的业务，我们开发了一套兼容MySQL协议的分布式数据库的中间件解决方案，我们称之为JProxy，这套方案经过了多次的演变最终完成并支撑了京东全集团的去Oracle/Sqlserver任务。&lt;/p&gt;&lt;p&gt;JProxy第一个版本如图4所示，每个JProxy都会有一个配置文件，我们会在配置文件中配置相应业务的库表拆分信息及路由信息， JProxy接收到SQL以后会对SQL进行解析再根据路由信息决定SQL是否需要重写及该发往哪些节点，等各节点结果返回以后再将结果汇总按照MySQL传输协议返回给应用。&lt;/p&gt;&lt;p&gt;结合上文的例子，当用户查询user这张表时假设SQL语句是select * from user where id = 1 or id = 2，当收到这条SQL以后，JProxy会将SQL拆分为select * from user where id=1 及select * from user where id = 2， 再分别把这两条sql语句发往后端的节点上，最后将两个节点上获取到的两条记录一并返回给应用。&lt;/p&gt;&lt;p&gt;这种方案在业务库表比较少的时候是可行的，随着业务的发展库表的数量可能会不断增加，尤其是针对去Oracle的业务在切换数据库的时候可能是一次切换几张表，下一次再切换另外几张表，这就要求经常修改配置文件。另外JProxy在部署的时候至少需要部署两份甚至多份，如图5所示，此时面临一个问题是如何保证所有的配置文件在不断修改的过程中是完全一致的。在早期运维过程中，我们靠人工修改完一份配置文件，再将相应的配置文件拷贝给其他的JProxy，确保JProxy配置文件内容一致，这个过程心智负担较重且容易出错。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/aae7bf6bd2d468f458780fa74b074053ef5910d3"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图4 版本一&lt;/center&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/01cf95b300bc7a851fdad5fc6a980b8f970ed5b4"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图5 配置文件&lt;/center&gt;&lt;p&gt;在之后的版本中我们引入了JManager模块，这个模块负责的工作是管理配置文件中的路由元信息，如图6所示。JProxy的路由元信息都是通过JManager来统一获取，我们只需要通过JManager往元数据库里添加修改路由元数据，操作完成以后通知各个JProxy动态加载路由信息就可以保证每个JProxy的路由信息是完全一致的，从而解决维护路由元信息一致性的痛点。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/dc76973210467185b44800f705f6b9ce3b768e75"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图6 版本二&lt;/center&gt;&lt;p&gt;在提到分布式数据库解决方案时一定会考虑的一个问题是扩容问题，扩容有两种方式，一种我们称之为re-sharding方案，简单的说就是一片拆两片，两片拆为四片，如图7所示，原本只有一个MySQL实例一个shard，之后拆分成shard1和shard2两个分片，之后再添加新的MySQL实例，将shard1拆分成shard11和shard12两个分片，将shard2拆分成shard21和shard22两个分片放到另外新加的MySQL实例上，这种扩容方式是最理想的，但具体实现的时候会略微麻烦一点，我们短期之内选择了另一种偏保守一点在合理预估前提下足以支撑业务发展的扩容模式，我们称之为pre-sharding方案，这种方案是预先拆分在一定时期内足够用的分片数，在前期数据量较少时这些分片可以放在一个或少量的几个MySQL实例上，等后期数据量增大以后可以往集群中加新的MySQL实例，将原本的分片迁移到新添加的MySQL实例上，如图8所示，我们在一开始就拆分成了shard1、shard2、shard3、shard4四个分片，这四个分片最初是在一个MySQL实例上，数据量增大以后我们可以添加新的MySQL实例，将shard3和shard4迁移新的MySQL实例上，整个集群分片数没有发生变化但是容量已经变成了原来的两倍。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/0d7d9296c646f04b522ae36477663177cd2632eb"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图7 re-sharding方案&lt;/center&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/7d062e1997ec1a6289298897faa1b6b179ce6a49"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图8 pre-sharding方案&lt;/center&gt;&lt;p&gt;Pre-sharding方案相当于通过迁移完成达到扩容的目的，分片位置的变动涉及到数据的迁移验证及路由元数据的变更等一系列变动，所以我们引入了JTransfer系统，如图9所示。JTransfer可以做到在线无缝迁移，迁移扩容时只需提交一条迁移计划，指定将某个分片从哪个源实例迁移到哪个目标实例，可以指定在何时开始迁移任务，等到了时间点系统会自动开始做迁移。整个迁移过程中涉及到迁移基础全量数据和迁移过程中业务访问产生的增量数据，一开始会将基础全量数据从源实例中dump出来到目标实例恢复，确认数据正确以后开始追赶增量数据，当增量数据追赶到一定程度系统预估可以快速追赶结束时，我们会做一个短暂的锁定操作，从而确保将最后的增量全部追赶完成，这个锁定时间也是在提交迁移任务时可以指定的一个参数，比如最多只能锁定20s，如果因为此时访问量突然增大等原因最终剩余的增量没能在20s内追赶完成，整个迁移任务将会放弃，确保对线上访问影响达到最小。迁移完成之后会将路由元信息进行修改，同时将路由元信息推送给所有的JProxy，最后再解除锁定，访问将根据路由打到分片所在的新位置。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/f6b3aef2ea8a96e917562b6bf5eeb28cb6e596cb"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图9 版本三&lt;/center&gt;&lt;p&gt;系统在生产环境中使用的时候，除了考虑以上的介绍以外还需要考虑很多部署及运维的事情，首先要考虑的就是系统如何活下来，需要考虑系统的自我保护能力，要确保系统的稳定性，要做到性能能够满足业务需求。&lt;/p&gt;&lt;p&gt;在JProxy内部我们采用了基于事件驱动的网络IO模型同时考虑到多核等特点，将整个系统的性能发挥到极致，在压测时JProxy表现出来的性能随着MySQL实例的增加几乎是呈现线性增长的趋势，而且整个过程中JProxy所在机器毫无压力。&lt;/p&gt;&lt;p&gt;保证性能还不够，还需要考虑控制连接数、控制系统内存等，连接数主要是控制连接的数量这个比较好理解，控制内存主要是指控制系统在使用过程中对内存的需求量，比如在做数据抽数时候，sql语句是类似select * from table这种的全量查询，此时后端所有的MySQL数据会通过多条连接并发地往中间件发送数据，从中间件到应用只有一条连接，如果不对内存进行控制就会造成中间件OOM，在具体实现的时候我们通过将数据压在TCP栈中来控制中间件前后端连接的网络流速从而很好的保证了整个系统的内存是在可控范围内。&lt;/p&gt;&lt;p&gt;另外还需要考虑权限，哪些IP可以访问哪些IP不能访问都需要可以精确的控制，具体到某一张表还需要控制增删改查的权限，我们建议业务在写SQL的时候尽量都带有拆分字段保证SQL都可以落在某个分片上从而保证整个访问是足够的简单可控，我们为之提供了精细的权限控制，可以做到表级别的增删改查权限，包括是否要带有拆分字段，最大程度做到对SQL的控制，保证业务在测试阶段写出不满足期望的SQL都能及时发现，大大降低后期线上运行时的风险。&lt;/p&gt;&lt;p&gt;除了基本的稳定性之外，在整个系统全局上还需要考虑到服务高可用方案。JProxy是无状态的，一个业务在同一个机房内部署至少两个JProxy且必须跨机架的，保证在同一个机房里JProxy是高可用的。在另外的机房会部署再部署两个JProxy，做到跨机房的高可用。除了中间件自身的高可用以外还需要保证数据库层面的高可用，全链路的高可用才是真正的高可用。数据库层面在同一个机房里会按照一主一从部署，在备用机房会再部署一个备，如图10所示。JProxy访问MySQL时通过域名访问，如果MySQL的主出异常数据库会进行相应的主从切换操作，JProxy可以访问到切换以后新的主，如果整个机房的数据库异常可以直接将数据的域名切换到备用机房，保证JProxy可以访问到备用机房的数据库。业务访问JProxy时也是通过域名访问，如果一个机房的JProxy都出现了异常，和数据库类似直接将JProxy前端的域名切换到备用机房，从而保证业务始终都能正常访问JProxy。&lt;/p&gt;&lt;p&gt;数据高可靠也是非常关键的点，我们会这对数据库的数据进行定期备份，将备份数据存储到相应的存储系统中，从而保证数据库中的数据即使被删除依然是可以恢复的。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/05fc85643a2ac1848dc4564415c5bb3bd118f0c9"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图10 部署示意图&lt;/center&gt;&lt;p&gt;系统在线上运行时候监控报警是极其重要的，监控可以分多个层次，如图11所示，从主机和操作系统的信息到应用系统的信息到特定系统内部特定的信息的监控等，针对操作系统及主机的监控京东有MJDOS系统可以把系统的内存/cpu/磁/网卡/机器负载等各种信息都纳入监控系统，这些操作系统的基础信息对系统异常的诊断非常关键，比如因为网络丢包等引起的服务异常都可以在这个监控系统中及时找到根源。&lt;/p&gt;&lt;p&gt;京东还有统一的监控报警系统UMP，这个监控系统主要是给所有的应用系统服务，所有的应用系统按照一定的规则暴露接口，在UMP系统中注册以后，UMP系统就可以提供一整套监控报警服务，最基本的比如系统的存活监控以及是否有慢查询等。&lt;/p&gt;&lt;p&gt;除了这两个基本的监控系统以外，我们还针对整套中间件系统开发了定制的监控系统JMonitor，之所以开发这套监控系统是因为我们需要采集更多的定制的监控信息，在系统发生异常时能够第一时间定位问题，举个例子当业务发现TP99下降时往往伴随着有慢SQL，应用从发送SQL到收到结果这个过程中经过了JProxy到MySQL又从MySQL经过JProxy再回到应用，这条链路上任何一个环节都可能慢，不管是哪个阶段耗时，我们需要将这种慢SQL的记录精细化，精细到各个阶段都花了多少时间，做到出现慢SQL时能快速准确的找到问题根源快速解决问题。&lt;/p&gt;&lt;p&gt;另外在配合业务去Oracle/SqlServer时，我们不建议使用跨库的事务，但是会出现有一种情况，同一个事务里的SQL都是带有拆分字段的，每条SQL都是单节点的，同一个事务里有多条这种SQL，结果却出现这个事务是跨库的，这种事务我们都会有详细的记录，业务方可以直接通过JMonitor找到这种事务从而更好的进一步改进。除了这个以外，在测试环境时候业务系统一开始写的SQL没有考虑太多的优化可能会出现比较多的慢SQL，这些慢SQL我们都会统一采集在JMonitor系统上进行分析处理，帮助业务方快速迭代调整SQL语句。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/87d1ec9feb50c87246d3ff07dd70715a45e910ca"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图11 监控体系&lt;/center&gt;&lt;p&gt;业务在使用这套系统的时候 要尽量出现避免跨库的SQL，有一个很重要的原因是当出现跨库SQL的时候会耗费MySQL较多的连接如图12所示，一条不带拆分字段的SQL将会发送到所有的分片上，如果在一个MySQL实例上有64个分片，那一条这样的SQL就会耗费这个MySQL实例上的64个连接，这个资源消耗是非常可观的，如果可以控制SQL落在单个分片上可以大大降低MySQL实例上的连接压力。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/11f88bba034d09155cd3da11fec4f53661775926"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图12 连接数&lt;/center&gt;&lt;p&gt;跨库的分布式事务要要尽量避免，一个是基于MySQL的分布式数据库中间件的方案无法保证严格的分布式事务语义，另一个即使可以做到严格的分布式事务语义支持依然是要尽量避免垮库事务的，多个跨库的分布式事务在某个分片上发生死锁将会造成其他分片上的事务也无法继续导致直接引起大面积的死锁，即使是单节点上的事务也要尽量控制事务小一点，降低死锁发生的概率。&lt;/p&gt;&lt;p&gt;具体的路由策略不同的业务可以特殊对待，以京东分拣中心为例，各个分拣中心的大小差异很大，北京上海等大城市的分拣中心数据量很大其他城市的分拣中心相对会小一点， 针对这种特点我们会给其定制路由策略，做到将大的分拣中心的数据落在特定的性能较好的MySQL实例上，其他小的分拣中心的数据可以按照普通的拆分方式处理。&lt;/p&gt;&lt;p&gt;在JProxy系统层面我们可以支持多租户模式，但考虑到去Oracle/SqlServer的业务往往都是非常重要且数据量巨大的业务，所以我们的系统都是不同的业务独立部署一套，在部署层面避免各个业务之间的互相影响。考虑到独立部署会造成一些资源浪费，我们引入了容器系统，将操作系统资源通过容器的方式进行隔离，从而保证系统资源的充分利用。很多问题没必要一定要在代码层面解决，代码层面解决起来比较麻烦或者不能做到百分之百把控的事情可以通过架构层面来解决，架构层面不好解决的事情可以通过部署的层面来解决，部署层面不好解决的事情可以通过产品层面来解决，解决问题的方式各式各样，需要从整个系统全局角度来综合考量，引用邓公的一句话&amp;ldquo;不管黑猫白猫，能抓老鼠的就是好猫&amp;rdquo;，同样的道理能支撑住业务发展的系统就是好的系统。&lt;/p&gt;&lt;p&gt;另外再简单讨论一下为什么基于MySQL的分布式数据库中间件系统无法保证严格的分布式事务语义支持。所谓分布式事务语义本质上就是事务的语义，包含了ACID属性，分别是原子性、一致性、持久性、隔离性。&lt;/p&gt;&lt;p&gt;原子性是指一个事务要么成功要么失败，不能存在中间状态。持久性是指一个事务一旦提交成功那么要做到系统崩溃以后再恢复依然是成功的。隔离性是指各个并发事务之间是隔离的，不可见的，在数据库具体实现上可能会分很多个隔离级别。事务的一致性是指要保证系统要处于一个一致的状态，比如从A账户转了500元到B账户，那么从整体系统来看系统的总金额是没有发生变化的，不能出现A的账户已经减去500元但是B账户却没有增加500元的情况。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/6e6fc824d195c88a8bcdca63199f53610b8cac39"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图13 可串行化调度&lt;/center&gt;&lt;p&gt;事务在数据库系统中执行的时候有一个可串行化调度的问题，假设有T1、T2、T3三个事务，那么这三个事务的执行的效果应该和三个事务串行执行效果一样，也就是最终效果效果应该是{T1/T2/T3, T1/T3/T2, T2/T1/T3, T2/T3/T1, T3/T1/T2, T3/T2/T1}集合中的一个，当涉及到分布式事务时，每个子事务之间的调度要和全局的分布式事务的调度顺序一致才能满足可串行化调度的要求，如图13所示，T1/T2/T3的三个分布式事务，在一个库中的调度顺序是T1/T2/T3和全局的调度顺序一致，在另一个库中的调度顺序变成了T3/T2/T1，此时站在全局的角度来看就打破了可串行化调度，可串行化调度保证了隔离性的实现，当可串行化调度被打破时自然隔离性也就随之打破，在基于MySQL的分布式中间件方案实现上，因为同一个分布式事务的各个子事务的事务ID是在各个MySQL上生成的，并没有提供全局的事务ID来保证各个子事务的调度顺序和全局的分布式事务一致，导致隔离性是无法保证的，所以说当前基于MySQL的分布式事务是无法保证严格的分布式事务语义支持的。当然随着MySQL引入GR可以做到CAP理论中的强一致，再加强中间件的相关功能及定制MySQL相关功能也是有可能做到支持严格的分布式事务的。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/13bcabb65529a29ce2bb9d23997abb79319e9040"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src="http://img03.iwgc.cn/mpimg/5cca52de53b86bb96669c080b483289d010266b7"/&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
</description>
      <pubDate>Wed, 22 Feb 2017 16:02:58 +0800</pubDate>
    </item>
    <item>
      <title>大数据时代的结构化存储—HBase在阿里的应用实践</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-bottom: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：天梧，阿里巴巴中间件技术部高级技术专家。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;时间回到2011年，Hadoop作为新生事物，在阿里巴巴已经玩得风生水起，上千台规模的&amp;rdquo;云梯&amp;rdquo;是当时国内名声显赫的计算平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一年，Hadoop的好兄弟HBase由毕玄大师带入淘宝，开启了它的阿里之旅。从最初的淘宝历史交易记录，到去年的支付宝消费记录存储在线历史存储统一；从蚂蚁安全风控的多年存储演进，到HBase、TT、Galaxy的大数据激情迭代；HBase在阿里经历过年轻的苦涩，释放过青春的活力，也付出过成长的代价。几代人的不懈努力下，五年陈的HBase开始表现出更成熟、更完善、更丰富的一面，成为公司内部被广泛使用的存储产品之一。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过阿里集团内部的锤炼，集团将这个技术红利输送给广大阿里云客户。现已推出云数据库HBase产品，支持海量的PB级的大数据存储，适用于高吞吐的随机读写的场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本篇会系统性的阐述HBase的定位、建设思路，其中相关内容可能并未深入展开，后续会有专项介绍，请大家随时关注云栖社区相关文章。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;概述&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HBase是一个开源的非关系型分布式数据库（NoSQL）,基于谷歌的BigTable建模，是一个高可靠性、高性能、高伸缩的分布式存储系统，使用HBase技术可在廉价PC Server上搭建起大规模结构化存储集群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HBase最初是以Hadoop子项目的形式进行开发建设，直到2010年5月才正式成为Apache的顶级项目独立发展。伴随着互联网时代数据的澎湃增长，HBase作为基础存储系统得到了快速发展与应用，大批知名商业公司(Facebook、Yahoo、阿里等)不自主地加入到了HBase生态建设队伍，成为Apache最活跃的社区之一。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HBase的能力特点，可以简单概括为下表，基于这些能力，其被广泛应用于海量结构化数据在线访问、大数据实时计算、大对象存储等领域&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img05.iwgc.cn/mpimg/82c76e554c4586c52c2d55f833a3e24f7e11ef4a"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里从2011年初开始步入HBase的发展、建设之路，是国内最早应用、研究、发展、回馈的团队，也诞生了HBase社区在国内的第一位Committer，成为HBase在中国发展的积极布道者。过去的几年时间，阿里累积向社区回馈了上百个Patch, 在诸多核心模块的功能、稳定性、性能作出积极重大的贡献，拥有多位Committer，成为推动HBase的长远发展的重要力量之一。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里是一家综合生态型公司，内部庞大业务矩阵高速发展，在基础存储方面，需要更好的功能灵活性、基础设施适应性、服务稳定性、效率成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，阿里HBase团队发展维护了HBase的内部分支，其基于阿里巴巴/蚂蚁金服的环境和业务需求，对社区HBase进行深度定制与改进，从软件系统、解决方案、稳定护航、发展支撑等全方位提供一站式大数据基础存储服务。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;HBase在阿里的使用&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Ali-HBase作为阿里巴巴大厦的基础存储设施，全面服务于淘宝、天猫、蚂蚁金服、菜鸟、阿里云、高德、优酷等各个领域，满足业务对于大数据分布式存储的基本需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在刚刚过去的2016年双11，HBase承载访问量达到了上百GB/秒(写入)与上百GB/秒(读取)，相当于全国人民一秒收发一条短信，在业务记录、安全风控、实时计算、日志监控、消息聊天等多个场景发挥重要价值。面对如此规模的业务体量，阿里巴巴团队对于如何基于HBase打造稳定、高效、易用的存储服务，形成了一套完善的产品体系与实践经验，其整体大图如下：&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img05.iwgc.cn/mpimg/b55bda111feba8d98bf73a8cbc4cf3b5315e1769"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总体上，我们以定制的软件内核为中心，建设质量平台、运维平台、业务平台和数据流设施四大内容，以支持业务对于基础数据服务的全方位需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来，本文会围绕可用性、数据流、性能优化等方面介绍最近的一些具体工作，希望能够给相关领域的同学带来一点帮助。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;高可用建设&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务持续可用是互联网系统的显著特征，但由于物理环境、软件Bug的不确定性，要做到系统的高可用往往不是一件容易的事，尤其是对于有状态的存储系统而言。今天，我们统一使用SLA(服务等级协议)去衡量一个分布式系统的可用性，比如SLA达到99.99%的系统，其全年的不可用时间小于52.6分钟；99.999%的系统，其全年的不可用时间小于5.25分钟，达到这个能力的系统一般可以称之为高可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面对断电、断网、硬件故障等物理机房的不可靠性，任何一个高可用系统必须通过双机房，甚至多机房部署的方式进行容灾。对于存储系统，这就要求数据能够在机房间冗余复制，并保证各个机房的数据对上层应用的一致性。所以，高可用建设是我们过去很长时间的重要工作。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;集群异步复制&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Apache HBase从0.92版本开始支持Replication功能，它会实时地、异步地将一个HBase集群中的增量数据复制(推送方式)到另一个HBase集群，当主集群故障不可用时，应用可以切换访问到备集群，从而实现数据与服务的机房容灾。关于HBase Replication的基本原理，读者可以从&lt;/span&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: underline; background-color: transparent;" target="_blank"&gt;&lt;span&gt;社区官方Book&lt;/span&gt;&lt;/a&gt;&lt;span&gt;中获得详细内容，本文便不再阐述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面的篇幅，将主要介绍阿里在使用Replication过程中的经验与改进，期望能和在类似场景工作的同学有所共鸣。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;复制效率&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于在线业务的可用性要求，阿里HBase很早便开始使用Replication功能去部署双机房容灾，迎之而来的第一个大问题是数据复制的效率，尤其异地远距离部署（比如上海与深圳跨城复制）时更加严重，表现为数据复制的吞吐小于客户端写入主集群的吞吐，数据不断积压，延迟逐渐增大，只能等待凌晨低峰期逐渐消化。我们对此进行深入分析，着重优化了以下几点，才得以保障跨城集群复制也能稳定保持在秒级内。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提升源端发送效率&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;HBase Replication的基本数据复制过程是源端串行读取HLog的内容，发送到目标端机器，由目标端解析HLog并写入数据写。我们发现，因为源端的串行读取、发送HLog，当集群写入吞吐大的时候，会存在严重的性能瓶颈，为此，我们重构了这一块逻辑，将HLog的读取与发送解耦，并且发送由单线程优化为多线程，使得整体的源端发送能力大幅提升。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提升目标端Sink效率&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;在Replication的默认实现中，源端会按照HLog的原始写入顺序进行回放。为了提升目标端的写入效率，我们将所有待发送的HLog先进行排序，使得同表同Region的数据都能合并处理，同时将目标端的数据写入尽量并行化。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;热点辅助&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;尽管做了以上两点后，集群间的数据复制能力大大增强，但是个别服务器仍然会由于负载过大，而产生一定的复制延迟。从本质上来说，这是因为HBase的服务器分配了更多的资源服务于来自客户端的写入请求，当某个服务器成为集群中的写入热点并高负载工作时，这个节点的数据复制基本很难再消化庞大的写吞吐。这是一个曾困扰我们很久的问题，你可以用一些运维的方式去解决。比如开启更多的线程数，但这并不能总有效。因为服务于客户端的线程数，要远远大于Replication的线程数。再比如从热点服务器移走Region，降低吞吐与负载，但热点并不保证是恒定的，可能会跳跃在各个服务器，我们也开发了新的基于历史监控的负载均衡算法，以尽可能地让请求均衡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多时候，通过运维管理手段能够控制影响、化解问题，但当你需要维护上百个集群时，一点一滴的运维要求慢慢堆积成很高的壁垒。所以，我们尝试改进系统能力，用自动、一劳永逸地方式去解决热点下的数据复制积压问题。面对热点的基本思路是散列，在这个具体场景上，我们打破原先的自生产自推送的设计，利用整个集群的能力，使得热点服务器上积压的数据(HLog文件)，能够由集群中的其他空闲服务器进行消化。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;配置在线调整&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;配置的在线调整不仅能极大提升运维幸福感，而且对于系统改进可以产生更加敏捷的反馈。这并不新鲜，但这是一项十分重要的能力，我们在系统改进的道路上也对其特别重视。HBase的Replication功能会有很多参数，我们将其全部优化为可在线调整，给日常的服务支撑带来了很大的价值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多链路&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务多地多单元部署是阿里技术架构的一项重要特征，这要求基础存储具备数据链路的灵活流动性。今天，阿里HBase会在多地部署多集群，集群间数据相互流动，以满足单元化业务的需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在支持数据多链路的生产应用上，我们总结了以下几个要点。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;表级别链路&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当一个HBase集群启用多个数据链路后，我们期望自由设置表的数据可以被复制到其中的一个或多个链路，使得整个数据的流动更加灵活。为此，我们增加了一种特性，通过设置表的属性，以决定该表的数据流向哪些链路，使得整个数据流动图可以由业务架构师任意设计，十分灵活。此外，当需要在集群间热迁移数据时，它也能带来十分重大的作用。 整体效果如下，以表为单位数据可以任意流动：&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img03.iwgc.cn/mpimg/275a32ae827115485bee8a926049f6e483cd9d79"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;链路可视&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当数据可以在多个集群任意流动后，一个很迫切的需求是链路拓扑以及复制状况的可视。为此，我们强化了Replication的信息层，不仅源端保留它到多个目标的链路信息，而且每个目标端也会保留多个源端到它的链路信息，从而我们可以从任意一个集群绘制整个链路拓扑图。同时，我们极大丰富Replication的运行状况信息，并将之汇聚到HBase的Master节点，由其统一汇总展现，从中我们可以清晰得到数据是否积压、复制的性能瓶颈、节点间的均衡情况、具体的延迟时间等信息，其中复制的延迟时间是一个十分关键的信息。基本信息如图：&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img05.iwgc.cn/mpimg/06edf27a523b4e93012dfbe6b08118649a2c63e7"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;循环复制&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;在数据多链路下，会产生一些循环复制的场景。比如集群A-&amp;gt;B-&amp;gt;C-&amp;gt;A，这是一个简单的链接式复制，当数据流过某个集群时，HBase Replication会在数据中添加该集群ID的信息，以防止同一条数据被多次流经同一个集群，基于这个设计，即使复制链路存在环，数据也不会产生无限循环流动。但是，仍然有一个效率问题不得不提，对于A&amp;lt;-&amp;gt;B&amp;lt;-&amp;gt;C&amp;lt;-&amp;gt;A这样一个数据链路，我们发现客户端写入到A集群的数据，在B集群和C集群上会被复制写入两次，一次通过A-&amp;gt;B链路写入，另一次通过A-&amp;gt;C-&amp;gt;B链路写入。所以，为了避免这种写入放大，需要在链路部署上防止产生这种环。在过去实践的一些场景，发现这种环状链路不得不存在，所以系统层面，我们也对Replication做了相关优化，以去除这种写入放大。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;链路隔离&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当源集群配置了多个数据链路后，我们总是期望这些链路之间相互隔离，不会因为一个链路的积压影响其他链路。在大多数时候，这一切都如预期工作，但当集群故障时，糟糕的事情发生了，我们发现一个异常链路会阻塞全部链路的复制恢复，究其原因，是因为在数据复制的恢复期间，很多资源是所有链路共享的。所以，这些资源的链路解耦成为我们的工作，同时，也好好对数据复制的宕机恢复速度进行了优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据的一致性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天，大多数生产系统会使用异步方式去实现集群间的数据复制，因为这样效率更高、逻辑更清晰。这意味着，集群间数据是最终一致模型，当流量从主切换到备，从备上无法访问完整的数据，因为复制存在滞后，并且当主集群永久不可恢复，数据也会存在部分丢失。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了满足业务场景的强一致需求，我们采用了两种方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一种，异步复制下的强一致切换。虽然备集群的数据集滞后于主集群，但是在主集群网络健康的情况下，仍然可以保障切换前后数据的强一致。其基本过程如下，首先让主集群禁止数据写入，然后等待主集群的数据全部复制备集群，切换流量到备集群。这里存在两个依赖，一个是集群的写入控制功能(支持禁止来自客户端的数据写入)，另一个是复制延迟的确定性，虽然数据是异步复制的，但是我们将数据的复制时间点明确化，即该时间点之前写入的数据已经完全复制到了备集群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二种，数据复制使用同步的方式。即当数据写入返回客户端成功后，能保证数据在主备集群均已写入，从而即使主集群完全不可恢复，数据在备集群中也能保证完整。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了满足类似场景的需求，阿里HBase研发了同步方式的集群间数据复制，具体内容可参考下一节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;冗余与成本&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据在集群间的冗余复制，给系统的可用性带来了数量级的提高，但同时也意味着更大的成本开销，在保证可用性下如何优化成本是一个需要重点思考的问题，阿里HBase在这方面投入了较大精力的尝试，具体内容将在接下来的&amp;rdquo;性能与成本&amp;rdquo;章节进行介绍。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;集群同步复制&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;上文提到，HBase集群可以使用异步方式的数据复制来构建双机房容灾，当主集群故障不能提供服务时，就会切换请求到备集群，保障系统整体高可用。然而，异步复制模式下存在的问题是：在服务切换后，由于主备集群间的数据并非强一致，存在部分数据无法通过备集群获取或者访问到的内容过旧。也就是说，如果应用对于数据访问具有强一致要求，现有的异步复制设计，无法在主集群故障时，仍然保证系统的高可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为此，阿里HBase团队投入研发集群同步复制功能，使得主集群不可用时，备集群的数据能达到和主集群完全一致，业务可以无感知的切换到备集群。相比于异步复制，同步复制会带来的额外的开销，但整个写入吞吐/性能的影响，在我们的设计中，做到了尽量的相近。其整体功能点如下：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据强一致性保证。数据写入主备集群，主集群不可用后，备集群可以恢复所有在主集群写入成功的数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高性能。主备集群HLog写入采用异步并行的方式写入，对写入性能影响微弱&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;列族级粒度。列族级别的配置，支持同集群下同个表的不同列簇可以使用不同的复制方式，同步或异步。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同异步复制共存。任何情况下，同步复制表的任何操作不会影响异步表的读写。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;灵活切换。备集群不可用，同步复制可以一键切换为异步复制，不阻塞主集群写入。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;关于数据的强一致，我们进行了如下定义：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;返回应用成功，则一定主备都写成功&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;返回应用错误，则未决(主备是否成功不能确定)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据一旦读取成功，则主备永远均可读，不会出现主读成功切换至备后读不到或者备读得到主读不到的情况&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任何情况下，保证主备集群的最终一致性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;我们遵从简单、高效的原则去设计同步复制功能，简单意味着该功能与原核心逻辑保持最大程度的隔离，能够快速达到生产稳定性要求，并能很好地降级成异步复制；高效意味着主备必须并行写，这在错误处理上增加了不少的难度。整体实现方案如下：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;客户端向主集群写入数据的时候，会并行写入两份Log，一份是本地HLog文件，另一份是备集群的HLog文件，我们称之为RemoteLog.两者皆成功，才返回客户端成功。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;RemoteLog仅在故障切换后，用以回放数据。正常运行时，不做任何使用，备集群的数据仍然通过现有的异步复制链路写入。同时，可以通过停写RemoteLog，把同步复制降级成异步复制。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HBase数据的多版本特性，使得基于HLog的操作回放具有幕等性，所以，在故障切换后，RemoteLog中的数据回放会存在一定的重复，但不会影响数据正确性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;主备集群存在Active和Standby状态，只有Active状态的集群才能接受客户端的数据写入&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在备集群切换为Active状态之前，会对RemoteLog全局上锁，从而防止客户端写入数据到主集群返回成功。这也意味着，主备集群在任何时刻，只有一个处于Active状态，不会有脑裂发生。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;RemoteLog会定期由主集群清理，主集群服务器的一个HLog文件对应一个或多个RemoteLog，所以当主集群的HLog文件中的数据被完全复制到备集群后，相应的RemoteLog就可以被删除。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;其基本结构如图：&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img04.iwgc.cn/mpimg/f10f95c4fbde67e8eb5bb36b20fa98c4ab0b5c65"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这里，主备角色是不对等的，我们通过部署进行分配。其中，主-&amp;gt;备使用同步复制模式，一旦流量切换到备后，备-&amp;gt;主使用异步复制模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于主备双Log的并发写入，使得同步复制的性能能够与异步复制接近，在实际使用中，我们观察到客户端写入响应时间增加小于10%。最后，我们列举一些应用同步复制容灾的场景，以供大家参考。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于状态变更数据的场景。HBase中提供了CheckAndMutate接口，用以支持条件写入/更新/删除，其含义是当某一条件达成时，才执行该写操作。这意味着查询到的数据必须是强一致的，不然就会写入错误的数据。比如，对于一笔交易记录，其状态只能从&amp;ldquo;已付款&amp;rdquo;变更为&amp;ldquo;已发货&amp;rdquo;，而不能从其他状态变更为&amp;ldquo;已发货&amp;rdquo;，所以在数据更新时需要做状态的条件判断。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;日志/消息的顺序订阅。对于日志/消息产品而言，订阅数据的完整性是其最核心的保证，也就是说通过HBase进行Scan的时候，必须保证能扫描到范围内的每一行数据。如果切换后，主备数据存在不一致，则会出现scan过程中跳过某些数据，造成订阅少数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;流计算。由于流计算不停地基于中间结果和新的数据流进行迭代处理，作为存储中间结果的数据库，必须时刻具备数据的强一致，才能保证数据计算结果的正确性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;集群间的数据复制是HBase用来构建机房容灾、提供高可用性的重要武器，阿里HBase通常使用异步复制方式部署，着重改进其在复制效率、多链路、一致性等方面的能力。同时，也研发了一种高效的同步复制方式，以满足数据强一致场景的容灾需求。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;数据传输管道设施&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;数据流动的诉求&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在大数据的发展背景下，没有一个系统可以处理所有的场景。因此，打通各个系统之间的数据通道，让数据在在线存储、实时分析、离线计算中高速流动，形成闭环，是打造大数据平台、挖掘数据价值的关键一环。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;HExporter系统&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;HBase作为一款高吞吐的在线数据存储系统，我们希望其能高效、准确地吐出数据，以满足业务对数据计算分析的多元化需求，这是我们建设HExporter系统的出发点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HBase业务的数据规模飞速增长，单个业务数据量达到10T，百T级别非常常见，且越来越多的业务要求同步数据到离线计算系统进行计算。同时大部分离线计算任务是周期型，比如按天为单位进行计算，因此数据要按时间分区进行同步并保证单调性，这需要一个高效的时间分区增量方式的数据导出方案来应对日益增长的需求。这是我们建设HExporter系统的场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于以上出发点和场景，我们期望建设一个实时的、高效的HBase数据管道设施，使得写入到HBase系统的数据可以方便地传输复制到其他异构系统，让数据因为流动、计算、加工而产生新的价值。为此，阿里HBase团队投入研发HExporter系统，其整体上具备以下能力：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实时性。数据可以秒级复制到其他异构系统&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;准确性。保证数据在HBase与其他系统间的最终一致性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高吞吐。支持调整缓冲等级和压缩等级，从而协调数据生产端和数据消费端的能力，达到最大的吞吐量。在实际应用中，HExporter可以有效使用95%的网络带宽并保持稳定运行。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;容灾性。HBase主备容灾模式下，数据能够正常传输。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时间确定性。明确标注同步时刻，该时刻之前写入的数据都已经传输完成。基于此，保证计算系统对某个时间分区的完整数据进行计算。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可降级。支持按表取消数据传输。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;监控告警。支持传输延迟的监控与告警。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;HExporter系统的整体架构如下：&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img03.iwgc.cn/mpimg/eb51377a0ed04a76ec3a0402f2a2a8410f6ecb9a"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HExporter的数据是由HBase系统&amp;ldquo;推送&amp;rdquo;过来的，其利用了HBase系统本身的内部数据复制机制，模拟了备库的角色。HBase的RegionServer将自身的数据打包，随机发送到HExporter的采集节点。每一个数据包随机的选择采集节点，因此采集节点之间是完全对等的，可以动态的增加节点来提高HExporter的接收能力，它是水平可扩展的。为了支持主备模式下的HBase，HExporter需要同时采集主备集群，保证客户端写入HBase的数据不会因为主备间的网络中断而延迟采集。此时需要解决数据去重的问题：HExporter在收到数据包时，会检查数据包的标记，这个标记表示了数据是否来自于最源端（客户端写入的集群），如果不是则直接抛弃这个数据包。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大部分离线计算任务是周期型，比如按天为单位进行计算，数据要按时间分区进行同步，因此消费数据时必须能够获取时间信息。HExporter提供两个维度的时间供消费方使用：业务时间（数据的生成时间）和存储时间（数据写入HBase的时间）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同步时间点指的是一个时刻，在该时刻之前写入HBase的数据都已经被HExporter采集。由于数据的推送是随机的，因此到达采集节点的数据在时间上是乱序的，同步时间点利用HBase在Zookeeper上记录的日志信息计算每个RegionServer的同步时间点，最后选择所有RegionServer同步时间点中的最小值记为集群的同步时间点。由于同步时间点的计算是保障数据有序的关键，必须能够容忍宕机等问题。在HExporter的设计中，每一个采集节点都可以计算同步时间点，所有节点竞争同一个锁（依赖Zookeeper实现），从而获得这一轮计算同步时间点的权利。只要有一个采集节点存活，同步时间点的计算就可以正常工作。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;目前，HExporter作为阿里HBase系统的基础数据传输管道设施，每天有上百TB的数据被传输到离线计算平台、在线分析引擎、搜索引擎等系统，这些系统协力配合满足应用丰富多样的数据需求。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;性能与成本&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;数据冗余的背后&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;前面章节提到，我们使用数据在集群间的冗余复制来提高系统可用性，对于主备容灾，这意味着我们需要花费一倍的额外成本来换取高可用，能不能降低开销成为高可用能力是否可以普及的重要门槛。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;跨集群分区数据复制&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;HBase使用HDFS作为其文件存储系统，底层数据存储默认使用三副本冗余以保障数据的可靠性，这也意味着HBase内部的HLog、Flush、Compaction过程会产生三份数据流量和存储空间，包括网络和磁盘。如果HBase的底层副本数能够从3降低为2，很大程度上可以减少近1/3的成本，但是2个副本在实际运行中的数据丢失率仍然是不小的。所以，对于数据可靠性有要求的环境，三副本是最基本的要求。但是，当我们部署主备容灾后，全局拥有了六个副本，能否降低单个集群的副本为两个，全局从六个副本降低成四个副本，这成为资源优化的重要入口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了容忍单集群在两副本下的数据丢失，我们需要建立跨集群的分区数据复制机制，使得当某一个集群数据文件丢失时，可以快速地从另一个集群进行恢复。为了适用于更多的场景，比如集群迁移、一键建站，我们在设计上会更加通用，支持将某个表的指定范围数据高效、准确地复制到指定集群，整体功能可以概括如下：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;简单。可以通过一个接口或者命令执行复制，并在系统UI上实时显示进度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;快速。整个复制任务会进行拆分，并由不同节点完成，大大提高速度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;容错和灾难恢复。复制过程中任何出错和宕机都能自我恢复。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;在实现上，其类似于分布式任务调度，每一个提交的复制作业，会按照RowKey范围拆成多个子任务，并且子任务的起止范围是Region的子集，由Master派发给集群中的服务器，并保证失败后的重新派发。任务调度中的相关数据，统一存储在zookeeper上，从而保证宕机情况下作业的可恢复性。数据的具体复制根据情况会采用完全拷贝和部分复制两种方式，如果文件内容的RowKey范围是子任务的子集，则将其完全拷贝到指定集群；不然，则使用部分复制的方式，在拷贝期间过滤掉无效的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详细系统架构如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img04.iwgc.cn/mpimg/92b86b61f53b27166bc8a8896617612187deab46"/&gt;&lt;/center&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;br&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图中的部分角色说明：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;DataMigrationManager：DMM,运行于HBase Master，负责接收复制作业、切割作业为多个子任务、派发子任务、监听完成情况等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;DataMigrationWorker：DMW, 运行于HBase Regionserver，负责完成子任务的数据复制到指定集群。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Job：一次数据复制作业，由用户提交，内容包括表名，Rowkey范围以及指定目标集群的地址信息。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Task：Job分割后的子任务，多个子任务的Rowkey范围拼接后组成完整的复制作业的Key范围。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;在拥有跨集群分区数据复制能力后，双集群双副本的运行方式得以应用普及，这能有效降低容灾成本。同时，我们的集群迁移、表迁移能力大大增强，在不限流下单节点可以达到70MB/秒，更重要的是这变成了一项能力、一个接口服务，而不是一堆运维操作，大大提升运维效率。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;多集群多活服务&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;对于通常的双集群容灾部署，同一时间只有单个集群提供服务，使得另一个集群在大部分时间内处于资源闲置。为了改善这一情况，阿里HBase使用了以下几种方式：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务对于数据无强一致要求，同个业务的部分客户端访问主集群，部分客户端访问备集群。这种方式对于业务应用部署存在一定的负担，使其数据库地址管理复杂化。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;交叉部署访问，支持数据的强一致要求。一般我们会把类似场景的多个业务部署在同个集群中，通过交叉部署，在同一时间，使得一些业务访问主集群，另一些业务访问备集群，从而同时发挥两个集群的资源。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;客户端支持同时访问双集群。我们通过改造HBase的客户端，使其支持同时访问双集群，这不仅可以提升集群的资源使用率，还大大降低了访问毛刺，因为任何超过一定时间的请求都会被重发到另一个集群。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;我们经常使用上述一二的方式去优化双集群容灾下的资源使用，并且取得很不错的效果。&amp;nbsp;&lt;br&gt;现阶段，由于业务场景对请求稳定性的更高要求，我们开发了&amp;ldquo;客户端支持同时访问双集群&amp;rdquo;的功能，以规避单节点抖动（如网络、磁盘、GC、锁竞争、热点）的影响，减少应用访问HBase的响应毛刺。从实际测试使用看，开启该功能后，整体毛刺比例下降达到一个数量级以上，有效去除HBase请求服务时间不稳定的影响。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;更多性能工作&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在过去的几年，阿里HBase投入了很大的精力去进行系统的性能优化，包括Region级二级索引、Bucket Cache、Small Scan、Reversed Scan等很多重要优化已经反馈给社区，并在开源伙伴的一起努力下，不断更新迭代，读者可以从社区了解具体的原理与实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;刚刚过去的2016年双11，可以说是HBase的一场圣战，面对巨大峰值流量从容应战的背后是我们在性能优化上的很多新型武器。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;异步API&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;一直以来，HBase只能使用同步API方式访问服务，使得吞吐型场景应用端大量线程阻塞在HBase接口，严重影响性能，而异步的思想并不陌生。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在去年双11后，阿里HBase开发实现了一套全新的异步API，使得客户端不需要阻塞等待到服务端返回结果,通过回调函数执行请求成功或失败后的业务逻辑，大大提升请求吞吐。我们将其应用于监控、安全、日志等场景，整体写入吞吐可以提升1至3倍。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;前缀BloomFilter&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;HBase利用BloomFilter过滤不必要的文件来提高HBase数据读的性能，其效果只支持Get不支持Scan；在实际使用场景中，有很多业务Scan操作会扫描具有相同前缀的行，比如物流详情场景，其Rowkey结构是：物流单号+时间戳，一个物流商品会经历多个状态，每有一次状态转移需要写入一行数据，这些状态正常在10个左右，通过Scan的方式可以查询一个物流单号下的所有状态。针对这个场景我们设计了前缀BloomFilter，在业务Scan的起止范围存在公共前缀下，使得Scan操作也可以使用BloomFilter来过滤文件，大大提升了查询效率；菜鸟物流详情开启前缀BloomFilter后，查询性能提升一倍，做到大促不扩容，轻松hold住今年大促6.57亿包裹的物流详情查询。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HLog压缩&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;HLog从0.92版本开始支持字典压缩，但其与Replication复制冲突，使得其一直无法真正地被使用，而大量在线业务使用宽表结构，几十个字段的场景比比皆是，HLog的压缩将有效提升写入能力。为此，阿里HBase重构了HLog的压缩机制，与HBase Replication功能完美兼容运行，在消费记录、数据总线、库存对账等多个业务线获得良好效果，提升写入20%。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;内置计算&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;数据的聚合、校正、清洗是数据库系统常见的计算场景，通过外部客户端进行数据的扫描、计算、更新是我们常用的传统方式。当面对TB级以上规模的时候，这种方式不仅效率低下，而且对本身的数据服务性能影响巨大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里HBase一直在探索一种高效、环保的能力去解决我们对于数据基本计算的需求，几经业务理解与抽象，最终找到一种基于coprocessor的数据库内置计算方案。它不仅可以提供基本的Count、Avg、Sum、PV、UV等分析聚合能力，也可以提供常见的格式转换、内容校正、字段清洗等数据管理能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其基本原理是，我们在HBase的Flush、Compaction、查询返回等路径添加coprocessor的hook，并开发很多通用的coprocessor插件，使得HBase服务端能够在Compaction、Flush期间就完成数据计算工作，这不仅促使计算结果快速输出，也大大减少数据存储IO，大大提升整体性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年，凭借这个能力，多个几百TB规模业务在一周以内完成字段清洗、格式转换，并且全程对业务在线访问无影响。凭借这个能力，很多秒级生产的指标数据，应用可以零成本聚合成小时级、日级等粗粒度指标，并对HBase系统减少50%以上的访问压力。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;未来发展&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着2016天猫双十一的GMV定格在1207亿，HBase的大促目标圆满完成，然而完美的结果只是开始，阿里HBase团队追求卓越的心永远不会变，推陈出新也永远不会停。在未来的日子里，我们将会重点攻破以下难题。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;GC的挑战&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;HBase作为JAVA性存储系统，大容量的内存堆使得YoungGC、FullGC的停顿成为我们一直以来挥之不去的痛苦。探究GC的原理机制，我们明确HBase内部的写缓冲Memstore和读缓存BlockCache是造成GC停顿的最大源头，正在尝试用全新研发的完全自管理内存的Map以替换JDK自带的Map，从而消除GC的影响。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;我们正在尝试提供SQL方式访问HBase。它会增加数据类型，降低用户的开发理解门槛，促进异构系统之间的数据流动效率；它会增加全局二级索引，使得多条件查询更加高效；它会简化查询表达，使得性能优化更加普及；它会增加通用的热点解决方案，帮助用户免去复杂的散列逻辑。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;容器部署&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;我们正在尝试将HBase部署运行于Docker之上，使得整体运维更加敏捷，集群伸缩更加自如，资源使用更加充分。&lt;/span&gt;&lt;/p&gt;&lt;hr style=" box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "/&gt;&lt;p&gt;&lt;span&gt;更多精彩，欢迎关注CSDN大数据公众号！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img03.iwgc.cn/mpimg/a08096f0939c73d9fca2a2450f1b9954bb2bf3e4"/&gt;&lt;/center&gt;
</description>
      <pubDate>Wed, 22 Feb 2017 16:02:58 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】MIT评出全球十大突破性技术，Google Cloud Endpoints正式发布</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;p&gt;&lt;span&gt;Cloudaily网罗新鲜要闻，每日为你呈现&lt;span&gt;大数据和云计算领域&lt;/span&gt;热点新闻。本次内容播报如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;交通部推进智慧交通发展 加快云计算技术应用&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;日前，交通运输部印发《推进智慧交通发展行动计划（2017&amp;mdash;2020年）》。交通运输部将选择重点物流园区、客运枢纽、港口开展智能化示范应用，完善道路运输行政许可&amp;ldquo;一站式&amp;rdquo;服务，推进许可证件（书）数字化，实现跨部门、跨区域政务信息共享。《计划》提出，将加快云计算、大数据等现代信息技术的集成创新与应用，选取部分重点公路开展智能化管理试点，开发基于手持移动终端的智能化养护管理系统；鼓励有条件的交通运输企业，应用大数据、云计算等技术，实现对场站、车辆、人员等运输资源的动态监测、优化配置、精准调度和协同运转；选择重点客运枢纽、港口，开展智能化示范应用。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;MIT评出全球十大突破性技术，阿里巴巴连摘两项&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;近日，《麻省理工科技评论》(MIT Technology Review)发布2017年全球十大突破性技术榜单。在与Google、微软、IBM等科技巨头的较量中，阿里巴巴分别入选&amp;ldquo;强化学习&amp;rdquo;和&amp;ldquo;刷脸支付&amp;rdquo;两大技术榜单。其中，阿里巴巴的&amp;ldquo;刷脸支付&amp;rdquo;技术让MIT的评委们颇为震撼。《MIT科技评论》认为，作为全世界首批上线人脸识别技术的国家，中国的人脸识别技术精度已达到金融交易的级别，刷脸支付进入成熟期，迄今已有近1.2亿用户使用。而&amp;ldquo;强化学习&amp;rdquo;技术在阿里双11推荐场景中的应用，将手机用户点击率提升了10-20%。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;亚太Azure云计算平台与服务新增两个韩国区域上线&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;微软宣布其Azure云计算平台与服务区域新扩展的两个韩国区域（韩国中部和韩国南部）已经上线提供服务，还将有4个其他地区即将公布发布计划。现在亚太地区Azure区域已经扩展至13个地区，包括4个位于法国和美国的新区域，全球将拥有38个Azure区域。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;盖雅工场获5000万B轮融资，继续打造劳动力管理云服务平台&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;据报道，亚太地区劳动力管理软件盖雅工场宣布完成 5000万人民币B轮融资，本轮由元生资本领投，经纬中国跟投。盖雅工场是劳动力管理 SaaS 服务领域唯一通过 ISO 双认证的企业，目前有多语言多时区版本。此轮融资后，盖雅工场将继续打造劳动力管理云服务核心平台，在支持国际化复杂工时管理运算、智能劳动力需求预测及自动排班管理等大数据平台及移动端方面发力。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Docker v17.03.0-ce-rc1 发布，应用容器引擎&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Docker v17.03.0-ce-rc1 发布了，其 GitHub 主页显示将于 2017-03-01 发布 17.03.0-ce。本次更新内容如下：1.Client：Fix panic in docker stats &amp;ndash;format；2.Contrib：Update various bash and zsh completion scripts3.Networking：丢弃传入的普通 vxlan 报文以加密覆盖网络，在分配失败时释放网络附件；4.Runtime：修复 Docker 日志中的死锁，修复 CPU spin 等待日志写入事件。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Seafile v6.0.4 发布，开源文件云存储&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Seafile 是一款国产开源的网盘云存储软件，提供更丰富的文件同步和管理功能，以及更好的数据隐私保护和群组协作功能。Seafile 支持 Mac、Linux、Windows 三个桌面平台，支持 Android 和 iOS 两个移动平台。典型的机构用户包括比利时的皇家自然科学博物馆，德国的 Wuppertal 气候、能源研究所。目前，Seafile v6.0.4 发布了。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Google Cloud Endpoints正式发布&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;经过3个月的Beta测试之后，谷歌正式发布了其基于Open API的API管理系统Cloud Endpoints（GCE）。据谷歌介绍，该系统旨在让开发人员可以构建高效、易于扩展的API平台。GCE可以部署、保护、监控及管理运行在谷歌云平台（GCP）上的API。它包含一套可以生成API和客户端代码的工具和库，其目标是简化开发人员访问后端服务的方式。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;普华永道成立上海创新中心，发起科创联盟&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;近日，普华永道位于上海新天地的创新中心宣告成立，也标志着由普华永道发起的上海科创联盟正式启动。该创新中心是普华永道大中华区发展蓝图的重要组成部分，当中包含创新、教育和战略研究三大核心功能。目前该创新中心有五大功能区：孵化器工作室、新兴技术实验室、催化工坊、数字化体验中心以及视频创意中心。而上海科创联盟是为了打造创新生态系统，实现创新生态圈各环节的共享共赢。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;调查表明30%的云计算支出已被浪费&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;每年这个时候，行业人士期待的一件事就是云计算服务提供商RightScale公司公布的年度云状态报告。这个调查报告基于2017年1月进行的研究，并在日前发布，为人们带来一些新鲜的观点。混合云采用率增长，私有云采用率下降：在85%的受访企业中存在多云战略，而2016年1月的调查为82%。而另一方面：私有云采用率从77%下降到72%。这意味着重心正在向公共云转移。云计算与传统IT一样浪费，这是一个真正的惊人事实：通过调查的受访者估计，30%的云计算支出被浪费。尽管对云成本管理进行了越来越多的审查，但很少有企能够充分利用未使用的资源，或选择低成本云计算或区域。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img04.iwgc.cn/mpimg/82bd22b8e53d041b911a361b6ee90808b9d7d74e"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
      <pubDate>Wed, 22 Feb 2017 16:02:58 +0800</pubDate>
    </item>
    <item>
      <title>Qunar React Native 大规模应用实践</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者简介：&lt;/span&gt;&amp;nbsp;殷文昭，去哪儿 Qunar 移动架构组（YMFE）iOS 研发工程师，负责 Qunar 定制的 React Native 框架 Qunar React Native 框架的 iOS 部分的开发和整体维护，主推了 QRN 框架的一次大升级，主要研究 React Native iOS 部分的底层实现。&amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;导读：Qunar React Native（下文简称 QRN）是去哪儿网（Qunar）基于 React Native（下文简称 RN）定制的一套框架，让 RN 用起来更方便快捷，2016 年 3 月上线后已在公司内部大规模应用。透过 QRN 的大规模实践我们可以看到如何更好地去使用 RN。&lt;/strong&gt;&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;前言&lt;/h2&gt;&lt;p&gt;移动 App 跨平台开发技术因为可以低成本、高效率地完成 App 开发，一直以来都是移动开发的热点。目前常见的跨平台开发技术包括 React Native、Weex 和基于 HTML5 的 Hybrid 框架。Qunar 基于 React Native 定制了一套跨平台移动开发框架&amp;mdash;&amp;mdash;Qunar React Native（QRN），QRN 与已有两年历史的 HY（基于 H5 的 Hybrid 方案）一同构成了当前 Qunar 的跨平台开发框架，这两个框架都是由 Qunar 移动架构组 YMFE 推出。&lt;/p&gt;&lt;p&gt;QRN 解决了使用 RN 中的诸多问题，实现了更少的平台差异、更高的开发效率、更好的用户体验，也非常适合像 Qunar 内部这种多个业务隔离的开发体系。结合成熟的离线资源包框架，QRN 页面可以通过热发快速地完成线上 Bug 的修复甚至发布新页面。目前 Qunar 内部已经有大量的业务上线基于 QRN 的页面，这其中也包括了许多核心的业务流程和日均千万 PV 的页面。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;起源&lt;/h2&gt;&lt;p&gt;Qunar 从 2009 年率先开始无线业务至今，移动客户端一直承担着大量的业务需求。2014、2015 年正是 Qunar 在移动端发力、业务增长凶猛的关键时期，去哪儿旅行 App 的页面也与日俱增，2015 年底 iOS 端 App 大小一度超过 110MB。由于 App Store 的限制，超过 100MB 的 App 只能在 Wi-Fi 下才能下载，这就导致了用户期望定机票、酒店时不能使用 3G/4G 网络随时下载去哪儿旅行客户端，因此当时一个迫切的需求就是减少 App 的大小。&lt;/p&gt;&lt;p&gt;缩减 App 包大小的常见思路是去除冗余的业务、优化图片资源等，但是这样依然很难将 App 的大小减少到 100MB 以下。而从根本上减少 App 大小就需要减少 Native 的页面，删减业务显然不是一个可行的方案，这就要求我们将页面做成可以动态化配置。&lt;/p&gt;&lt;p&gt;在 QRN 之前，Qunar 内部一直存在有我们团队推出的一套可以支持动态化配置的跨平台 App 开发框架&amp;mdash;&amp;mdash;HY。HY 是基于 HTML5 的 Hybrid 开发框架，在 Qunar App 中已经有大量的业务使用该方案开发。但是 HTML5 的解决方案存在体验和性能两方面的问题，表现为基于 HY 开发的页面很难达到一个原生的用户体验，在低端 Android 机上体验差，这在一些复杂的动画场景中尤为明显。这些问题其实是 HTML5 方案的基因所决定，因此为了减少 App 的大小我们迫切需要一个新的支持动态化配置的跨平台 App 开发框架。&lt;/p&gt;&lt;p&gt;经过一系列的调研和讨论后，我们决定尝试使用 Facebook 开源的 React Native 作为新的跨平台移动开发框架，这是因为 RN 具有以下特性：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;支持动态化：RN 的页面逻辑使用 JavaScript（下文简称 JS）来控制，因此我们可以做到动态发布。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;跨平台性：RN 本身是支持 iOS 和 Android 两个平台的开发。同时由于其页面开发方式是完全 Web 化的 JS 和 React，这就让 RN 的 Web 端实现成为可能（React Web 就是 QRN 的 Web 端实现），因此 RN 完全可以做到一套代码三端运行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Native 的用户体验：RN 页面使用的是 Native 的原生组件，具有更强的可定制性，完全可以做到一个 Native 的用户体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;为了验证 RN 的技术细节，2015 年 12 月我们在 Qunar 的一个热门独立客户端&amp;ldquo;去哪儿睡&amp;rdquo;上线了基于 RN 开发的酒店用户点评页，其中包括相册的选取界面都是用 RN 来完成（如图 1 所示），该项目同时上线了 iOS 和 Android，页面的整体效果超过预期，这也让我们坚信 React Native 是完全可以作为一个新的跨平台开发框架。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="http://img05.iwgc.cn/mpimg/a7042f743c72788426d32c378c29cef52f91fe89"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 1 &amp;ldquo;去哪儿睡&amp;rdquo;客户端酒店用户点评页面&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;在上线去哪儿睡的酒店点评页的过程中，我们也发现了很多 RN 存在的问题，比如部分 RN 组件因为使用的是 Native 的组件所以还存在平台差异、打开 RN 页面时需要一个较长的加载时间等。为了解决这些问题，我们花了 3 个月的时间基于 RN 定制了一套更快、更好、更统一的跨平台开发框架 QRN。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;大规模应用现状&lt;/h2&gt;&lt;p&gt;2016 年 3 月我们上线了第一个基于 QRN 的页面：去哪儿旅行 iOS 客户端的酒店首页。在之后的几个月中我们上线了大量基于 QRN 开发的项目，到 2016 年 10 月在去哪儿旅行客户端中已有超过 20 个 QRN 项目，其中有 14 个是同时上线了 iOS 和 Android。平均每个项目有 8 个以上的页面，在此之中，酒店一个 QRN 项目就有多达 20 个页面。&lt;/p&gt;&lt;p&gt;在去哪儿旅行客户端中首页的酒店（仅 iOS）、客栈名宿、金融理财的一级入口均为 QRN 页面。不仅如此，对于核心业务流程，例如订单列表页、订单详情页、用户登录页面也都替换为了 QRN 页面（见图 2），这其中包含了很多日均千万 PV 的页面。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/edd4996e5e70815e739191cc9f88d3354c3d71f8"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 2 QRN 页面替换&lt;/center&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;QRN 的架构特点&lt;/h2&gt;&lt;p&gt;QRN 在去哪儿内部大规模的应用与其架构密不可分，在设计 QRN 框架时我们主要考虑了下面三点：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;业务使用的便利性：部分 RN 组件，比如 Switch、Picker 等并没有做到 iOS、Android 两端的 UI 风格统一，而在 Qunar 移动开发中要求两个平台具有一致的 UI 风格，因此为了保证业务使用的便利性，我们需要进一步抹平平台差异。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;与现有页面的共存：在 Qunar 移动端中不仅仅存在 Native 页面，还存在着大量 HY 页面，怎么和这些现有页面进行共存也是我们设计 QRN 所需考虑的问题。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持热发更新：RN 是一个支持动态化的移动 App 开发框架，因此我们需要考虑设计一个完善的热发更新机制来实现 QRN 页面的 bugfix 甚至提供上线新页面。&amp;nbsp;&lt;br&gt;那么，我们是怎么做的呢？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;进一步抹平平台差异&lt;/h3&gt;&lt;p&gt;RN 的 Switch 使用的是 iOS 和 Android 各自平台的 UI 风格（如图 3 所示），这在使用时极为不便。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/954673109405e6278541f8ac542ffefc8f8aa66a"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 3 React Native 的 Switch 两端 UI 风格对比&lt;/center&gt;&lt;p&gt;&lt;span&gt;在 QRN 中我们提供了 iOS 和 Android 统一的 UI 风格，方便业务使用（如图 4 所示），对于其他不统一的基础 UI 组件，我们都在 Android 上基于 iOS 风格重新实现，保证了两个平台的 UI 统一。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/61d125ec09717b1a9ec2a375fd48e00181d6496e"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 4 QRN 中统一的 Switch UI 风格&lt;/center&gt;&lt;p&gt;&lt;span&gt;同时，我们也使用 JS 实现了一些常见的外部 UI 组件，例如图 5 中支持侧滑操作的 ListView 和日历等组件。使用 JS 实现的组件具有很强的跨平台性，如果这些 UI 组件出现 Bug，我们也可以通过热发更新快速修复，其成本远低于修复一个 Native 的组件（&lt;/span&gt;&lt;span&gt;从&lt;/span&gt;&lt;a style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; line-height: 27.2px; word-wrap: break-word !important; background-color: transparent;" target="_blank"&gt;http://ued.qunar.com/qrn/extraUI.html&lt;/a&gt;&lt;span&gt;&amp;nbsp;可&lt;/span&gt;&lt;span&gt;查看更多的 QRN 外部 JS UI 组件）。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/877b0c2183237b55fcfadf8a4ad774f9dc4b04eb"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 5 支持侧滑操作的 ListView 和日历组件演示&lt;/center&gt;&lt;p&gt;&lt;span&gt;除了 UI 上的不同，iOS 和 Android 平台的差异还体现在其他地方，其中一个不同点就是 App 状态栏。在 iOS 上从 iOS 7 开始就支持沉浸式状态栏，且高度均为 20，但是 Android 上由于系统版本和机型的不同，是否支持沉浸式状态栏、状态栏高度这些属性在写 RN 页面时都需要关注，但 RN 并没有提供一个统一的 API 去获取。对于这些差异，在 QRN 中我们都提供了统一的 API 方便业务在写 QRN 页面时可以直接获取，从而无需区分平台。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;通过这些方式我们真正做到了跨平台性，去哪儿旅行客户端首页的客栈名宿页面同时上线了 iOS 和 Android，其 JavaScript 代码只有 6 处 Platform 进行平台的判断，而其源于需要和 iOS、Android 现有的 Native 页面进行交互，本身两个平台的 Native 页面进行数据传递的 Scheme 会存在差异，所以需要进行平台的判断。可以说使用 QRN 进行页面的开发完全可以做到不需要平台代码的判断，一套代码同时运行在两个平台上。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;JS Bundle 的拆分&lt;/h3&gt;&lt;p&gt;RN 中最终 pack 出来的 JS Bundle 文件不仅仅包含了业务的页面 JS 逻辑，还包含了 RN 组件和其框架的 JS。在 QRN 中，我们把 JS Bundle 文件拆分成了 QRN 的框架 JS 和业务 JS（如图 6 所示），在拆分后所有的业务共用一份 QRN 框架 JS，这样每个业务只需提供自己的业务 JS，通过它们的拆分，有效地减少了 JSBundle 的大小，同时也方便了后续的预加载和缓存。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/a5c1e189404ff97b18de4485336e9223ea1e89b5"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 6 拆分 JS Bundle&lt;/center&gt;&lt;p&gt;&lt;span&gt;QRN 的预加载和缓存&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;RN 中创建 RCTRootView（RN 页面渲染的 View）之后会有一个白屏的时间等待 RN 环境的初始化和加载 JS Bundle 文件，这个时间会接近 1s。在 QRN 中，我们提供一个异步获取 RCTRootView 的方法，获取的 RCTRootView 已经完成了 RN 环境的初始化，并已加载完 QRN 的框架 JS 和业务 JS，这时可以直接开始渲染。&lt;/p&gt;&lt;p&gt;为了减少 QRN 中获取 View 的时间，我们进行了 RN 环境的预加载和缓存。所谓预加载就是提前初始化好一个已经加载 QRN 框架 JS 的 RN 环境，这样就只需要去加载业务 JS，可以缩短最少 200ms 的等待时间。缓存指的是我们会缓存一个业务已经加载好的 RN 环境，当下次进入这个业务时就可以直接开始页面的渲染。&lt;/p&gt;&lt;p&gt;在 QRN 中我们给每个业务提供了一个独立的 RN 环境，保证了业务的独立性，当一个业务的 JS 代码出现问题时并不会影响其他业务。这种 QRN 业务完全解耦的方式非常适合类似于 Qunar 这种业务隔离的情况。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;成熟的离线资源包框架&lt;/h3&gt;&lt;p&gt;在 QRN 中，业务 JS 是线上资源，为了减少用户下载时间，我们给 QRN 添加了离线资源包的支持，如果其中有对应网络请求的网络资源，那么请求会直接返回本地离线资源包中的文件，这个时间和读取本地文件一样，因此有效减少了网络请求业务 JS 的时间。同时对于业务使用的图片等资源，我们也会放在离线资源包中加快资源打开速度。离线资源包的使用不仅仅减少了下载业务 JS 的时间，而且让 QRN 页面可以在离线情况下打开，更像一个 Native 的页面。&lt;/p&gt;&lt;p&gt;目前所有的动态化移动开发框架都需要离线资源包的支持来减少资源加载时间，每个公司应该都会有自己的一套实现机制，QRN 使用的离线资源包已经在 HY 中应用多年，其基于 BSDiff 的差分更新机制和智能化的更新策略可以在保证节省用户流量的同时拥有极高的资源包更新率。一个 1.2MB 的资源包，其更新时仅仅需要下载不到 1KB 的补丁。该离线资源包框架适合加速移动开发中的各种网络资源请求，引入框架不需要对已有的网络请求代码做任何修改，整个资源包框架对于资源请求方是无感知的。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;自定义 IconFont（图标字体）的支持&lt;/h3&gt;&lt;p&gt;在 QRN 中我们添加了自定义 IconFont 的支持，可以使用 IconFont 来作为图标。业务只需要在 JS 代码中配置需要加载的 IconFont 就可以自动完成字体的添加，整个过程无需编写任何 Native 代码。与使用图片做图标相比，IconFont 作为矢量图更清晰、更轻量也更灵活。&lt;/p&gt;&lt;p&gt;图 7 所示的去哪儿旅行客栈名宿页面中的住宿类型图标就是基于 IconFont 实现，通过设置字体颜色、阴影等属性就可以控制图标的效果，如果使用图片的话就得为每个不同的大小和效果准备不同的文件。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/b91d25da968533bc7ba8e2abf5767fd47caed95d"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 7 基于 IconFont 实现的住宿类型图标&lt;/center&gt;&lt;p&gt;&lt;span&gt;无埋点统计方案支持&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;QRN 中增加了对 Qunar 无埋点统计方案 QAV 的支持，通过修改 RN 框架，我们做到了 JS 代码无需任何修改就可以统计用户的点击、跳转数据，结合 QAV 提供的用户细查、页面流量分析等多维度的用户分析渠道，让 App 开发者可以洞察用户的行为。而引入这套无埋点方案非常简单，只需将 RN 替换为 QRN 即可，不用对已有的 RN JS 代码做任何的修改。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;全新的 ScrollView 和 ListView&lt;/h3&gt;&lt;p&gt;ScrollView 和 ListView 是业务最常使用的两个组件，但是 RN 的 ScrollView 和 ListView 的性能和内存占用达不到我们的期望。目前网上有很多开源的优化方案，在 QRN 中我们也设计了一套全新的 ScrollView 和 ListView，可以带来更高的灵活性和更小的内存占用。&lt;/p&gt;&lt;p&gt;QRN 的 ScrollView 与 RN ScrollView 最大的不同在于前者的滚动手势是由 JS 控制，而后者使用的是 Native 的 ScrollView，在 Native 处理了滚动手势后通知 JS ScrollView 滚动到哪个位置，详细对比可见图 8。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/984d35679316b401d0e9438792d1a329065b0d4e"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 8 QRN ScrollView 与 RN ScrollView 处理对比&lt;/center&gt;&lt;p&gt;&lt;span&gt;因为 RN 中除了 ScrollView 和 ListView 以外，其他组件的用户手势均由 JS 处理，如果使用 QRN ScrollView 则可以保证 RN 页面所有的组件都使用了统一的手势处理机制，从而带来极大的灵活性，让 ScrollView 嵌套 ScrollView 的效果更加自然。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;QRN 的 ListView 基于 React 的虚拟 DOM Diff 算法实现了真正意义上的 Cell 复用，图 9 显示了在 iPhone 7 上同样 2000 行数据滑动到底时的内存占用情况，可以看到 QRN 的 ListView 内存占用一直维持在 70MB 以内，而 RN 的 ListView 在滑动过程中内存最高达 1.3GB，最终稳定的内存占用也接近 600MB，显然对于大部分的机型，RN ListView 这样的内存占用会导致 App 闪退。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/c5b62e9396160d362046ee0bc7510014bddd9797"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 9 内存占用峰值对比&lt;/center&gt;&lt;p&gt;&lt;span&gt;QRN 的 ListView 与 RN ListView 用法完全一致，一个现有的 RN 项目只需要将&amp;nbsp;&lt;/span&gt;&lt;code style=" padding: 2px 4px; max-width: 100%; box-sizing: border-box; line-height: 27.2px ; ; ; ; ; ; ; ; ; "&gt;import{ListView}from'react-native'&lt;/code&gt;&lt;span&gt;修改为&amp;nbsp;&lt;/span&gt;&lt;code style=" padding: 2px 4px; max-width: 100%; box-sizing: border-box; line-height: 27.2px ; ; ; ; ; ; ; ; ; "&gt;import{ListView}fromqunar-react-native&lt;/code&gt;&lt;span&gt;&amp;nbsp;即可使用 QRN 的 ListView。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;由于 QRN 的 ScrollView 会在 JS 中处理滚动手势，QRN 的 ListView 也会在 JS 中处理 cell 的复用，因此一旦 JS 线程负担过重就会导致页面的卡顿，这也是目前 QRN ScrollView 和 ListView 存在的不足，好在其中大部分都可以通过优化 JS 代码解决。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;遇到的问题&lt;/h2&gt;&lt;p&gt;在大规模应用 QRN 的过程中，我们也遇到了很多问题，主要表现为：&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;node_modules 依赖问题&lt;/h3&gt;&lt;p&gt;npm 并没有很好地解决模块依赖冲突的问题（关于 npm 处理模块依赖冲突的方式可&lt;span&gt;阅读：&lt;/span&gt;&lt;a style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;" target="_blank"&gt;http://www.alloyteam.com/2016/03/master-npm/&lt;/a&gt;&lt;span&gt;）。&lt;/span&gt;但是在 RN 中这个情况会变得更加复杂，RN pack 包的逻辑会默认使用第一级目录下的模块，也就是说如果一个模块 A，在第一级目录下安装了版本 A@1，但是另外一个模块 B 依赖了模块 A@2，那么在模块 B 的&amp;nbsp;&lt;code style=" padding: 2px 4px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;node_modules&lt;/code&gt;&amp;nbsp;下会安装模块 A@2，但是 RN pack 出来的 JS Bundle 中只会存在 A@1。&lt;/p&gt;&lt;p&gt;因为 QRN 中进行了框架 JS 和业务 JS 的拆分，而同一个模块只会在框架 JS 和业务 JS 中存在一份，这就导致了我们需要保证不同的业务 pack JS Bundle 时一级目录下 QRN 依赖的模块都是指定版本。目前，我们自定义了一套工具来解决这个问题。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;React Native 开发&lt;/h3&gt;&lt;p&gt;RN 的开发使用了大量的前端工具，如 JSX、Redux 等。因此，一个前端开发者来开发 RN 时会更容易上手；但是 RN 的开发又需要了解 Native 的布局，这点 Native 开发者会更加熟悉。&lt;/p&gt;&lt;p&gt;目前在 Qunar 内部，同时有前端团队和 Native 开发团队在进行 QRN 页面的开发。在我们看来，RN 的开发是一个全新的开发方式，其既不是传统的前端开发，也不能简单地当作 iOS、Android 开发。相比于前端几十年的开发历史，RN 从公布到现在还不足 2 年，关于 RN 还缺乏足够多的优化技巧与资料，匮乏的高级 RN 开发者其实也阻碍了 RN 的推广与应用，好在这个问题相信会随着越来越多的人学习 RN 开发得到改善。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;一直变化的官方版本&lt;/h3&gt;&lt;p&gt;RN 目前还处于变化中，每两周会有一个新版本，从 2017 年开始，RN 的发布周期变为每个月一次，逐渐趋于稳定。版本的频繁更新特别是布局 CSS Layout 的改动，会导致现有的 Flex 布局出现问题。想象一下，一个 Web 页面在一年间要依次兼容 IE6 至 IE10，这显然是需要开发者花费大量精力来处理版本升级所带来的兼容问题。&lt;/p&gt;&lt;p&gt;QRN 在 2016 年 10 月做了一次官方版本的同步，将基于的 RN 版本从 0.20.0 升级到了 0.33.0，升级之后需要业务进行所有页面的回归，主要是要业务解决 Flex 布局的变化可能导致页面显示错误的问题。升级的主要目的是为了解决 0.20.0 中 RN 存在的 Bug，这个过程中发现升级 Base 的 RN 版本会给业务造成负担，后续 QRN 会评估同步 RN 新版本的收益和风险来决定是否升级 Base 的 RN 版本。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;写在最后&lt;/h2&gt;&lt;p&gt;Qunar 一直以来就是以技术驱动的公司，敢于尝试各种新的技术，在 RN 开源后我们团队就一直在探讨 App 中引入 RN 的可行性。目前 QRN 已经在 Qunar 内部大规模应用，这也验证了我们对 RN 的看法：RN 完全可以胜任核心业务页面，虽然和 Native 的页面还存在差距，但是由于其很强的可定制性，因此潜力很大。随着越来越多更熟练的 RN 开发者出现，RN 必将在业界成为一个非常核心的移动跨平台开发方案。后续我们将把 QRN 做成一个 SDK，开放给大家使用，让 RN 的开发变得更加快捷、简单，未来也在计划开源 QRN。&lt;/p&gt;
</description>
      <pubDate>Tue, 21 Feb 2017 14:41:00 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】微软与Flipkart达成战略合作，中国公共云市场潜力巨大</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;p&gt;&lt;span&gt;Cloudaily网罗新鲜要闻，每日为你呈现&lt;span&gt;大数据和云计算领域&lt;/span&gt;热点新闻。本次内容播报如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;百度在 AI 领域再下一城 领衔&amp;ldquo;国字号&amp;rdquo;人工智能实验室的筹建&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;近日国家发改委正式批复，由百度牵头筹建深度学习技术及应用国家工程实验室。百度集团总裁兼首席运营官陆奇表示，&amp;ldquo;非常荣幸，百度有机会作为牵头者，来筹建中国自己的深度学习国家工程实验室。&amp;rdquo;除此之外，百度还将作为共建单位共同参与大数据系统软件国家工程实验室，及类脑智能技术及应用国家工程实验室的建设工作。据了解，该实验室着重发力于深度学习技术、计算机视觉感知技术、计算机听觉技术、生物特征识别技术、新型人机交互技术、标准化服务、深度学习知识产权七大方向，从研究突破、产业合作、技术成果转让、人才培养等方面提升我国人工智能领域整体竞争力。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Quadas京纬数据完成数千万元A轮融资，布局企业级数据营销平台&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;近日，国内领先的SaaS企业级营销技术提供商&amp;mdash;&amp;mdash;Quadas京纬数据宣布，完成数千万人民币A轮融资，领投方为浙江赛伯乐资本。据悉，本轮投资将用于Quadas SaaS企业级数据营销平台的技术研发和产品布局。Quadas京纬数据，由原Vpon威朋企业级SaaS事业部分拆成立，致力于为客户提供定制化的程序化营销/数据技术解决方案，为客户搭建更加公开透明的移动DSP(需求方), 移动SSP(供应方)与 DMP(数据管理) 平台。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;阿里新零售战略牵手百联 暂不涉及资本层面&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2月20日，阿里巴巴入股线下零售的绯闻对象终于从大润发正式确定为百联集团。今日，阿里巴巴（NYSE：BABA）与百联股份（600827.SH）宣布战略合作，但暂不涉及资本层面。阿里巴巴CEO张勇表示：&amp;ldquo;我们看到巨大的机会，特别是在今天，全渠道的电商融合。希望整个线上和线下会员、支付都可以打通。&amp;rdquo;在去年杭州&amp;middot;云栖大会上，阿里巴巴集团董事局主席马云提出了&amp;ldquo;新零售&amp;rdquo;的概念。他表示，线下与线上零售将在未来深度结合，再加现代物流，大数据、云计算等技术，构成未来新零售的概念。纯电商的时代很快将结束，纯零售的形式也将被打破，新零售将引领未来全新的商业模式。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;印度欲打造全球最大生物识别数据库&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2月20日消息，印度政府正在打造全球最大的公民生物识别数据库，以供科技公司、医疗保健服务提供商和应用开发商使用。在印度前总理辛格的领导下，生物识别项目（Aadhaar项目）开始于2009年，但真正在全印度大规模实施则要归功于现任的莫迪政府。到目前为止，印度政府几乎已经收集了所有12亿公民的数字识别记录，包括对指纹和眼球的扫描。此外，印度政府还支持了一个名为&amp;ldquo;India Stack&amp;rdquo; 的项目，旨在为数字化交换这些数据制定一个标准规范，以促进数字签名和各种正式文件（人们用来求职、进行财务交易或接入政府服务）的在线流通。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;微软亚太区总裁贺乐赋：中国公共云市场潜力巨大&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;微软亚太区总裁贺乐赋（Ralph Haupter）近日接受采访时表示，希望采用新技术来推动长期增长的企业应当采用云计算技术。贺乐赋表示，亚太区的企业负责人目前都着眼于通过采用人工智能、物联网、混合现实和可穿戴设备等新技术，数字化转型他们的业务。&amp;ldquo;云计算就是解决方案，&amp;rdquo;贺乐赋说。根据微软在周一发布的《亚洲数字转型研究》，78%受调查的亚太区企业负责人均认为，云计算是他们数字转型战略的关键。该研究报告显示，在该地区的1494名受调查者当中，80%认为需要把数字转型作为企业的长期增长战略，但只有29%的企业已制定出完整的计划。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;获千万级人民币A轮融资，外居乐能否通过大数据撬动海外置业市场&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;外居乐2016年底获得来自创新工场领投的千万级人民币A轮融资。外居乐是一家数据驱动型的公司，在中美两国都设有技术团队。外居乐主要瞄准海外二手房市场，并想要帮用户解决以下问题：打破语言局限，让用户比本地人更了解房源信息；简单的需求导向性检索，满足用户投资/留学的置业需求；大量的华人经纪人信息及评级，帮助用户选择决策；海外贷款、房屋出租管理等交易后用户可能遇到的问题。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;微软与印度电商巨头Flipkart达成战略合作 Azure将成后者云计算平台&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;微软昨日宣布，与印度线上零售巨头 Flipkart 达成战略合作协议&amp;mdash;&amp;mdash;Azure 云计算平台将独家为后者服务。作为印度线上零售霸主，Flipkart 常被称为印度的亚马逊。据悉，该项合作中，它的首要目标是把 Azure 应用于其计算基础设施，为现有数据中心加入云计算平台的分析能力，但绝不局限于分析销售趋势和处理付款。Flipkart 会利用 Azure 探索人工智能、机器学习与电子商务的结合，而这会利用 Cortana Intelligence Suite 和 Power BI。后两者还会协助 Flipkart 改进广告、营销和消费者服务。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;阿里云联合英特尔国内首推Skylake版云计算产品&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2月20日，阿里云宣布云服务器ECS实例新成员&amp;mdash;&amp;mdash;N5规格族启动公测。这是一款各行各业都可以采用的通用型实例，基于阿里定制版英特尔Xeon Skylake 处理器，以及阿里云对软硬件的深度优化，新产品单实例性能上限提升了60%。这也是英特尔Xeon Skylake 处理器在中国云计算行业的首发。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;微软在英国的数据中心将受到英国退欧的影响&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;随着英国首相特里莎.梅将确认英国离开欧洲市场，微软公司警告说，它可能在欧洲其他国家建立数据中心。如果贸易关税开始上升，微软公司将放弃在英国扩张数据中心规模的当前计划。然而，微软公司发言人日前却表示，该公司在欧盟公投投票之前和之后将言行一致，对于在英国建设数据中心的承诺并没有改变。目前，英国和欧盟其他国家之间的贸易是免关税的，英国和非欧盟国家之间的贸易关税与任何其他欧盟国家的贸易关税相同。然而，一旦英国正式离开欧盟，这将发生变化。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;IBM联合VMware为渠道提供市场就绪的混合云方案&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;去年IBM和VMware建立了战略合作伙伴关系，以促进将VMware环境扩展到SoftLayer共有云中。但是合作伙伴很快失望地发现IBM Cloud for VMware对于渠道来说是个&amp;ldquo;禁区&amp;rdquo;。而本周情况发生了转折，IBM在PartnerWorld Leadership Conference大会上宣布已经授权商业合作伙伴转售此前仅为自己内部服务部门保留的集成混合云方案。Avnet已经提供了自己的工具和白牌服务以帮助合作伙伴在SoftLayer上部署VMware环境，IBM基础设施即服务平台最近被打包到Bluemix品牌下。但是这个过程要比去年IBM专门创建自己的服务部门更繁琐、成本更高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img03.iwgc.cn/mpimg/bc0f9789ba49e3199f5b4626da8cf6038a35d3e4"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
      <pubDate>Tue, 21 Feb 2017 14:41:00 +0800</pubDate>
    </item>
    <item>
      <title>Google的大规模集群管理系统Borg（上篇）</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;p&gt;&lt;strong&gt;&lt;span&gt;编者按：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;本文是对Google在分布式底层架构的经典文章的翻译&lt;/span&gt;&lt;span&gt;，由于原文较长，CSDN将分上、下两篇全文刊载此篇论文的翻译，欢迎关注。本文为上篇。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;摘要：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;Google的Borg系统是一个运行着成千上万项作业的集群管理器，它同时管理着很多个应用集群，每个集群都有成千上万台机器，这些集群之上运行着Google的很多不同的应用。Borg通过准入控制，高效的任务打包，超额的资源分配和进程级隔离的机器共享，来实现超高的资源利用率。它通过最小化故障恢复时间的运行时特性和减少相关运行时故障的调度策略来支持高可用的应用程序Borg通过提供一个作业声明的标准语言，命名服务的集成机制，实时的作业监控，以及一套分析和模拟系统行为的工具来简化用户的使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们将通过此论文对Borg系统的架构和主要特性进行总结，包括重要的设计决定，一些调度管理策略的定量分析，以及对十年的使用经验中汲取的教训的定性分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.简介&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/bef2cab8bb6c79a82e824dbe85a672eee59c0c3b"/&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;center style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;图1 Borg的高级架构。仅显示了成千上万工作节点中的一小部分。&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个在我们内部称为Borg的集群管理系统，它负责权限控制、调度、启动、重新启动和监视全部的Google中运行的应用程序。本文将解释它是如何做到的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总的来说，Brog主要提供了三个主要的好处：（1）隐藏资源管理和故障处理的细节，因此其用户可以专注于应用程序开发; （2）提供高可靠性和高可用性操作，支持的应用也是如此; （3）使我们能够有效地在数万台机器上运行工作负载。 Borg不是解决这些问题的第一个系统，但它是在能够保证最大弹性和完整性情况下，以大规模运行的少数几个系统之一。 本文将主要围绕这些主题进行组织，并从Borg投入生产，这十多年来的使用经验作为总结 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.用户视图&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borg的用户是运行Google应用和服务的Google开发人员和系统管理员（网站可靠性工程师或SRE）。 用户以作业的形式将他们的工作提交给Borg，每个作业包括一个或多个任务，它们都运行相同的程序（二进制）。 每个作业在一个Borg单元中运行，一组机器组织为一个单元。 本节的剩余部分描述了Borg用户视图中展现的主要功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1 工作负载&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borg的所有单元都同时运行着两种类型的异质工作负载。第一个是&amp;ldquo;永远运行下去&amp;rdquo;的长服务，他们对延迟和性能波动敏感， 此类服务用于面向终端用户的产品，例如Gmail，Google文档，web搜索和内部基础设施服务（例如，BigTable）。 第二个是批处理作业，需要花费从几秒到几天完成，这些任务对短期性能波动的敏感性要小得多。 这些工作负载混合运行在Borg的各个运行单元中，其根据其主要租户（例如，一些单元是专门用来运行批量密集任务的）运行不同的混合应用，并且也随时间变化：批处理作业完成和重新运行，许多面向终端用户的服务作业看到日常使用模式。 Borg同样需要处理好所有这些情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borg的代表性工作负载情况可以从2011年5月的一个公开的月份跟踪中找到[80]，已经进行了广泛分析（例如[68]和[1,26,27,57]）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在过去几年中，许多应用程序框架已经建立在Borg之上，包括我们内部的MapReduce系统[23]，FlumeJava [18]，Millwheel [3]和Pregel [59]。 大多数都有一个控制器提交一个主作业和一个或多个工作作业; 前两者对YARN的应用程序管理器[76]起类似的作用。 我们的分布式存储系统如GFS [34]及其后继CFS，Bigtable [19]和Megastore [8]都运行在Borg上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于本文，我们将优先级较高的Borg作业分为&amp;ldquo;生产&amp;rdquo;（prod）作业，其余作为&amp;ldquo;非生产&amp;rdquo;（non-prod）作业。 大多数长期运行的服务器作业是prod;大多数批处理作业是非prod的。在代表性单元中，分配给prod作业大约总CPU资源的70％，大约占总CPU使用量的60％; 分配给它们约总内存的55％，约占总内存使用的85％。在&amp;sect;5.5节，将看到分配和使用之间的差异将是很重要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2 集群和单元&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单元中的机器属于单个集群，由连接它们的高性能数据中心规模的网络架构定义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个集群位于单个数据中心大楼内，大厦集合构成一个站点。一个集群通常承载一个大型单元，可能有一些较小规模的测试或特殊用途单元。 我们努力避免任何单点故障。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中央单元大小是排除测试单元后约10k机器; 有些会更大。一个单元中的机器在许多维度上是异构的：大小（CPU，RAM，磁盘，网络），处理器类型，性能和功能（比如外部IP地址或闪存存储器）。Borg通过确定单元中的运行任务，为任务分配资源，安装程序和其他的依赖，监控任务状态并在失败时重启，将用户从大多数差异中隔离出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3 作业和任务&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borg作业的属性包括名称，所有者及其拥有的任务数量。作业可能具有限制，使其任务在具有特定属性（例如处理器体系结构，操作系统版本或外部IP地址）的计算机上运行。限制可以是硬的或软的; 软限制就像是偏好而不是要求。作业的开始能被推迟到直到前一个作业完成。 一个作业仅在一个单元中运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个任务映射到在机器上的容器中运行的一组Linux进程[62]。 大多数Borg工作负载不在虚拟机（VM）内运行，因为我们不想支付虚拟化的成本。此外，该系统是在我们对没有硬件的虚拟化支持的处理器进行大量投资的时候设计的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务也具有属性，例如资源需求和任务在作业中的索引。 大多数任务属性对作业中的所有任务是相同的，但是可以被重写 - 例如，以提供指定任务的命令行标志。每个资源维度（CPU核，RAM，磁盘空间，磁盘访问速率，TCP端口，等）以细粒度独立指定; 我们不强加固定大小的桶或槽（&amp;sect;5.4）。静态链接Borg程序以减少对其运行时环境的依赖，并且Brog程序被打包为二进制文件和数据文件，由Borg负责安装。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户通过向Borg发出远程过程调用（RPC）来操作作业，最常见的是通过命令行工具，其他Borg作业或监视系统（&amp;sect;2.6）。大多数作业描述都是用声明性配置语言BCL编写的。BCL是GCL的一个变体[12]，它生成protobuf文件[67]，并扩展了一些Borg特定的关键字。GCL提供lambda函数以允许计算，应用程序可以使用它们来调整环境配置; 成千上万的BCL文件超过1k行长，我们已经积累了数千万行的BCL。Borg作业配置与Aurora配置文件相似[6]。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图2说明了作业和任务在其生命周期中经历的状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/4bab4053b42e4e30d462b7c210060a8f92472be9"/&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;center style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;图2：作业和任务的状态图。 用户可以触发提交，终止和更新转换。&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户可以通过推送新的作业配置到Borg，再指示Borg将任务更新到新配置，来更改正在运行的作业中的某些任务或所有任务的属性。 这是一个轻量级的非原子事务，可以很容易地被撤销，直到它被关闭（提交）。 更新通常以滚动方式完成，并且可以对更新导致的任务中断（重新计划或抢占）的数量加以限制; 跳过会导致更多中断的任何更改。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;某些任务更新（例如，推送新的二进制）总是需要重启任务; 某些更新（例如，增加的资源需求增加或约束改变）可能使得任务不再适合于这台机器，将导致任务停止并重新调度; 而某些更新（例如，改变优先级）却可在不重新启动或移动任务的情况下进行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务可以要求在被SIGKILL抢占之前通过Unix SIGTERM信号获取通知，这样任务就有时间进行清理，保存状态，完成当前正在执行的请求并拒绝新的请求。 如果抢占者设置延迟界限，则实际通知可能更少。 在实践中，通知传递约80％的时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.4 分配&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borg alloc（分配的简称）是可以运行一个或多个任务的机器上的一组保留资源;无论资源是否被使用仍然被分配。Alloc可以用于为将来的任务设置资源，在停止和重启任务之间保留资源，以及将不同作业中的任务收集到同一台机器上 - 例如，Web服务实例和相关的日志保存任务， 这个任务将服务的URL日志从本地磁盘复制到分布式文件系统。 alloc的资源以类似于机器资源的方式处理; 多个任务运行在一个alloc中，共享其资源。如果一个alloc必须重定位到另一台机器，它的任务将被重新调度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个alloc集合就像一个作业：它是一组在多个机器上预留资源的alloc。 一旦创建了一个alloc集，可以提交一个或多个作业在其中运行。 简单期间，我们一般会使用&amp;ldquo;task&amp;rdquo;来引用alloc或顶层任务（在alloc之外的）和&amp;ldquo;job&amp;rdquo;来引用一个作业或alloc集。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.5 优先级，配额和接纳控制&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当更多的工作出现而超过可容纳的限度时会发生什么？我们的解决方案是优先级和配额。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个作业都有一个优先级，它是一个小的正整数。高优先级任务可以以牺牲低优先级任务为代价而获得资源，即使这导致抢占（杀死）后者。Borg将不同种类的作业分为不同的领域，并给每个领域定义了不重叠的优先权重，这些作业组包括：监视作业，生产作业，批处理作业和尽力而为的作业（已知的包括测试程序），他们的优先级依次递减。对于本文，prod作业是监测和生产领域的工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然被抢占的任务通常将被重新安排在单元中的其他地方，抢占级联可能发生，如果高优先级的任务碰到一个略低优先级的任务，而这个略低优先级任务又引发另一个略低优先级的任务，等等。为了消除大部分这种情况，我们不允许生产领域中的任务相互抢占。 细粒度优先级在其他情况下仍然有用 - 例如，MapReduce主任务以比他们控制的workers更高的优先级运行，来提高其可靠性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;优先级表示单元中正在运行或正等待运行的作业的相对重要性。 配额用于决定允许进行调度的作业。 配额表示为在给定优先级上的一段时间（通常为几个月）内的资源量（CPU，RAM，磁盘等）的向量。 数量指定用户的作业请求可以一次请求的资源的最大量（例如，&amp;ldquo;从现在直到7月底在单元xx中的prod优先级的20TiBRAM&amp;ldquo;）。 配额检查是许可控制的一部分，而不是调度：配额不足的作业立即拒绝提交。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;较高优先级配额的成本高于较低优先级配额。生产优先级配额仅限于单元中可用的实际资源，因此，提交符合配额的生产优先级作业的用户可以预期运行。 即使我们鼓励用户购买的配额不超过他们的需求，但是许多用户仍然过度购买，因为这帮助他们在应用程序的用户群增长时克服不足。我们通过在较低优先级别上过度销售配额来响应这一点：每个用户具有在优先级零的无限配额，尽管这常常难以执行，因为资源被过度订阅。一个低优先级作业可能被允许了，但是由于资源不足而保持等待（未调度）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Borg以外进行配额分配，并且与我们的物理容量规划密切相关，其结果反映在不同数据中心的配额的价格和可用性上。 仅当用户作业具有所需优先级的足够配额时，才允许用户作业。 配额的使用减少了对优势资源公平（DRF）[29,35,36,66]等策略的需要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borg有一个能力系统，能给予一些用户特殊的权限; 例如，允许管理员删除或修改单元中的任何作业，或允许用户访问受限内核功能或Borg行为（例如禁用其作业的资源估计（&amp;sect;5.5））。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.6 命名和监控&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;仅创建和放置任务是不够的：服务的客户端和其他系统需要能够找到它们，即使它们被重定位到新机器上了。要启用此功能，Borg将为每个任务创建一个稳定的&amp;ldquo;Borg name service&amp;rdquo;（BNS）名称，其中包含单元名称，作业名称和任务编号。Borg将任务的主机名和端口写入一个以BNS命名的一致的高可用的Chubby [14]文件中，由我们的RPC系统使用该文件来查找任务端点。BNS名称还形成任务的DNS名称的基础，所以在cc单元中的用户ubar拥有的作业 jfoo中的第五十个任务将通过50.jfoo.ubar.cc.borg.google.com访问到。Borg还会在Chubby发生变化时将作业大小和任务健康信息写入Chubby，因此负载平衡器可以查看将请求路由到哪里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;几乎在Borg下运行的每个任务都包含一个内置的HTTP服务器，它发布有关任务运行状况的信息和成千上万个性能指标（例如RPC延迟）。 Borg监控health-check URL，并重新启动不会及时响应或返回HTTP错误代码的任务。 其他数据由仪表盘监视工具和违反服务级别目标（SLO）的警报进行跟踪。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;称为Sigma的服务提供了基于Web的用户界面（UI），通过该UI用户可以检查所有作业，特定单元的状态，或向下钻取到单个作业和任务，以检查其资源行为，详细日志，执行历史 ，和最终的结果。 我们的应用产生大量日志; 这些被自动轮转以避免用完磁盘空间，并在任务退出后保存一段时间以协助调试。 如果作业未运行，Borg提供了&amp;ldquo;为什么待处理？&amp;rdquo;注释，以及如何修改作业的资源请求以更好地适应单元的指导。 我们发布了&amp;ldquo;切合&amp;rdquo;更可能容易调度的资源形式的规则。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borg记录所有作业提交事件和任务事件，以及每个任务在Infrastore中详细的资源使用信息，这是一个可扩展的只读数据存储，通过Dremel [61]具有一个交互式的类似SQL的界面。此数据用于基于使用的计费，作业调试和系统故障以及长期容量规划。 它还为Google群集工作负载跟踪提供数据[80]。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所有这些功能都有助于用户理解和调试Borg的行为及用户的作业，并帮助我们的SREs为每个人管理几万台机器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.Borg体系结构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borg单元由一组机器，一个称为Borgmaster的逻辑中央控制器和单元中每台机器上运行的称为Borglet的代理进程构成（参见图1）。 Borg的所有组件都用C ++编写。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1 Borgmaster&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个单元的Borgmaster包括两个进程：主进程Borgmaster和独立的调度程序（&amp;sect;3.2）。 主Borgmaster进程处理客户端RPC，状态变化（例如，创建作业）或提供对数据的只读访问（例如，查找作业）。它还管理系统中所有对象（机器，任务，分配等）的状态机，与Borglets进行通信，并提供Web UI作为Sigma的备份。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borgmaster在逻辑上是一个单一的进程，但实际上被复制了五次。 每个副本维护了一份该单元大部分状态的内存副本，并且该状态也记录在该副本的本地磁盘上的高可用性，分布式，基于Paxos的存储[55]中。每个单元的单个选定的master既用作Paxos的领导者又用作状态mutator，处理改变单元状态的所有操作（例如提交作业或在机器上终止任务）。当cell建立时或只要当选择的master出现故障时，就会选择一个master（使用Paxos）; 它获取一个Chubby锁，以便其他系统可以找到它。选择一个master和故障转移到新的master通常需要大约10s，但是在大单元中可能需要一分钟，因为一些内存中的状态必须重建。 当副本从中断恢复时，它将自动重新同步来自最新的其它Paxos副本的状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borgmaster在某个时间点的状态称为检查点，并采用定期快照的形式增加一条更改日志（保存在Paxos存储中）。检查点有许多用途，包括将Borgmaster的状态恢复到过去的任意一个点（例如，在接受触发Borg中的软件缺陷的请求之前，以便可以对其进行调试）; 构建用于未来查询的事件的持久日志; 以及离线模拟。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;高保真的Borgmaster模拟器Faokemaster可用于读取检查点文件，并包含产生Borgmaster代码的完整副本，其中包含与Borglets的无存根接口。它接受RPC进行状态机更改和执行操作，如&amp;ldquo;调度所有挂起的任务&amp;rdquo;，通过与它进行交互（它就像是一个活的Borgmaster，带有模拟的Borglets可从检查点文件重放真实的交互），可以使用它来调试故障。用户可以逐步观察在过去实际发生的系统状态的改变。 Fauxmaster对于容量规划（&amp;ldquo;符合多少这种类型的新作业？&amp;rdquo;）以及在更改单元配置之前进行完整性检查（&amp;ldquo;这种更改是否会驱逐重要的工作？&amp;rdquo;）也很有用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 调度&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;提交作业时，Borgmaster会将其持久化在Paxos存储中，并将作业的任务添加到等待队列。 这是由调度程序异步扫描的，如果有足够的可用资源满足作业的要求，则会将任务分配给机器。 （调度程序主要操作任务，而不是作业。）扫描从高到低优先级，由优先级循环方案调度，以确保用户之间的公平性，并避免大型作业后面的队头阻塞。 调度算法有两个部分：可行性检查（用于找到任务可以运行的机器），以及评分（用于挑选一个可行的机器）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在可行性检查中，调度器找到满足任务需求的一组机器，这组机器具有足够的&amp;ldquo;可用&amp;rdquo;资源 - 这些资源中包括已经分配给可以被抢占的较低优先级任务的资源。 在评分中，调度器确定每个可行机器的&amp;ldquo;良好性&amp;rdquo;。该分数考虑了用户指定的偏好，但主要是由内置标准决定，如最大限度地减少抢占任务的数量和优先级，选择已经有任务包副本的机器，跨越电源和故障域传播任务，以及打包质量（包括将高优先级任务和低优先级任务混合到单个机器上，以允许高优先级任务在负载高峰中扩展）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borg最初使用E-PVM [4]的变体进行评分，其在不同资源上生成单一成本值，并且在放置任务时最小化成本的变化。在实践中，E-PVM最终在所有机器上扩展负载，为负载高峰留下余量 - 但是以增加碎片为代价，特别是对于需要大部分机器的大型任务; 我们有时称之为&amp;ldquo;刚好合适&amp;rdquo;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;调度的另一端是&amp;ldquo;最佳合适&amp;rdquo;，它试图尽可能紧密地填充机器。 这使一些机器没有用户作业（它们仍然运行存储服务器），因此放置大任务是简单直接的，但是严格的封装不利于用户或Borg对资源需求的任何错误估计。 这会伤害突发负载的应用程序，对于指定低CPU需求的批处理作业尤其糟糕，以便他们可以轻松安排并尝试在未使用的资源中伺机运行：20％的非生产任务请求少于0.1个CPU内核。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们当前的评分模型是一种混合式的，它试图减少搁置资源的数量 - 由于机器上的另一个资源被完全分配而无法使用的资源。 它提供比最适合我们工作负载约3-5％的更好的包装效率（在[78]中定义）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果计分阶段选择的机器没有足够的可用资源来满足任务，则Borg会抢占（杀死）较低优先级任务，从最低优先级到最高优先级，直到满足为止。 我们将被抢占的任务添加到调度程序的挂起队列，而不是迁移或休眠它们。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务启动延迟（从作业提交到任务运行的时间）是一个已经并继续受到极大关注的领域。它是高度可变的，中值通常约25s。 软件包安装大约占全部的80％：其中一个已知的瓶颈是软件包要写入的本地磁盘的争用。为了减少任务启动时间，调度程序更倾向将任务分配给已经安装了必要的软件包（程序和数据）的机器：大多数软件包是不可变的，因此可以共享和缓存。 （这是Borg调度程序支持数据本地化的唯一形式。）此外，Borg使用类似树和torrent的协议并行地将软件包分发到机器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，调度程序使用几种技术来扩展具有成千上万台机器的单元（&amp;sect;3.4）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 Borglet&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borglet是一个本地Borg代理，存在于单元中的每一台机器中。它启动和停止任务; 如果故障就重启任务; 通过操纵操作系统内核设置来管理本地资源; 翻转调试日志; 并向Borgmaster等监控系统报告机器的状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borgmaster每隔几秒钟轮询一次Borglet以检索机器的当前状态，并将所有未完成的请求发送给它。 这使Borgmaster控制通信速率，避免了显式流控制机制的需要，并防止恢复风暴[9]。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;选定的master负责准备要发送到Borglets的消息，并负责根据cell的响应更新cell的状态。为了性能可扩展性，每个Borgmaster副本运行无状态链接分片来处理与一些Borglets的通信;每当发生Borgmaster选择时重新计算分区。对于弹性，Borglet始终报告其完整状态，但链接分片通过仅报告状态机间的差异来收集和压缩此信息，以减少选定master的更新负载。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;如果Borglet没有响应几个轮询消息，它的机器被标记为关闭，并且其运行的任何任务被重新安排在其他机器上。如果通信恢复，Borgmaster会通知Borglet要停止这些已经重新安排的任务，以避免重复。即使与Borgmaster失去联系，Borglet也继续正常运行，因此即使所有Borgmaster副本故障了，当前运行的任务和服务也会保持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.4可扩展性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们不确定Borg的集中式架构的最终可扩展性限制将出现在何处; 到目前为止，每次我们接近一个极限，我们已经设法消除它。一个Borgmaster可以管理一个cell中的数千台机器，并且几个cell具有每分钟超过10000个任务的到达速率。繁忙的Borgmaster使用10-14个 CPU内核和高达50GiB 的RAM。我们使用几种技术来实现这种规模。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;早期版本的Borgmaster有一个简单的，同步的循环：接受请求，计划任务，并与Borglets通信。为了处理更大的cell，我们将调度程序分离出来作为一个单独的进程，这样它可以与其他Borgmaster函数并行操作故障容限。 调度器副本对单元状态的高速缓存副本进行操作。它反复：从选定的主机检索状态更改（包括已分配和挂起的工作）; 更新其本地副本;执行调度传递以分配任务; 并将这些分配通知选定的主机。master将接受并采用这些分配，除非它们是不适当的（例如，基于过期状态），这将导致它们在调度程序的下一次传递中被重新考虑。这在灵魂上与在Omega [69]中使用的乐观并发控制非常相似，事实上，我们最近为Borg添加了针对不同工作负载类型使用不同调度程序（schedulers）的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了提高响应时间，我们添加了单独的线程来与Borglets进行通信并响应只读RPC。为了更好的性能，我们在五个Borgmaster副本（&amp;sect;3.3）中分割（分区）这些功能。同时，这保持了UI上99％ile的响应时间低于1s和95％ile 的Borglet轮询间隔低于10s。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/d026e0789f74668dafd2d61f162295b6dbc09e26"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;center style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;图3：针对生产和非生产工作负载的任务驱逐率及原因。 数据自2013年8月1日起。&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有几点使Borg调度器更具可扩展性：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;分数缓存：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;评估可行性和评价机器是昂贵的，因此Borg缓存分数直到机器或任务的属性改变 - 例如，机器上的任务终止，属性改变或任务的需求改变。 忽略资源数量的小变化可减少高速缓存失效。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;等价类：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;Borg作业中的任务通常具有相同的需求和约束，因此并不是确定每个机器上的每个挂起任务的可行性，并对所有可行的机器进行评分，Borg只对每个等价类的一个任务进行可行性分析和评分 - 一组具有相同需求的任务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;轻松随机化：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;计算大cell中所有机器的可行性和分数是浪费的，因此调度程序以随机顺序检查机器，直到找到&amp;ldquo;足够&amp;rdquo;可行的机器进行评分，然后选择该集合中的最佳机器。 这减少了任务进入和离开系统时所需的评分和高速缓存失效的数量，并加快了任务到机器的分配。放松随机化有时类似于Sparrow [65]的批量采样，同时还处理优先级，抢占，异质性和软件包安装的成本。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;在我们的实验（&amp;sect;5）中，从头开始安排单元的整个工作负载通常需要几百秒，但是在禁用上述技术后超过3天后还没有完成。 通常，在等待队列上的在线调度传递在不到半秒内完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.可用性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;故障是大规模系统中的常态[10,11,22]。图3提供了15个样本cell中任务驱逐原因的分解。运行在Borg上的应用程序应能使用诸如复制，在分布式文件系统中存储持久状态并（如果适当的话）捕捉临时检查点等技术来处理此类事件。即使如此，我们也试图减轻这些事件的影响。例如，Borg：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如有必要，在新机器上自动重新安排逐出的任务;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过在诸如机器，机架和电源域之类的故障域中扩展作业的任务，减少相关故障;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;限制任务中断的允许速率和任务数量，这些任务可以在维护活动（例如操作系统或机器更新）期间同时关闭；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/544d198d644d9431e2022584a6687331987aa572"/&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;center style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;图4：压缩的效果。 对15个cell，在压缩后获得的原始cell大小的百分比的CDF。&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用声明性期望状态表示和幂等变换操作，使得失败的客户端可以无损地重新提交任何被遗忘的请求;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;rate-limits找到无法访问的机器的任务的新位置，因为它无法区分大型机器故障和网络分区;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;避免重复任务::导致任务或机器崩溃的机器配对;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过不断重新运行日志记录器任务（&amp;sect;2.4）来恢复写入本地磁盘的关键中间数据，即使所连接的alloc已终止或移动到了另一台机器。 用户可以设置系统持续尝试的时间;一般是几天。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Borg的一个关键设计特点是，即使Borgmaster或任务的Borglet关闭，已经运行的任务也会继续运行。但是保持master仍然很重要，因为当它关闭时，无法提交新作业或更新现有的作业，并且无法重新计划故障的计算机上的任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Borgmaster使用的技术组合，使其在实践中达到了99.99％的可用性：机器故障复制; 准入控制避免过载; 并使用简单的低级工具部署实例以最小化外部依赖性。 每个单元独立于其他单元，以最小化关联的操作者错误和故障传播的机会。 这些目标，不是可扩展性限制，而是反对较大cell的主要论证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;p&gt;&lt;span&gt;译者：王勇桥，80后的IT攻城狮，曾供职于IBM多年，现供职于华为公司，担任高级系统架构师。主要从事云计算领域相关的工作。Mesos和Swarm社区的贡献者。对容器化技术，自动化部署，分布式集群管理，资源调度，存储技术有较深的研究。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"/&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/c5630bb6e7ec626debe3cd2be1bd026b301102c1"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;SDCC 2017&amp;bull;上海站&lt;/strong&gt;将于2017年3月17-19日登陆申城，三大技术峰会和24位嘉宾，汇聚国内知名的互联网公司CTO、架构师、技术总监，畅谈运维、数据库和架构的热门话题和技术热点，遇见精益运维发起人&amp;amp;优维科技CEO王津银、MongoDB大中华区首席架构师唐建法和华为软件API开放平台架构师李林锋等大牛。截止3月5日前门票八折优惠中，5人以上团购立减400元，详情点击&lt;span&gt;&lt;strong&gt;阅读原文&lt;/strong&gt;&lt;/span&gt;注册参会。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
      <pubDate>Mon, 20 Feb 2017 17:01:54 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】世界最大超算竞赛郑州开幕，Apache Stratos宣布退休</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;p&gt;&lt;span&gt;Cloudaily网罗新鲜要闻，每日为你呈现&lt;span&gt;大数据和云计算领域&lt;/span&gt;热点新闻。本次内容播报如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Apache Arrow 0.2.0 发布，内存数据交换格式&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Apache Arrow 0.2.0 发布了。该版本解决了自第一个版本以来的 192 个 issue。Apache Arrow 是 Apache 基金会下一个全新的开源项目，同时也是顶级项目。它的目的是作为一个跨平台的数据层来加快大数据分析项目的运行速度。这个版本是项目的一个重要里程碑，因为我们现在有集成测试验证 Java 和 C ++（和 Python）实现之间的二进制兼容性，这些测试现在正在 Travis CI 中连续运行。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;中国移动就客户被盗刷做说明：嫌犯攻破某手机云服务平台&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;日前，中国移动对于近期媒体报道的移动客户何某被盗刷5万余元一事做出说明，称此次案件是由犯罪嫌疑人通过已掌握信息，攻破某智能手机云服务平台账号所致。经调查，犯罪嫌疑人具体作案手法主要分三步：破解用户某品牌只能手机云服务平台账号信息；利用已攻破的该品牌智能手机云服务平台&amp;ldquo;回复短信&amp;rdquo;接口，完成主副卡绑定；在该品牌智能手机云服务平台发起强制关机指令，接收相关验证码，完成&amp;ldquo;盗刷&amp;rdquo;操作。根据目前掌握情况，遭受本次攻击的客户均为某品牌手机用户，暂未发现其他客户受到类似攻击。除客户何某外，也为受到其他客户遭受损失的相关报道。未避免此类案件再次发生，该品牌智能手机云平台已经优化。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;云计算亏损成常态，创业公司如何盈利？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;贝恩咨询公司最新报告显示，预计到2020年，全球云计算市场规模将达到3900亿美元。这与2015年的1800亿美元规模相比，意味着该市场年均复合增长率将达到17%。在许多科技巨头近期公布的财报中，云计算业务收入也都在持续增长。以阿里巴巴为例，其截止到2016年12月31日的2017财年Q3财报显示，云计算业务营收为人民币17.64亿元，同比增长115%，这已是阿里云的营收连续7个季度保持三位数增幅。然而，与营收增长不相称的是，行业内盈利者寥寥。在国际市场，行业先驱亚马逊AWS则通过十年运营，从2015年第一季度开始实现了盈利。在国内市场，亏损甚至成为常态。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Apache Stratos 宣布退休 迁移至 Apache Attic&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Apache Stratos 项目已宣布退休，原因是这个项目不活跃。Stratos 是一个高度可扩展的平台即服务（PaaS）框架，可帮助运行 Apache Tomcat，PHP 和 MySQL 应用程序，并可扩展到支持所有主要云基础架构上的更多环境。退休一个项目并不是关闭一切那么简单，因为现有用户需要保留对自己开发工作必要信息的访问权。该项目的资源将继续以只读的状态提供 - 邮件存档，网站，wiki，svn/git，下载和错误跟踪，都没有更改网址。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;芝麻科技获千万元A轮融资，继续发力线下数据领域助力智能零售&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;芝麻科技宣布获数千万元A轮融资，本轮融资由深创投领投，品友互动与碚曦投资withinlink跟投。此前，2013年11月，芝麻科技获联想之星的天使轮融资；2015年7月获光信资本Pre-A轮融资。据了解，获得本轮融资后，芝麻科技将继续发力线下数据领域，通过大数据平台的构建，联合更多合作伙伴，助力智能零售。芝麻科技官方数据显示，目前，累计有效识别用户超过7亿，每日分析客流数据上亿条，覆盖全国10万余消费生活场所，布点超过2000家百货购物中心。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;精准医疗技术发展加速&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;日前，英特尔在上海发布其在中国精准医疗领域的首个解决方案建议书，内容涉及创新解决方案、合作案例、参考架构推荐等。其中，可扩展精准医疗数据中心、精准医疗混合云平台、精准医疗分析一体机等作为英特尔在该领域技术倡导和价值主张得到关注。截至目前，英特尔已同华大基因、阿里云、荣之联(002642,股吧)、诺禾致源、上海交通大学、上海市儿童医院等精准医疗产业链上下游合作伙伴保持紧密协作，支持其解决方案创新，协力加速精准医疗领域计算创新和应用。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Apache Geode 1.1.0 发布，数据管理平台&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Apache Geode 1.1.0 发布了，Apache Geode 是一个数据管理平台，提供实时的、一致的、贯穿整个云架构的访问数据关键型应用。本次更新内容包括：Upon graduation to a top-level Apache project；Resolved 252 tickets to fix bugs；Improved the JSONFormatter and the PdxSerialization frameworks etc.&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;备受争议的Magic Leap收购Dacuda的3D部门&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;据美国媒体报道，虽然已经融资14亿美元但还未发布产品的增强现实新创公司Magic Leap，进行了一次收购扩大其在电脑视觉和深度学习的工作，并在欧洲建立业务。该公司收购了苏黎世的电脑视觉新创公司Dacuda的3D部门。在苏黎世和其他瑞士中心城市，有很多新创公司和学术机构从事AR和VR技术，特别是电脑视觉和深度学习领域，因此在该国的存在可使Magic Leap更直接地融入该领域。获得更多人才和建立更多与电脑视觉生态系统的联系，对Magic Leap来说恰逢其时。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;世界最大超算竞赛郑州开幕 将比拼人工智能和太湖之光&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2月16日，2017 ASC世界大学生超级计算机竞赛开幕式在郑州大学举行。ASC17共有来自世界各国的230支队伍参赛，争夺进入总决赛20强名额。ASC竞赛发起人、中国工程院院士、浪潮集团首席科学家王恩东表示，随着超级计算、大数据、云计算相互融合，以人工智能为代表的智慧计算将成为未来计算产业里面最重要的组成部分，这将对计算技术带来新的挑战。ASC竞赛连续两届设置人工智能赛题，就是希望参赛大学生能够了解掌握最新的人工智能算法、大数据应用和先进计算架构的相关知识和能力，成为面向未来的复合型科技精英。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;2017年数据科学的六项预测&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;数据正在为企业创造前所未有的增长和盈利机遇，遏制数据科学发挥力量的科学和技术局限性正在逐渐消失，数据管理行业将发生重大变化，席卷2017年的全球数据科学实践。以下是关于数据科学行业明年将何去何从的几个预测：机器学习占据主导地位；物联网数据流战胜传统商业智能；大数据技术支出将飙升；Hadoop市场继续增长；数据科学进入实用领域&amp;mdash;&amp;mdash;医疗商业智能和分析；到2017年底，25%的企业将设首席数据官岗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img03.iwgc.cn/mpimg/455aa5982a7e0e314573f544577adec1795cb357"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
      <pubDate>Mon, 20 Feb 2017 17:01:54 +0800</pubDate>
    </item>
    <item>
      <title>17.5W秒级交易峰值下的混合云弹性架构之路</title>
      <link>http://www.iwgc.cn/link/4743095</link>
      <description>&lt;div class="article-content"&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;每年的双11都是一个全球狂欢的节日，随着每年交易逐年创造奇迹的背后，按照传统的方式，我们的成本也在逐年上升。双11当天的秒级交易峰值平时的近10多倍，我们要用3-4倍的机器去支撑。但大促过后这批机器的资源利用率不高，到次年的双11会形成较长时间的低效运行。试想一下，电商交易有大促峰值，而阿里云有售卖Buffer，如果能充分发挥云计算的弹性能力，让资源可以两边快速腾挪，就可以解决资源浪费的问题了。把我们的交易单元可以部署在云上面，那么大促的时候我们只需要按照压测模型去云上构建一个符合能力的新单元即可，用完马上释放掉，这样无疑是最优雅的。专有云+公共云 的混合云弹性架构成为一种自然而然的选择，不但可以资源合理利用，降低成本，同时也锻炼了阿里人的的技术能力，为用户提供更优质的服务。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;有了架构思路，实现起来似乎也没那么容易。阿里的交易涉及几百个系统，他们之间的依赖错综复杂，如果能够把他们快速的搭建在云上？这次系统之间的依赖如何复杂，如果把他们的容量估算好，快速调整他们的容量水位？这就不得不提到下面的两个秘密武器了：一键建站和弹性容量交付&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 18px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1. 一键建站&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.1 背景&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站是在底层基础设施交付的基础上，快速地在一个空机房部署交易单元，使新机房迅速具备对外提供服务的能力。一键建站的逆过程叫一键下站，即迅速切除单元流量，释放所有单元内应用的物理资源。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;从架构的层面看，一键建站的基础是阿里电商体系的异地多活。从运维的角度看，一键建站是运维产品的升华，更是运维效率的核心体现。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站第一次被提出是在2014年，但由于系统多，依赖复杂，加上中间件的复杂性，当时新建一个单元需要耗时近1个月的时间，更是需要所有单元链路上的运维同学参与。去年，DB实现了一次完整意义上的一键建站，中间件的建站实现了半自动化，但是应用的建站过程仍需要很多运维同学的支持。今年，一键建站进行了重构，并提出一天（8小时）一单元的目标，在几乎不用运维同学参与的情况下，顺利支持了3个云单元的建站工作，最快一次耗时6小时建站。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.2 挑战&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;今年的双11单元架构是三地五单元，一中心四单元，也是第一次遇到同机房两单元。如何控制单元内的链路封闭，单元与单元、单元与中心的同步与可见性，是异地多活的大挑战，也是一键建站的难点。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;首先需要明确单元内部署什么。建站需要维护一份知识库，包括单元的数据库，中间件，统一接入，以及导购、商品、店铺、交易、会员等一百多个应用。需要知道每个产品的服务器配置，软件配件，容量需求，甚至是应用间链路依赖等相关信息。这份知识库会跟随日常运维操作，调用链路日志等不断更新。同时，一个完整单元不仅仅包含线上环境，还需包含预发环境与小流量(测试环境)，每套环境都有自己的一份知识库。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;其次是需要明确部署的每个步骤实现。单元内的每个产品，都需要明确部署的操作细节，以及产品之间的前后依赖。今年，一键建站第一次在云上实施，面对全新的服务器资源(ecs)，全新的网络资源(slb)以及全新的部署方式(docker)等，每个环节都需要技术落地。由此可见，一键建站是一个庞大的系统，几乎涉及所有的运维产品。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;在明确了建站数据与建站步骤的基础上，还需要有一套技术实现能将单元内所有产品相关的近四千个部署步骤串联起来，这就是建站系统。追求建站效率的同时，安全始终要铭记于心。建站的每个步骤，都需要考虑可能出现的突发情况以及应对策略。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.3 技术架构&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站是一个体系的构建，是要在原有运维产品的基础上进行升华，将相关产品的原子性服务联动起来，最终凝聚成一个按钮。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站涉及的单元产品种类繁多，相关操作保罗万象，而且变化极为频繁。如果为每类产品写死操作流程，那建站只会疲于代码，即使完成了代码，也只会是一次性的玩物。因此建站需要更多的考虑灵活性，在最终的技术实现上，将系统架构分为四个层次，原子服务、功能组件、组件编排以及流程调度。系统架构如下图：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321229zsRMec.jpg"/&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.4 原子服务&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;建站平台的能力来源于周边的运维产品，接入相关系统的服务，将最小粒度的一次服务调用称为一个原子操作。服务网关包装一系列原子操作，以提供上层业务调用。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;作为唯一的外部系统调用入口，服务网关还需要做统一的日志记录，业务链路跟踪以及故障告警等。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;对建站平台的效率要求，很大一部分最终会落在外部系统服务上。最具代表性的是服务器资源申请与docker镜像，这两条链路的背后，凝聚着很多人努力的心血。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.5 功能组件&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;功能组件，是将相关的原子服务进行整合，从而形成的一个个有业务含义的独立功能模块。比如创建服务器、添加帐号、创建vip、docker upgrade、应用启动、更新hsf路由等等，将近百个原子服务最终聚合成三四十个功能组件。组件的实现需要能保证幂等。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;功能组件需要遵循一定的规范，从而使得同一组件能被不同的应用，不同的流程复用。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.6 组件编排&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;组件编排是建站灵活性的核心。建站平台支持在web页面动态编排功能组件，从而组装成一个个可以运行的流程。单元内的每类中间件或应用都可能存在部署上的差异，通过服务编排，使每一类产品都能对应到一类流程。&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;建站需要涉及整套中间件以及一百多个单元应用，这些产品在部署启动上还存在先后链路依赖。去除弱依赖，将单元产品依赖描述成一张无环有向图，每个节点代表一个产品的部署流程。将整张图描述成一个流程，这个流程就是建站流程！&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.7 流程调度&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;流程调度是建站稳定性的有力保障。流程调度负责建站流程的分布式执行，是流程引擎的一个实现，至少需要达到下述几点要求：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;高可用。服务器宕机不能影响流程执行；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;系统容错。下游系统异常诊断，自动重试；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;并发访问控制。流程节点不应该同时在多台服务器被调度；在结构上，流程调度可以分为流程实例管控、任务队列、任务调度、组件执行器与分布式协同组件等。每个节点按照自身的负载情况加载流程实例到本地任务队列，组件执行器负责每个组件的入參注入，出參收集以及反射调用，分布式协同保障同一时刻仅有一个节点在调度流程实例。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站流程是一个包含众多子流程的嵌套流程结构，建站时，流程调度需要同时执行上千个流程。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站只是完成了最小单元的建站工作，如果想让这个单元支撑好大促的流量，还需要对这个单元进行容量评估和扩容，如何快速的评估各个应用的容量并自动扩容呢？这时就需要弹性容量交付出场了。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 18px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2. 弹性容量交付&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;如下图：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321229rkJE64.jpg"/&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;今年弹性技术在实时容量评估算法上作了一定的改良，期初主要出于提升效率，最大程度地降低实施成本,与保障集群稳定性的目的: 更加智能，使用在线机器学习实时测算应用性能变化，并可作出简单的故障原因分析, 通过算法对各个单元的应用集群进行自然水位拉平.&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;如何用机器在无人介入的情况下，预测应用集群各个单元的性能；需要做很多事情：日常性能变化测量；应用发布性能变化测量；集群中单机的性能变化预测，与目标交易量下会有多少比例机器挂掉的预测，容量问题还是性能问题的判断等等等等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;为支持XX笔交易的业务目标，需要多少资源；或者说，现有XX些资源，最高可以支撑多高的交易量?&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一个应用集群在什么样的物理资源利用率下稳定性与成本会是一个最佳配比?&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;资源预算.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;我们先简单以一个在线web服务类应用进行分析，在线电商每天的流量波动与资源利用率是存在一定的关系的(当然也可以换成其它指标进行测算)，我们将两项指标叠加，呈散点图形态&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321229a3soPO.jpg"/&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;现在假设，我们设定资源利用率阀值为70%的cpu利用率，预测该应用集群的服务能力，我们利用上面呈现的散点图做一次拟合，延长趋势线，呈以下形态:&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321229e6vrTR.jpg"/&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;则求出，该应用极限能力在X%的资源利用率下的服务能力大致是Y.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;但实际场景中，情况要复杂得多，在不同压力下，随着物理机的利用率整体饱和度的上升，性能会有一定的损耗，将不同压力下测算的服务能力记录，并作一次回归，预测出目标压力下，大致损耗度，并用刚才计算好的服务能力减去目标压力下的损耗度即可，&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;哪下一个问题来了，应用集群的资源利用率多少为极限值？这里只是一个假定，每个应用集群的极限能力都不相同; 首先前文已经提到，由于各个应用集群布署的物理机坑位不同，有可能超卖，也有可能会与资源占用多的应用布署在同一个物理核内，超线程会带来一定的影响，而一个物理核通常分为两个逻辑核，是否一个物理核的总能力/2则为两项占用该物理核逻辑核上的能力；假定100%的资源利用率为满负荷，则两个逻辑核各分50%的能力相对合理?&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;但实际情况是，占用两个逻辑核的应用集群利用率，在容量层次不齐的宏观情况下，有的偏高，有的偏低，这就会出现资源抢占问题。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;如何识别某项应用集群合理的资源利用率是多少？ 我们需要做一些事情，即除了对整个应用集群作上文中讲到的资源测算，还需要对每台单机作能力测算，这里我们随便拟定一个值，如单机负载如果超过80%是不可承受的，则我们在整体全链路压测时，会对每台单机做实时的负载预测，看在目标交易量下，多少比例的机器会超过最大的承受能力，该集群的总qps会有出现多少比例的损耗。 这里假定我们认为不允许有机器出现这样的情况，则当某台机器预测值达到最大承受能力时，则认为当前集群能力的合理负载应该在多少。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;根据上文的描述，我们可以直接拿到测算好的各个应用集群的容量配比进行在线备容即可.通过后续每次的压测，对各个应用集群的预期资源利用率进行逐步逼近，最终达到整体备容目标.&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;正因为有了以上两个秘密武器，我们在双11之前就快速的做好了容量准备，同时双11一过，我们立刻对云资源进行一键下站，把资源归还到云的Buffer里，对公共云进行售卖。&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p style="max-width: 100%; box-sizing: border-box; min-height: 1em; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;作者简介：唐三、乐竹、锐晟、潇谦，阿里中间件技术团队。（责编／魏伟）&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/p&gt;&lt;hr style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;[SDCC 2017·上海站] 将于2017年3月17-19日登陆申城，三大技术峰会24位嘉宾，汇聚国内一线的互联网公司大牛，畅谈运维、数据库和架构的热门话题和技术热点，精益运维发起人&amp;amp;优维科技CEO王津银、MongoDB 大中华区首席架构师唐建法和华为软件API开放平台架构师李林锋等亲临现场。3月5日前门票八折优惠中，5人以上团购立减400元，详情点击左下角&amp;nbsp;&lt;span style="max-width: 100%; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;阅读原文 。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321230SLa5xv.jpg"/&gt;&lt;/p&gt;&lt;/div&gt;</description>
      <pubDate>Fri, 17 Feb 2017 16:43:31 +0800</pubDate>
    </item>
    <item>
      <title>SDCC 2017·上海站之互联网应用架构实战峰会讲师和议题全曝光</title>
      <link>http://www.iwgc.cn/link/4743096</link>
      <description>&lt;div class="article-content"&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2017年3月17-19日，&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;SDCC 2017·上海站震撼来袭&lt;/a&gt;&lt;/span&gt;，特开设了三大主题会场，分别是互联网运维开发实战峰会、数据库核心技术与应用实战峰会和互联网应用架构实战峰会，为期三天，为软件开发者带去共24场的技术盛宴。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;其中，阿里、腾讯、百度、苏宁、京东等企业的顶级运维大牛带来360度无死角的运维盛宴，大规模分布式系统运维、自动化运维、云端运维、游戏运维、海量容器运维等等热点技术话题一网打尽。同时，集结业界前沿领域的数据库专家，业界巨匠，触手可及，围绕MySQL、PostgreSQL、Redis、Oracle等数据库，共同探讨性能调优、数据库自动运维、云端数据库、新一代数据平台等领域的前瞻性话题；深度剖析行业痛点，探秘数据库核心技术。SDCC也汇聚互联网应用架构实践的焦点议题，海量并发环境下的高可用/高并发/高性能系统架构设计、电商架构、消息队列、分布式架构、架构演讲、移动APP性能优化、分发系统的构建、微服务等。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;日前，大会主委会也对外公布了&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;SDCC 2017·上海站&lt;/a&gt;之互联网应用架构实战峰会讲师和议题，详情如下：&lt;/span&gt;&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 16px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;出品人&lt;/span&gt;&lt;/h2&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; color: rgb(0, 82, 255); font-size: 14px; line-height: 1.1; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;张立刚 1号店技术部-电商云平台技术总监&lt;/span&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/h3&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2012年7月加入1号店，先后担任过1号店订单、库存、拆单、运费、第三方平台订单等电商核心交易系统负责人，致力于电商平台产品化、智能化、云化。期间主导并参与了1号店SOA治理、订单Service化、订单水平拆库&amp;amp;去Oracle迁Mysql、无线性能优化及拆pool、运费体系重构、库存准确率优化等重要项目，负责1号店与Tmall、百度、当当、B2B2C平台等第三方平台订单业务，从0开始建立了1号店完善的订单监控、预警、履单体系。 对高可用高并发高性能的电商核心交易系统及SOA架构有深入的理解和实践，熟悉电商核心产品、订单、库存等业务，将以OMS为核心规划构建新一代电子商务云平台。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 16px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;讲师&lt;/span&gt;&lt;/h2&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;者文明 京东运营研发部系统架构部系统架构师&lt;/span&gt;&lt;/h3&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;个人简介：&lt;/span&gt;者文明，中科院硕士，清华大学精仪系学士，14年电子商务/企业应用领域研发、架构经验，涉及电商后端物流系统架构，实时大数据解决方案。2012年加入京东，主要负责仓储、配送、售后客服等系统架构。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;演讲主题：京东物流系统高可用架构实践&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;演讲简介：&lt;/span&gt;大多电商物流系统均为OLTP系统，同时具有海量数据和高并发特性。如何在海量数据和高并发的应用场景中构建一个高可用的OLTP系统？本专题聚焦电商物流系统高可用架构设计与实践，旨在介绍京东物流系统在数据库和Web端的高可用架构设计思路、应用场景及案例分析。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;听众收益：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1. OLTP系统面对海量数据和高并发场景时如何提升系统的可用性；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;2. 电商物流系统高可用架构设计和实战经验。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;孙子荀 腾讯科技&lt;/span&gt;&lt;/h3&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;嘉宾简介：&lt;/span&gt;孙子荀，09年毕业后从事内核和分布式系统的开发工作，11年在百度从事过高性能计算方面的工作。12年加入腾讯从事腾讯云加速的带宽调度系统的设计研发，获得公司多个业务奖项。14年开始手Q公众号项目，负责构建公众号平台和内容平台。现在从事个性化阅读内容方面的处理和挖掘工作。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;演讲主题：&lt;/span&gt;内容分发的系统建设&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;演讲概要：&lt;/span&gt;&amp;nbsp;17年是内容生态分发的爆发年。分享主要介绍在内容分发领域的一些工程和算法技术。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1. 内容分发系统的框架；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;2. 内容的建模和质量控制；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;3. 内容推荐技术PUSH和PULL模式。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;听众收益：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1. 如何构建一个内容分发引擎，存储层的技术选型和挑战；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;2. 多种算法策略模型如何与并发处理相互结合；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;3. 关于假新闻和低俗内容的控制技术手段。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;李雄峰 爱奇艺公司支付中心技术经理&lt;/span&gt;&lt;/h3&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;个人简介：&lt;/span&gt;&amp;nbsp;10多年企业应用和互联网软件架构设计经验，涉及电子商务、电子政务、风控、支付等领域。现供职于爱奇艺公司，先后负责大数据仓库系统和支付系统的软件架构设计工作。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;演讲主题：支付系统微服务化实践&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;演讲简介：&lt;/span&gt;互联网公司的快速发展往往也伴随着软件系统的迅速演化。在建设初期，由于基础设施和技术能力限制，大部分系统倾向采用单体应用。但随着业务的发展和复杂度的增加，系统的可维护性和性能都很难满足线上需求。本次演讲以支付系统为例，介绍如何对单体应用进行拆分，落地实施微服务架构，在确保线上业务稳定运行的同时推动架构可控地演化。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;听众收益：&lt;/span&gt;以核心支付系统的改造为例，介绍：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1. 如何评估采用微服务架构来改进现有系统的必要性和收益；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;2. 微服务架构改进的时机选择和路线图；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;3. 微服务基础设施建设；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;4. SSH架构系统的微服务化改进最佳实践。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;李天晨 58到家技术中心架构部高级Java工程师&lt;/span&gt;&lt;/h3&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;个人简介：&lt;/span&gt;&amp;nbsp;58到家后端架构部团队核心成员，有着丰富的架构经验。目前负责到家自研的消息队列服务DMQ(Daojia Message Queue)、分布式调用链跟踪系统DTracker、通用消息平台等底层平台服务，在中间件架构设计上有自己的独到见解。本质程序员一枚。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;演讲主题：58到家电商业务场景下的消息队列架构设计&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;演讲简介：&lt;/span&gt;介绍适应58到家电商业务场景下的消息队列架构设计，根据真实的业务场景，各业务线开发痛点，合理选型技术架构，满足业务快速迭代发展。详细阐述对于电商交易支付类场景下消息100%到达率的架构设计，以及广播消息、消费者业务ack、延迟消息、消息有效期这些业务场景的功能实现，最后是对于将来顺序消息、事务消息功能的规划。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;听众收益：&lt;/span&gt;电商业务的消息队列架构设计，满足消息100%可达，支持广播消息、消费者业务ack、延迟消息、消息有效期的业务场景。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;李林锋 华为软件API开放平台架构师&lt;/span&gt;&lt;/h3&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;个人简介：&lt;/span&gt;李林锋，2008年进入华为公司从事电信软件的设计和开发工作，有多年Java NIO、平台中间件设计和开发经验，精通Netty、Mina、分布式服务框架、云计算等，目前从事云平台和开放API相关的架构和设计工作，著有《分布式服务框架原理与实践》、《Netty权威指南》。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;演讲主题：微服务故障隔离技术&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;演讲简介：&lt;/span&gt;微服务分布式部署之后，涉及到序列化和反序列化、集群路由、网络读写等操作，故障在所难免。另外，在微服务中，可能会调用第三方服务，进行数据库操作、磁盘I/O操作等，这些对第三方服务的依赖，也会增加故障级联和扩散的风险。在实际项目中如何规避这些风险、如何更加有效的管理第三方依赖带来的可靠性奉献？本文将给出答案。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;听众收益：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;学习到微服务故障隔离的关键技术：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1. RPC通信层的故障隔离；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;2. 第三方依赖故障隔离；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;3. 基于线程池的微服务优先级调度；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;4. 熔断机制；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;5. 流量控制：静态、动态流控和并发控制；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;6. 优雅降级、异步回调机制。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;陈清渠 携程基础业务部高级研发经理&lt;/span&gt;&lt;/h3&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;个人简介：&lt;/span&gt;陈清渠，毕业于武汉大学，多年软件及互联网行业开发经验。14年加入携程，先后负责了订单查询服务重构，实时用户行为服务搭建等项目的架构和研发工作，目前负责携程订单中心团队。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;演讲主题：实时用户行为服务系统架构&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;演讲简介：&lt;/span&gt;用户实时行为对接了携程近20条业务线用户访问日志，通过kafka+storm的组合，每天在处理20亿+埋点数据的基础上保证秒级落地可查，支撑了多个产品，目前日均服务8千万以上请求。本次分享主要介绍我们在海量数据和高并发双重挑战下，如何从架构上和实现上保证实时性，稳定性和性能。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;听众收益：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1. 了解实时计算的系统构成和架构；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;2. 打造高性能服务的经验分享；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;3. 从多个层面提高系统可用性经验分享。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;李嘉璇 百度研发工程师&lt;/span&gt;&lt;/h3&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;个人简介：&lt;/span&gt;李嘉璇，百度研发工程师，有处理图像、社交文本数据情感分析的经验，参与过基于深度学习的自动驾驶二维感知系统hackathon竞赛，对研究深度学习框架TensorFlow的架构、源码分析及在不同领域的应用有浓厚兴趣。目前一本《TensorFlow入门到精通》正在出版，4月上市。独立制作和运营的竞品分析网站——追点网（www.tdrop.top），也是国内基于深度学习做产品的社交评论和新闻的竞品分析和舆情报告的网站。个人博客：blog.greatgeekgrace.com，活跃于国内各大技术社区，知乎编程问题回答者，热爱技术，热爱分享。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;演讲主题：TensorFlow在人脸年龄、情绪、性别、关键点识别系统中的架构设计&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;演讲简介：&lt;/span&gt;结合目前最流行的TensorFlow深度学习框架，讲解如何对人脸识别、人脸情绪识别、人像笑脸、人脸关键点等系统的架构设计。并结合人脸的特征提取，建立特征工程；最后应用在安防、支付等领域。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;听众收益：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1. 帮助听众了解人脸识别系统的架构和组成；并打造高性能的人脸识别系统。&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;2. 百度人脸在人脸识别系统中的技术实战、特征提取以及坑是如何填的；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;3. 理解人脸及图像相关的一些特征，及特征工程经验；&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;4. 目前关于深度学习架构设计的资料，中文资料翻译的有限，社区非常活跃，但是总是呈现出会着恒会，不会者始终找不到入门方法的状态。本次希望分享深度学习的架构设计和经验。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;高亮亮 饿了么移动技术部iOS工程师&lt;/span&gt;&lt;/h3&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;个人简介：&lt;/span&gt;高亮亮，饿了么移动技术部高级iOS工程师，负责饿了么商家版iOS App开发。对iOS架构和系统底层有深入研究，擅长移动性能分析，trouble shooting、iOS逆向等重难点工作。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;演讲主题：新瓶旧酒——换个角度提升 APP 性能和质量的实践之路&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; word-wrap: break-word !important;"&gt;演讲简介：&lt;/span&gt;结合当下火热的移动性能话题和 APM，围绕移动应用性能质量等方向，谈谈饿了么商家版如何避开传统解决方案，将Reflow &amp;amp; repaint，throttle &amp;amp; debounce、优雅降级等方案在客户端实现。通过类比借鉴，作为一个全新角度来思考质量提升问题，并灵活的运用到移动端，从而提升应用的性能，稳定性和可用性。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;听众收益：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1. 针对一线开发人员，贴合实际落地，由浅入深，通俗易懂 ;&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;2. 通过借鉴其他领域概念，打破传统，提供非常规解决方案和思路 ;&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;3. 普及其他领域概念，开拓思路，举一反三，挖掘更深层次的运用。&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</description>
      <pubDate>Fri, 17 Feb 2017 16:43:31 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】RancherOS 0.8.0 发布，多地加快推进大数据产业发展</title>
      <link>http://www.iwgc.cn/link/4743097</link>
      <description>&lt;div class="article-content"&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;Cloudaily网罗新鲜要闻，每日为你呈现&lt;span style="text-decoration: none; font-size: 14px; box-sizing: border-box; font-weight: 700;"&gt;大数据和云计算领域&lt;/span&gt;热点新闻。本次内容播报如下：&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;多地加快推进大数据产业发展&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;近期，贵阳、福州、西安等地均开展了与大数据相关的建设工作，以推动大数据产业发展。工信部数据显示，“十三五”期间，大数据产业将保持高速增长，到2020年，大数据相关产品和服务业务收入将突破1万亿元，年均复合增长率保持30%左右。各相关上市公司也在谋篇布局，推动产业发展。专家认为，目前积累了丰富的数据资源，大数据技术创新取得了明显突破，大数据应用推进势头良好。此外，技术和产品的发展推动着大数据服务模式创新，未来会培育数据即服务（DaaS）新模式和新业态。&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;不只是银行！未来这27大领域都将深受区块链影响&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;区块链技术影响的不仅仅只是银行和支付行业，以下27大领域都将受区块链影响：1.银行；2.支付和转账；3.网络安全；4.学历记录和学术界；5.投票；6.汽车租赁以及销售；7.网络和物联网；8.预测；9.在线音乐；10.拼车；11.股票交易；12.房地产；13.保险业；14.医疗；15.供应链管理；16.云存储；17.能源管理；18.体育管理；19.礼品卡和顾客忠诚度计划；20.政府和公共福利；21.枪支追寻；22.遗嘱和遗产；23.零售；24.慈善；25.执法；26.人力资源；27.打车服务。&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;光大银行风险大数据产品“滤镜”正式上线&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;日前，中国光大银行大数据实验室基于风险管理领域的预警分析研究，成功孵化出数据产品——“滤镜”。该产品利用大数据技术对企业客户进行过滤，形成高信用违约倾向的企业名单，向总分行风险管理决策者提供更加科学精准的决策支持；同时依托首个移动数据应用平台——“光速观察”，提升风险决策的时效性。此项数据产品运用社交网络、路径算法、文本分析等大数据分析挖掘技术，在线运行特殊交易对手、风险共同体、复杂循环担保圈三类大数据模型信号。&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;Evernote公司短期内实现大规模的云迁移&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;日前，Evernote公司最近在70天内将其业务完全迁移到Google云平台，这项工作通常耗时长达9到12个月。Evernote公司表示，它完成的这一业务迁移举动，对客户的影响达到最小程度，这在当今的商业环境中是一个壮举。实际上，该公司表示，其业务迁移到云计算的原因只是因为允许Evernote公司可以花费更多的时间响应客户，而不是担心他们的基础设施能力。事实上，这是推动数字化转型的关键点。如果云计算和其他技术可以帮助企业更快地向客户提供创新的新功能，它可以帮助公司提供差异化服务，从而有利于在竞争中胜出。&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;Switch公司数据中心获得绿色和平组织的A级评测&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;日前，绿色和平组织（Greenpeace）对于14个数据中心和CDN服务提供商进行了评测，并对四家厂商给出了整体不合格的成绩，努力清理这些运营商的数据中心提供能量的能源结构。其中一家是美国厂商，是杜邦Fabros技术公司，三家是韩国厂商：韩国电信，LG公司，以及SK公司。这个环保活动组织表彰了总部位于拉斯维加斯的Switch公司的努力，给出A的评价（列表中唯一的A），而硅谷的托管巨头Equinix公司是B，而总部位于旧金山的Digital Realty Trust公司则为C。&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;微软联袂毕马威成立区块链创新工场，加速区块链应用开发&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;微软和毕马威日前宣布即将成立区块链创新工场，以推动区块链应用的检验和开发。据了解，早在2015年，两家公司就已经宣布促进全新战略合作关系形成，包括联手提供数据和分析（D&amp;amp;A）、云合规和变革以及商业解决方案服务的合作；2016年共同携手英国FinTech初创公司建设区块链资产管理平台，宣称将于2017年初发布核心平台计划。被称作“区块链节点”创新工程的建立目的就是协调、优化使用者尤其是金融投资公司的工作流程，提高服务效率。能进一步扩展去年以来建立在区块链上已有的合作基础。目前两家公司已经在新加坡和法兰克福设立办事处，并打算在未来设立第三个纽约办事处。&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;国内首个基于大数据平台的智慧消防联合实验室成立&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;近日，国家超算天津中心和天津市公安消防总队签署战略合作协议，共同成立天津市智慧消防联合实验室，推动大数据、云计算、物联网等新一代信息技术深度应用于本市消防安全工作，让消防更智慧，将火灾隐患消灭于萌芽状态。这也是国内消防领域首次与超算中心大数据平台进行合作。预计年底前第一阶段工作将完成，届时可实现消防预警预报，为监督检查提供预测和指导性数据。2018至2019年第二阶段完成，将进一步深化细化消防应急指挥系统，把建筑、地理等信息融入进来，建成整体平台。&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;RancherOS 0.8.0 发布，基于 Docker 的操作系统&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;RancherOS 0.8.0 发布了，RancherOS是微型Linux发行，整个操作系统以Docker容器的形式运行。这包含了系统服务如udev和rsyslog。RancherOS 只包含运行Docker所需的最低数量的软件。这使得RancherOS的二进制下载量非常小。其他任何东西都可以动态通过Docker来获得。&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;私有云将出现两极分化，行业云或占半壁江山&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;来自Gartner和美国Interop ITX/InformationWeek公司的最新数据与观察，揭示了一个与最近几年来十分流行的观点不同的结论：混合云的前景并不美妙，私有云在美国企业市场的部署率在下降，企业部署的私有云停留在虚拟化＋自动化基础上，而不是全方位私有云。但在中国市场，正在出现不一样的私有云市场形态。无论在行业云还是私有云的赛道上，都有可能诞生独角兽型创业公司，因为中国的市场空间足够大且处于空白阶段。而且因为中国市场的复杂性和成熟的互联网环境，在中国市场孵化出的私有云技术、产品与解决方案，还有机会复制到其它国家，最终产生世界级的新一代企业IT公司。&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;Oracle为企业扩展云服务物联网组合&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;据悉，Oracle正在扩展其物联网产品组合，为基于Oracle物联网云和Oracle大数据云平台的企业提供四种新的云产品。这些物联网云应用与Oracle SCM Cloud和Oracle Service Cloud以及本地软件集成。&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; margin-bottom: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p style="box-sizing: border-box;"&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;本期周刊：&lt;/span&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;【Data &amp;amp; Cloud周刊】第4期 | SDCC 2017上海站震撼来袭&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;，立即&lt;/span&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;"&gt;&lt;span style="font-size: 14px;"&gt;订阅&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321233CvUPhf.jpg"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p style="box-sizing: border-box;"&gt;&lt;span style="font-size: 14px; text-decoration: none;"&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br style="box-sizing: border-box;"&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;</description>
      <pubDate>Fri, 17 Feb 2017 16:43:31 +0800</pubDate>
    </item>
  </channel>
</rss>
