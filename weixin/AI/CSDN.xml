<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>CSDN大数据</title>
    <link>http://www.iwgc.cn/list/1933</link>
    <description>CSDN分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点,提供云计算和大数据技术、平台、实践和产业信息等服务.</description>
    <item>
      <title>阿里巴巴分布式数据库服务DRDS研发历程</title>
      <link>http://www.iwgc.cn/link/4391440</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;艾乐强，阿里巴巴中间件(Aliware)产品经理，2009年加入公司，前期主要负责淘宝分布式session框架和淘宝垂直市场的系统设计研发，目前主要负责分布式数据库服务DRDS的产品设计和研发。&amp;nbsp;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;淘宝TDDL研发历史和背景&lt;/h3&gt;&lt;p&gt;淘宝DRDS/TDDL是阿里巴巴自主研发的分布式数据库服务。DRDS脱胎于阿里巴巴开源的Cobar分布式数据库引擎，吸收了Cobar核心的Cobar-Proxy源码，实现了一套独立的类似MySQL-Proxy协议的解析端，能够对传入的SQL进行解析和处理，对应用程序屏蔽各种复杂的底层DB拓扑结构，获得单机数据库一样的使用体验，同时借鉴了淘宝TDDL丰富的分布式数据库实践经验，实现了对分布式Join支持，SUM、MAX、COUNT、AVG等聚合函数支持以及排序等函数支持，通过异构索引、小表广播等解决分布式数据库使用场景下衍生出的一系列问题，最终形成了完整的分布式数据库方案。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;使用场景&lt;/h3&gt;&lt;p&gt;分布式数据库核心诉求在于解决单机数据库的瓶颈，单机数据库在使用过程中不可避免会遇到数据库容量、连接数、事务数、读性能瓶颈，突破这些瓶颈的两种通用的解决模型是单机垂直扩展scale up模型和水平扩展scale out模型。&lt;/p&gt;&lt;p&gt;单机扩展模型和硬件资源强绑定，普遍采用升级单机硬件能力的方式，实现数据库服务能力扩展，比如原来采用MySQL单机数据库，遇到访问瓶颈时更换磁盘，访问量更高时就需要考虑使用Oracle的商用解决方案、高端的存储设备、高端小型机，也就是IOE架构，甚至升级IOE设备，以换取更高的扩展和服务能力，这个过程就会存在设备升级和数据迁移的成本。&lt;/p&gt;&lt;p&gt;多机器用水平扩展模型使用大量廉价的PC-Server，通过阵列的方式来实现数据库的水平扩容，优势在于成本更低，因为不需要淘汰老设备和系统，不需要频繁迁移数据，需要时，只需扩容服务集群规模。&lt;/p&gt;&lt;p&gt;使用分布式多机模型也需要付出一定成本，分布式数据库的架构与单机数据库的逻辑和物理分布存在比较大差异，因此需要将单机数据库的数据迁移到分布式架构模型之下，也就是Sharding的数据分片过程，这个过程涉及数据的分布式逻辑设计、数据库迁移和SQL的优化改造，当然这个迁移一次性的，当架构迁移完成之后，就无需再关心数据库扩容和数据迁移问题，因为分布式数据库的服务层已经集成了扩容功能，架构上支持水平能力扩展。&lt;/p&gt;&lt;p&gt;2006年之前我们的核心应用普遍采用Oracle数据库，但随着业务快速发展，淘宝的数据量和访问量急剧增加，数据库出现严重访问性能问题，导致数据库频繁宕机、业务停滞，即使当时已经使用Oracle亚洲最大的RAC集群，单机数据库的扩展能力已经达到极限，且需要付出巨大的资金和运维成本，因此我们基于自己的实际情况，逐步开始去IOE，研发分布式关系型数据库服务，实现数据库的高扩展和成本可控，目前DRDS已经成为我们内部分布式数据库的标准，并且对外服务于金融、制造、政府机构、电商、社交等各行业。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;DRDS的整体架构&lt;/h3&gt;&lt;p&gt;DRDS/TDDL是典型的水平扩展分布式数据库模型，区别于传统单机数据库share anything架构，DRDS/TDDL采用share nothing架构，share nothing架构核心思路利用普通的服务器，将单机数据拆分到底层的多个数据库实例上，通过统一的Proxy集群进行SQL解析优化、路由和结果聚合，对外暴露简单唯一的数据库链接。整体架构如图1所示，包含DRDS服务模块、DRDS管控模块、配置中心、监控运维、数据库服务集群、域名服务模块。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIZq22xiaCc4U86zKwKLnaNdm00rxE9kR0qok5iabnIicyvpsjWI1FhTLDw/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 1&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;通过分布式集群管理模块实现对集群节点的管控。在数据安全和服务可用性方面，通过高效的数据同步系统，实现数据库的扩容和数据库实例的主备数据同步。同时依赖实例监控模块和HA模块实现主备的监控和自动化容灾切换。作为成熟的分布式数据库产品，TDDL也具备完善的运维管控系统，能够实现分布式数据库多实例之间的配置管理、变更，以及各种数据同步、扩容等任务管理，降低运维成本。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;DRDS/TDDL的功能特性&lt;/h3&gt;&lt;p&gt;&lt;span&gt;数据分片&lt;/span&gt;&lt;/p&gt;&lt;p&gt;DRDS的基础原理就是Sharding，也就是数据分片。将单机数据库的数据拆分到多个单机数据库上，对外保持逻辑的一致性。后端拆分的数据库为分库，对应的表称为分表，每个分库负责一份数据的读写操作，分散整体访问压力。在系统扩容时，只需水平增加分库数量，并迁移相关数据，即可提高DRDS系统总体容量。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIgAyiaav2AV7mqo8yVRbp7sia4qvqI4Eicb2WYFFOjd7y2zJCo5IhBv8xA/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 2&lt;/center&gt;&lt;p&gt;&lt;span&gt;数据分片需要选择一个分片的拆分纬度，也就是数据分布的依据。比如一个用户订单信息表，如果按照订单ID做数据拆分，那么相同订单ID的数据就会被拆分到同一个数据库存储节点，如果按照用户ID做数据拆分，那么同一个用户的订单就会分布到同一个数据库存储实例的存储节点。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;拆分纬度的选择非常重要，一般来说要根据实际业务的场景选择拆分键，总体指导原则是尽量保证每一个数据库节点的数据量和负载更均衡，单条SQL操作尽量落到单个数据库节点执行，不同SQL的查询落到不同的数据库节点。这样可以减少多个节点之间的网络传输，保持分布式查询的效率，均衡负载的同时也便于扩展。&lt;/p&gt;&lt;p&gt;&lt;span&gt;平滑扩容&lt;/span&gt;&lt;/p&gt;&lt;p&gt;数据库的扩容是数据库运维的常见操作，当数据库的数据存储容量不足时，传统的单机数据库需要提升单机的存储空间来支持更大的数据写入量，而随着数据量膨胀，同样的SQL查询语句，查询的基础数据量增加必然会降低查询效率；同时随着数据量增加，数据库的访问压力通常也会成倍提升，造成单机数据库连接数到达极限，此时单机数据库就需要通过升级硬件规格，使用磁盘阵列，使用高端的存储介质设备和更高端的小型机服务器来承载数据量和访问量的增加，这个过程会伴随大量的数据迁移，为了保证数据的一致性通常需要停机数据迁移，对业务影响较大。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIkAEzokdZzibBTkhfeSl882SwGNnicaklmv3LhcGbmLHNqhNwAdUPYwVA/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 3&lt;/center&gt;&lt;p&gt;&lt;span&gt;DRDS的分布式架构采用平滑扩容的方式来解决上述问题，通过增加更多的底层数据库实例来完成整体集群扩容。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;平滑扩容的前提是用户需要按照前述的分库分表逻辑，将逻辑数据库拆分为多个物理分库，不同的分库落在不同的底层物理数据库机器上。分库分表的数量通常建议用户预估未来3-5年的数据量增长情况，按照这个数据量计算总体数据应该拆分为多少个分库，因为单个分库的数据量通常会有一个建议值，超过这个阈值就会造成单个节点性能下降。有了具体的分库数量后，就可以按照分库的逻辑将数据拆分到不同的存储实例节点上，当承载分库的物理数据库机器出现容量和连接数不足等瓶颈问题时，就可以新增物理数据库节点，将原有的分库迁移到新的物理数据库节点上，实现整体逻辑数据库的扩容。&lt;/p&gt;&lt;p&gt;扩容过程实际是物理数据迁移的过程，引擎层按照分库迁移后的逻辑先在物理节点上建立新的分库，然后保留一个时间点进行全量的数据迁移。完成全量迁移后，开始基于先前保留的时间点进行增量的数据追赶。当增量数据追赶到两边的数据几乎一致时，对数据库进行瞬时停写，将最后的数据追平，引擎层进行分库逻辑的路由切换，路由规则切换完成后就完成了核心的扩容逻辑，整个切换过程在毫秒级别完成。&lt;/p&gt;&lt;p&gt;为了保证数据本身的安全，便于扩容回滚，在路由规格切换完成后，迁移前后的逻辑分库数据还会进行实时同步，直到业务确认后，才可清理原有分库数据。&lt;/p&gt;&lt;p&gt;整个扩容过程对上层的业务访问几乎无感知，是完全平滑的扩容，但仍需注意扩容的操作尽量选择在数据库访问，尤其是写入的低谷期进行，避免切换时过多的数据追赶时间。&lt;/p&gt;&lt;p&gt;&lt;span&gt;分布式MySQL执行引擎&lt;/span&gt;&lt;/p&gt;&lt;p&gt;分布式数据库的数据有规律地存储在多个底层存储实例上，数据物理存储的变化会造成与原生的数据库引擎不兼容，单机数据库所有的数据读取、写入、计算都在单一的物理机上执行，数据状态维持在单机上，主要的性能消耗在于磁盘的数据读取；而分布式架构下，数据和状态需要在多个数据库实例之间以及底层实例和Proxy之间进行传输，这会造成网络I/O消耗，而网络I/O对性能造成消耗相较于本地磁盘I/O和本地计算的性能开销而言要大得多。&lt;/p&gt;&lt;p&gt;因此分布式SQL引擎主要目标是实现与单机数据库SQL引擎的完全兼容，实现SQL的智能下推。能够智能分析SQL，解析出哪些SQL可以直接下发，哪些SQL需要进行优化改造，优化成什么样，以及路由到哪些实例节点上执行，充分发挥数据库实例的全部能力，减少网络之间的数据传输量，最终对不同实例处理后的少量结果数据进行聚合计算返回给应用调用方。这就是分布式SQL引擎的智能下推功能。&lt;/p&gt;&lt;p&gt;分布式引擎的职责包含SQL解析、优化、执行和合并四个流程，如图4所示。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIibMxib3N7NnI7OGDcibxHpmDse4dktuPL75Dv7uHNC1MeWjQG7TKP8lAA/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 4&lt;/center&gt;&lt;p&gt;&lt;span&gt;智能下核心原则有如下几个：&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;减少网络传输；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;减少计算量，尽量将计算下推到下层的数据节点上，让计算在数据所在的机器上执行；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;充分发挥下层存储的全部能力。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;基于以上原则实现的SQL引擎，就可以做到服务能力线性扩展。比如一个简单的AVG操作，对于一些比较初级的分布式数据库模型而言，常见做法是把AVG直接下发到所有的存储节点，这样造成的结果就是语法兼容，语意不兼容，最终拿到的是错误结果。而DRDS的智能下推引擎，对SQL的语法做充分的语意兼容性适配，针对AVG操作，只能由引擎将逻辑AVG SQL解析优化为SUM和COUNT的SQL然后进行下推，由底层的数据库实例节点完成SUM和COUNT计算，充分利用底层节点的计算能力，在引擎层将各个存储节点的SUM和COUNT结果聚合计算，最终计算出AVG。这只是一个非常典型的案例，在分布式数据库模型下，多数据表的Join操作，归并排序的兼容性非常复杂，下文会针对典型的场景解析TDDL/DRDS如何解决分布式场景下的具体问题。&lt;/p&gt;&lt;p&gt;&lt;span&gt;弹性扩展&lt;/span&gt;&lt;/p&gt;&lt;p&gt;TDDL/DRDS采用服务和存储分离的架构，DRDS实例服务层通过集群方式部署，由多个服务节点构成一个服务实例，通过负载均衡以及域名服务对外提供服务，多个服务节点之间无状态同步，平均负载处理用户请求。服务集群处理能力不足时，可随时扩充服务节点，增加服务处理能力。同样，业务低谷期也可适当降低集群规模，做到弹性的服务能力扩展。&lt;/p&gt;&lt;p&gt;对于一些大数据量OLAP的场景，对于单个Server节点的内存资源需求高时，也可通过提升单个Server节点的规格，做到垂直的能力扩展。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIfHnFW0ceKIvJvBmgMacGibghXpXLVDRHCbl6fx3VSK0piaEbklXuic93w/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 5&lt;/center&gt;&lt;p&gt;&lt;span&gt;分布式Join和小表广播&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;分布式场景下的Join操作和单机不同，单机数据的Jion操作发生在单机上，不存在内部网络数据传输。&lt;/p&gt;&lt;p&gt;在分布式架构下的多个数据表Jion，如果参与Join的多表数据切分纬度不同，数据则按照不同的拆分纬度分散在不同的数据库实例上，Join操作可能产生跨多个物理分库的Join，就需要进行多个底层实例的大量数据传输，SQL的执行效率就得不到保证，因此要参与Join操作的数据表要尽量保持拆分纬度统一，让Join操作尽量发生在单机上，减少跨库Join。如果不能保持拆分纬度的统一，存在跨库Join操作，那么原则就是尽量减少Join操作的输出传输。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIyQeT3jyaCxNceThou4XoCK2jLsQbZ6uBqKYzOpJyJA4X1VN1OC1uKQ/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 6&lt;/center&gt;&lt;p&gt;&lt;span&gt;DRDS通常使用的Join算法基于Nested Loop，对于Join的左右两个表，首先从Join的左表（驱动表）取出数据，然后将所取出数据中Join列的值放到右表并进行IN查询，从而完成Join过程。因此，Join的左表数据量越少，DRDS对右表做IN查询就次数就越少，如果右表的数据量也很少或建有索引，则Join的速度更快。故而在DRDS中，Join驱动表的选择对于Join的优化非常重要。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;而在实际数据库场景中，经常有一些源信息表，数据量较小，更新频度也很低，这些表无需拆分，类似这些源信息表通常采用单表模式，单表模式下一个逻辑表的数据统一存储在一个分库中，通常存储在“0”库，将这些表定义为“小表”，而其他业务数据量大、更新频率高的表仍旧采用分库分表的拆分模式。那这些“小表”和分库分表进行Join时，基于Nested Loop算法的原则，小表作为Join的驱动表会大大减少右表的IN查询次数，同时DRDS提供的小表广播功能，通过数据实时复制，将“小表”的全量数据和增量变更实时复制到分库分表上，将跨库的Join转化为单机Join操作，减少Server节点的计算，降低数据在多个底层实例之间的传输，Jion的效率提升会非常明显。&lt;/p&gt;&lt;p&gt;&lt;span&gt;异构索引&lt;/span&gt;&lt;/p&gt;&lt;p&gt;异构索引是DRDS提升分布式查询效率的解决方案之一，能够解决分布式场景下数据拆分纬度和数据查询使用纬度不一致导致的低效问题。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIXk2xVge3Z1A9yLMy1MgkoRCYs7C09gIRs0cO43ibpI4QpOYib5EaY5Ag/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;span&gt;图 7&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当数据表被拆分为多个分库分表时，数据在分库分表的分布规则就固定了。但是通常数据的业务使用场景非常复杂，如果数据的查询纬度和数据拆分分布的规则一致，单条SQL会在一个分库分表上执行；如果数据的查询使用纬度和数据拆分分布的规格不一致，单条SQL就很有可能在多个分库分表上执行，出现跨库查询，跨库查询会增加网络I/O的成本，查询效率必然下降。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;解决这个问题的思路还是分布式数据库的一贯原则，让SQL执行在单库上完成，实际采用的方式就是用“空间换效率”的方案，也就是将同一份数据表，冗余存储多份，按照不同的业务使用场景进行拆分，保持拆分纬度和使用纬度统一，而多份数据之间会实时数据复制以解决数据一致性问题，这就是“异构索引”方案。当然异构索引表不能无限制滥用，过多的异构索引表会影响同步效率，对源数据表造成同步压力。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;最佳实践&lt;/h3&gt;&lt;p&gt;&lt;span&gt;分布式SQL优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;SQL优化是数据库使用和运维的日常操作，分布式数据库针对SQL的优化不仅要考虑磁盘I/O的开销，更要关注网络I/O开销。为了优化SQL执行，其核心的优化思想就是减少网络I/O。为此，DRDS会尽量将原本DRDS这一层的工作均衡下发到其底层的各个分库（如RDS 等）来做。这样就可以将原本需要走网络的I/O开销转换为单机的磁盘I/O开销，从而提升查询执行效率。因此，我们在使用DRDS时若遇到了慢SQL，则需针对DRDS的特点将适当改写SQL。&lt;/p&gt;&lt;p&gt;首先是条件查询优化，DRDS的数据按拆分键进行水平切分，查询中若带上拆分键对于减少SQL在DRDS的执行时间很有意义。查询条件尽量带分库键，就可以让DRDS根据分库键的值将查询直接路由到特定的分库，这有助于避免DRDS做全库扫描。含分库键的条件精度越高，越有助于提高查询速度，也只有这样的优化才能充分发挥分布式架构查询的优势，便于后续查询能力的扩展。&lt;/p&gt;&lt;p&gt;其次针对Join的优化，选择条件查询数据量少的Join表作为左表（驱动表），降低右表IN查询的次数；在数据量少且变更量少的“广播表”参与的Jion操作，将“广播表”作为驱动表。&lt;/p&gt;&lt;p&gt;针对LIMIT OFFSET、COUNT语句，DRDS实际SQL执行是依次将OFFSET之前的记录数据读取出来，并丢弃，只保留OFFSET之后的数据，这样当OFFSET非常大时，读取的数据记录数很少，效率也很低，因为OFFSET之前的数据读取需要执行大量的磁盘I/O读取操作。优化方式是将SQL优化为对key的OFFSET读取和IN操作两个步骤，先读取OFFSET之后的记录key，内存中缓存这些key，然后再通过IN查询获取完整的记录信息，这样会大大减少磁盘I/O，效率提升非常明显。&lt;/p&gt;&lt;p&gt;&lt;span&gt;分布式事务优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;分布式数据库的事务和SQL查询优化的逻辑是一样的原则，尽量让事务在单库中执行，只有在单库中执行，才可以在保持事务ACID特性的同时，还能线性地扩展事务能力。这种单库事务通常称为“强事务”。&lt;/p&gt;&lt;p&gt;实际业务也经常会面临分布式数据库架构下，数据库事务不可避免出现跨库执行。跨库事务必然涉及到一个事务在多个分库上进行事务分支的执行和状态同步，相比单机事务，分布式跨库事务的吞吐量和延迟会大大增加。而事务涉及的分库越多，事务边界越大，事务的延迟也会相应增加，性能就会出现线性衰减。&lt;/p&gt;&lt;p&gt;遇到跨库事务，通常的实践优化方式是通过“最终一致”事务保证事务执行的吞吐量。“最终一致”事务的原理是优先保证核心事务分支的正向执行，然后保存事务中间状态，其他事务分支异步执行，执行完成后达到最终的事务一致，避免跨库事务时间序列执行阻塞，提升事务吞吐量。如图8所示，事务3和事务5是跨库事务，事务分支先在左边库进行，异步的事务分支在右边分库执行，分别在自己所在的分库顺序执行，最终达到事务一致性。&lt;/p&gt;&lt;p&gt;&lt;span&gt;单机数据库迁移到DRDS的流程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;单机数据库迁移到分布式数据库要保证的就是业务正常运转、平滑过渡、减少运维，整个迁移分为三个步骤。&lt;/p&gt;&lt;p&gt;第一步，读写保持在原有的数据库上，数据通过复制机制写入分布式数据库，前提是分布式目标库表已经建好；&lt;/p&gt;&lt;p&gt;第二步，验证云上数据是否正确，切部分读取流量到目标的分布式数据库上读取线上压力验证（测试环境提前验证也可保证）；&lt;/p&gt;&lt;p&gt;第三步，业务听写几分钟，读写的流量切换到目标库，数据反向复制到源单机数据库，保证随时可切换回单机数据库，同时也可做云下数据备份。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIGDV8PiaiaYIKsoNq7407ibCz9jhcuW07QOfcO5G0ybl2HqnqMK6zWzDIw/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;span&gt;图 8&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;未来的发展&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;DRDS作为分布式数据体系中的数据库服务中间层，未来会适配更多底层存储引擎，在充分利用底存储节点的计算能力的同时，优化本身服务的计算能力，解决OLAP场景，成为能够完整覆盖OLTP和OLAP以及其他一些数据库服务场景的完备的分布式数据库服务体系。同时完备分布式数据库逻辑层的运维支持和分布式强一致事务的支持。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Wed, 18 Jan 2017 16:45:55 +0800</pubDate>
    </item>
    <item>
      <title>GAN学习指南：从原理入门到制作生成Demo</title>
      <link>http://www.iwgc.cn/link/4391441</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;&lt;span&gt;何之源，复旦大学计算机科学硕士在读，研究方向为人工智能以及机器学习的应用。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;生成式对抗网络（GAN）是近年来大热的深度学习模型。最近正好有空看了这方面的一些论文，跑了一个GAN的代码，于是写了这篇文章来介绍一下GAN。&lt;/p&gt;&lt;p&gt;本文主要分为三个部分：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;介绍原始的GAN的原理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;同样非常重要的DCGAN的原理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何在Tensorflow跑DCGAN的代码，生成如题图所示的动漫头像，附送数据集。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;GAN原理介绍&lt;/h3&gt;&lt;p&gt;说到GAN第一篇要看的paper当然是Ian Goodfellow大牛的Generative Adversarial Networks（&lt;span&gt;arxiv：&lt;/span&gt;&lt;a target="_blank" style="max-width: 100%; box-sizing: border-box; color: rgb(0, 122, 170); word-wrap: break-word !important; text-decoration: underline; background-color: transparent;"&gt;&lt;span&gt;https://arxiv.org/abs/1406.2661&lt;/span&gt;&lt;/a&gt;&lt;span&gt;），这篇paper算是这个领域的开山之作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;GAN的基本原理其实非常简单，这里以生成图片为例进行说明。假设我们有两个网络，G（Generator）和D（Discriminator）。正如它的名字所暗示的那样，它们的功能分别是：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;G是一个生成图片的网络，它接收一个随机的噪声z，通过这个噪声生成图片，记做G(z)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;D是一个判别网络，判别一张图片是不是“真实的”。它的输入参数是x，x代表一张图片，输出D（x）代表x为真实图片的概率，如果为1，就代表100%是真实的图片，而输出为0，就代表不可能是真实的图片。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在训练过程中，&lt;span&gt;生成网络G的目标就是尽量生成真实的图片去欺骗判别网络D。而D的目标就是尽量把G生成的图片和真实的图片分别开来。&lt;/span&gt;这样，G和D构成了一个动态的“博弈过程”。&lt;/p&gt;&lt;p&gt;最后博弈的结果是什么？&lt;span&gt;在最理想的状态下&lt;/span&gt;，G可以生成足以“以假乱真”的图片G(z)。对于D来说，它难以判定G生成的图片究竟是不是真实的，因此D(G(z)) = 0.5。&lt;/p&gt;&lt;p&gt;这样我们的目的就达成了：我们得到了一个生成式的模型G，它可以用来生成图片。&lt;/p&gt;&lt;p&gt;以上只是大致说了一下GAN的核心原理，如何用数学语言描述呢？这里直接摘录论文里的公式：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQI7MKBDxaaiapHZGOYIcvSONiarBdyOkS30kdpiaBMq3mkKic8wUWWaNyQhA/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单分析一下这个公式：&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;整个式子由两项构成。x表示真实图片，z表示输入G网络的噪声，而G(z)表示G网络生成的图片。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;D(x)表示D网络判断&lt;span&gt;真实图片是否真实&lt;/span&gt;的概率（因为x就是真实的，所以对于D来说，这个值越接近1越好）。而D(G(z))是&lt;span&gt;D网络判断G生成的图片的是否真实的概率。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;G的目的：上面提到过，D(G(z))是&lt;span&gt;D网络判断G生成的图片是否真实的概率&lt;/span&gt;，G应该希望自己生成的图片“越接近真实越好”。也就是说，G希望D(G(z))尽可能得大，这时V(D, G)会变小。因此我们看到式子的最前面的记号是min_G。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;D的目的：D的能力越强，D(x)应该越大，D(G(x))应该越小。这时V(D,G)会变大。因此式子对于D来说是求最大(max_D)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面这幅图片很好地描述了这个过程：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQI75ZHTZPQ0GHLrp2icUoZXebE0sBRaAEklg0H803ytvIRcL91EmxicV9g/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么如何用随机梯度下降法训练D和G？论文中也给出了算法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIoHts0uXIonWhwPL1j7Mlygtu2cxYybIFEE9rcZ8ibOupEUFoxwcxq4A/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里红框圈出的部分是我们要额外注意的&lt;/span&gt;&lt;span&gt;。第一步我们训练D，D是希望V(G, D)越大越好，所以是加上梯度(ascending)。第二步训练G时，V(G, D)越小越好，所以是减去梯度(descending)。整个训练过程交替进行。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;DCGAN原理介绍&lt;/h3&gt;&lt;p&gt;我们知道深度学习中对图像处理应用最好的模型是CNN，那么如何把CNN与GAN结合？DCGAN是这方面最好的尝试之一（论文地址：[1511.06434] Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks）&lt;/p&gt;&lt;p&gt;DCGAN的原理和GAN是一样的，这里就不在赘述。它只是把上述的G和D换成了两个卷积神经网络（CNN）。但不是直接换就可以了，DCGAN对卷积神经网络的结构做了一些改变，以提高样本的质量和收敛的速度，这些改变有：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;取消所有pooling层。G网络中使用转置卷积（transposed convolutional layer）进行上采样，D网络中用加入stride的卷积代替pooling。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在D和G中均使用batch normalization&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;去掉FC层，使网络变为全卷积网络&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;G网络中使用ReLU作为激活函数，最后一层使用tanh&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;D网络中使用LeakyReLU作为激活函数&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;DCGAN中的G网络示意：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIxuDL2vs8PsDlJmC2vM5Ayeex6Q9ybueicqXiaibJicXdrp2O51KDRzRdYA/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;DCGAN in Tensorflow&lt;/h3&gt;&lt;p&gt;好了，上面说了一通原理，下面说点有意思的实践部分的内容。&lt;/p&gt;&lt;p&gt;DCGAN&lt;span&gt;的原作者用DCGAN生成LSUN的卧室图片，这并不是特别有意思。之前在网上看到一篇文章《&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; line-height: 27.2px; word-wrap: break-word !important;"&gt;Chainerで顔イラストの自動生成 - Qiita&lt;/a&gt;》，是用DCGAN生成动漫人物头像的，效果如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIEfib3h0xpUjyMofcMN8c51JKibFuUO8djadsDaicgc3gXKkOdarcxbovw/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是个很有趣的实践内容。可惜原文是用Chainer做的，这个框架使用的人不多。下面我们就在Tensorflow中复现这个结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原始数据集的搜集&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先我们需要用爬虫爬取大量的动漫图片，原文是在这个网站：&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;http://safebooru.donmai.us/&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;中爬取的。我尝试的时候，发现在我的网络环境下无法访问这个网站，于是我就写了一个简单的爬虫爬了另外一个著名的动漫图库网站：&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;konachan.net - Konachan.com Anime Wallpapers&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;爬虫代码如下：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;import requests&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;from bs4 import BeautifulSoup&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;import os&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;import traceback&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;def download(url, filename):&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; if os.path.exists(filename):&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print('file exists!') &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; try:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; r = requests.get(url, stream=True, timeout=60)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; r.raise_for_status() &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;with open(filename, 'wb') as f: &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;for chunk in r.iter_content(chunk_size=1024): &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if chunk: &amp;nbsp;# filter out keep-alive new chunks&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;f.write(chunk)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;f.flush() &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return filename &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; except KeyboardInterrupt: &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if os.path.exists(filename):&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;os.remove(filename) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; raise KeyboardInterrupt &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; except Exception:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;traceback.print_exc() &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if os.path.exists(filename):&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; os.remove(filename)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;if os.path.exists('imgs') is False:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; os.makedirs('imgs')&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;start = 1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;end = 8000&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;for i in range(start, end + 1):&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; url = 'http://konachan.net/post?page=%d&amp;amp;tags=' % i&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; html = requests.get(url).text&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; soup = BeautifulSoup(html, 'html.parser') &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; for img in soup.find_all('img', class_="preview"):&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; target_url = 'http:' + img['src']&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; filename = os.path.join('imgs', target_url.split('/')[-1])&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; download(target_url, filename)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; print('%d / %d' % (i, end))&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个爬虫大概跑了一天，爬下来12万张图片，大概是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIO3YpzbicqMiaZ4mpFQcoAWKIL92kvBzseGCdohKibgEHIkoy32mzQEBIg/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可以看到这里面的图片大多数比较杂乱，还不能直接作为数据训练，我们需要用合适的工具，截取人物的头像进行训练。&lt;/p&gt;&lt;p&gt;&lt;span&gt;头像截取&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;截取头像和原文一样，直接使用github上一个基于opencv的工具：&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;nagadomi/lbpcascade_animeface&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;简单包装下代码：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;作者：何之源&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;链接：https://zhuanlan.zhihu.com/p/24767059来源：知乎&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;import cv2&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;import sys&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;import os.path&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;from glob import glob&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;def detect(filename, cascade_file="lbpcascade_animeface.xml"):&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; if not os.path.isfile(cascade_file): &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; raise RuntimeError("%s: not found" % cascade_file)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; cascade = cv2.CascadeClassifier(cascade_file)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; image = cv2.imread(filename)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; gray = cv2.equalizeHist(gray)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; faces = cascade.detectMultiScale(gray, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # detector options&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scaleFactor=1.1,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; minNeighbors=5,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; minSize=(48, 48)) &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; for i, (x, y, w, h) in enumerate(faces):&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; face = image[y: y + h, x:x + w, :]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; face = cv2.resize(face, (96, 96))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; save_filename = '%s-%d.jpg' % (os.path.basename(filename).split('.')[0], i)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cv2.imwrite("faces/" + save_filename, face)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;if __name__ == '__main__': &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; if os.path.exists('faces') is False:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; os.makedirs('faces')&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;file_list = glob('imgs/*.jpg') &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;for filename in file_list:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; detect(filename)&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;截取头像后的人物数据：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIKEzLufuhRKVWpIkOGzWB6usby2SylrpKjY3debdrWv9EvWI2jIictTA/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这样就可以用来训练了！&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你不想从头开始爬图片，可以直接使用我爬好的头像数据（275M，约5万多张图片），百度网盘地址：&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;https://pan.baidu.com/s/1eSifHcA&lt;/a&gt;&lt;span&gt;，提取码：g5qa。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;训练&lt;/span&gt;&lt;/p&gt;&lt;p&gt;DCGAN在Tensorflow中已经有人造好了轮子：carpedm20/DCGAN-tensorflow，我们直接使用这个代码就可以了。&lt;/p&gt;&lt;p&gt;不过原始代码中只提供了有限的几个数据库，如何训练自己的数据？在model.py中我们找到读数据的几行代码：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;if config.dataset == 'mnist':&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;data_X, data_y = self.load_mnist() &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;else: &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; data = glob(os.path.join("./data", config.dataset, "*.jpg"))&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样读数据的逻辑就很清楚了，我们在data文件夹中再新建一个anime文件夹，把图片直接放到这个文件夹里，运行时指定–dataset anime即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;运行指令（参数含义：指定生成的图片的尺寸为48x48，我们图片的大小是96x96，跑300个epoch）：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;python main.py --image_size 96 --output_size 48 --dataset anime --is_crop True --is_train True --epoch 300&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;第1个epoch跑完（只有一点点轮廓）：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQI1d08kCiaZeTvhZgmiaAqVtNaVPx7NB03Vo8ZXIUk6AsypZ0gqzibIJJHQ/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第5个epoch之后的结果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIXmag0B1ezMYZtYY1okq4vSSb6iacISJKlibiccz1S7bGXYHcNH8gTVAJw/640?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第10个epoch：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIoVicCC9iarSsfot8yhQLOlSOXpkuBbcTiavR4jibmpcYgWBKr16F1ibukHg/640?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;200个epoch，仔细看有些图片确实是足以以假乱真的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIJVLQktVEHNdp9MJ6KlQ9D2tr7srUMJDl4J5r45HAcSTDd5Aw0qUc9g/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;题图是我从第300个epoch生成的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;总结和后续&lt;/h3&gt;&lt;p&gt;简单介绍了一下GAN和DCGAN的原理。以及如何使用Tensorflow做一个简单的生成图片的demo。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Ian Goodfellow对GAN一系列工作&lt;span&gt;总结的ppt确实精彩，推荐《&lt;/span&gt;&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; line-height: 27.2px; font-size: 14px; text-decoration: none; word-wrap: break-word !important;"&gt;&lt;span&gt;独家 | GAN之父NIPS 2016演讲现场直击：全方位解读生成对抗网络的原理及未来（附PPT）》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（&lt;span&gt;http://it.sohu.com/20161210/n475485860.shtml&lt;/span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GAN论文汇总，包含code：&lt;span&gt;https://github.com/zhangqianhui/AdversarialNetsPapers&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Wed, 18 Jan 2017 16:45:55 +0800</pubDate>
    </item>
    <item>
      <title>从糖尿病监测看智能医疗发展</title>
      <link>http://www.iwgc.cn/link/4391443</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;原文：&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;Is diabetes the world’s most connected health condition?&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;br/&gt;作者：Cate Lawrence&amp;nbsp;&lt;br/&gt;译者：张新慧&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;胰岛素首次用于治疗人类糖尿病的 95 周年纪念日刚刚过去，95 年来，对于糖尿病治疗的探索几乎从未停止过。根据美国疾控中心的数据，全美超过 2900 万人患有糖尿病，8600 万则与前驱糖尿病为伴——此类人群患二型糖尿病等慢性疾病的风险是普通人的两倍。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIMrcgDhKE9OXVRTNY3dzuOUAYnficd43Rzu5iaicjLLtibkUDdC99YKz54A/640?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;健康监测是糖尿病患者的日常必须。众多应用、联网仪器以及近年来流行的可穿戴设备都有健康监测、治疗和管理功能，那么市场现有的产品有哪些，未来又会有什么样的新发展呢？&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;联网仪器&lt;/h3&gt;&lt;p&gt;近年来最引人瞩目的糖尿病联网仪器当&lt;span&gt;属&amp;nbsp;&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;MyDario&lt;/a&gt;&lt;span&gt;&amp;nbsp;多功能血糖&lt;/span&gt;仪，能数秒内测出血糖水平并显示在智能手机上，对应的应用会将信息发送给医疗人员及患者家属。除此之外，它还能追踪患者碳水化合物的摄取及锻炼情况。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIAYKicyY6vDNkiax0UCFU980wTQg8BIMkVYdrBoIBmRBwEKQW3VMo1ib6w/640?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;可穿戴设备&lt;/h3&gt;&lt;p&gt;也许你觉得可穿戴&lt;span&gt;设备多了去了，不足为奇，但针对糖尿病的实在屈指可数。FDA 在 2015 年仅批准了&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;一款&lt;/a&gt;&lt;span&gt;糖尿病联网设备，2016 年批准了&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;三款&lt;/a&gt;&lt;span&gt;。以下是其中两款：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;Dexcom（德康）G5 动态血糖仪&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Dexcom 一直勤于改良自己的动态血糖监测（CGM）体系，G5 动态血糖仪是最新成果。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIyMJhGQ6rv0FXqq5N8psPbSwe94Xsm3zQDaibJiaAx77k691dSydSm0sQ/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可穿戴传感器和发送器收集血糖数据，直接显示在对应的手机应用上，每五分钟数据更新一次。若血糖水平过高过低，应用都会发出警告。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;Medtronic（美敦力）的 MiniMed 670G&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2016 年 9 月，FDA 批准了由&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;Medtronic&lt;/a&gt;&lt;span&gt;研发的&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;MiniMed 670G&lt;/a&gt;&lt;span&gt;——这是全球首个胰岛素泵，也是全球首个能自动检测血糖并调节胰岛素给药的混合闭环系统。它不但能在血糖过高时精准给药，还等在血糖正常后立&lt;/span&gt;刻停止给药，最大程度避免了因药物过量或不足导致生命危险的情况。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQku4JKZyg3xfcPF6tVSQIP7X4wcicPy9siaVXZlWC5rVJJ1KJGXmT9Yrgrl7fiaiaAWwiaCefBlSRxdA/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;MiniMed 670G 不间断监测血糖水平，并利用精密的算法做出反应——血糖过高时精准给药，让其回归正常水平。但该仪器还不能称之为自动化的人工胰腺，一类糖尿病患者仍需控制碳水化合物摄取，将信息手动输入该系统。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;对抗糖尿病的生物骇客&lt;/h3&gt;&lt;p&gt;相关应用/仪器的开发、测试和上市从未停歇过，与此同时一场生物骇客运动也在如火如荼地进行着。如今糖尿病患者可以利用 DIY 的 IoT 技术，社交媒体和推特标签&amp;nbsp;&lt;code style=" padding: 2px 4px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;#WeAreNotWaiting&lt;/code&gt;&amp;nbsp;自己创建平台、应用和云解决方案，是对现存产品&lt;span&gt;的良好补充。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;Open Artificial Pancreas System&lt;/a&gt;&lt;span&gt;（APS，开放式人工胰腺系统）项目始于 2013 年，创始人&amp;nbsp;&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;Dana Lewis&lt;/a&gt;&lt;span&gt;&amp;nbsp;和&amp;nbsp;&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;Scott Leibrand&lt;/a&gt;&lt;span&gt;创造了可自动调整给药量的闭环 APS 系统的参考设计（&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;reference desig&lt;/a&gt;&lt;span&gt;）以及参考实施方案。该 APS 系统利用动态血糖检测（CGM）感应器的血糖数据来自动调整该药量，让血糖（BG）不论是白天还是晚上始终维持在安全范围内。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;血糖监测相关的还有&amp;nbsp;&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;Nightscout&lt;/a&gt;&lt;span&gt;&amp;nbsp;项目，该项目结合了 CGM 产品、DIY 的发送器及免费开源的 Nightscout 代码，将 CGM 数据分享到云端，输送到其他设备上，比如患者父母的手机或智能手表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这些努力的背后是对抗糖尿病的坚定决心：&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;我们坚信自己可以创造出安全有效的 APS 技术，更快惠及更多糖尿病患者，而不必让他们干巴巴等着临床试验完成后，由 FDA 批准再上市。我们也坚信可以让更多本身就受糖尿病困扰的创新人才和独立研究者加入，让 APS 技术为成百上千乐意参与临床试验的患者带去福音。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;展望未来&lt;/h3&gt;&lt;p&gt;机&lt;span&gt;器学习和人工智能为预防（比如二类糖尿病）和管理糖尿病带来了新的希望。比如&amp;nbsp;&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;Suggestic&lt;/a&gt;&lt;span&gt;&amp;nbsp;应用利用机器学习技术，掌握用户的基因、代谢率、饮食和心理特征；IBM Watson Health 和 Medtronic 公司联手开发的&amp;nbsp;&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;Sugar.IQ&lt;/a&gt;&lt;span&gt;&amp;nbsp;应用充分利用 Medtronic 胰岛素汞和血糖感应器提供的实时动态血糖监测和胰岛素信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该应用目前得等 FDA&lt;/span&gt;&amp;nbsp;审核后才能上市。进一步改进包括整合健身追踪器等设备的数据，添加 Watson 提问功能以及根据患者病情作出预测等等。&lt;/p&gt;&lt;p&gt;科技可大大提升糖尿病患者的生活质量，但因健康仪器上市花费时间长、成本高（经济条件一般的患者消费不起），兼顾市场需求和医疗合规并非易事。不论怎样，随着越来越多技术专家努力与糖尿病作战，2017 年或许会看到更多的进展。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Wed, 18 Jan 2017 16:45:55 +0800</pubDate>
    </item>
    <item>
      <title>容器集群支持数据库实践</title>
      <link>http://www.iwgc.cn/link/4360873</link>
      <description>&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;作者：京东商城-基础平台部-集群技术部副总监，鲍永成。京东IPDCHAT公众号输出京东商城基础平台部内部技术实战，欢迎关注。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;京东容器数据库系统，管理1800台物理计算节点，生产1W+ 多MySQL Docker容器实例。架构简单可靠，Docker容器计算平台与MySQL集群管理平台解耦处理。为描述方便，京东容器化数据库系统命名为CDS，底层京东Docker容器计算平台命名为JDOS。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;本文重点介绍JDOS如何支持CDS。CDS是更大的话题，后续数据库团队会分享相关实践。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;介绍&lt;/h3&gt;&lt;p&gt;CDS依赖京东坚实的JDOS技术，生产运行1W+个MySQL容器实例。CDS借助JDOS技术优势获得主要3个方面的技术收益：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;CDS借助Docker容器资源隔离能力，有效支持同一宿主物理机上多MySQL实例直接资源隔离，极大提高数据库实例部署密度，有效提升资源使用率&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;CDS借助Docker容&lt;span&gt;器&lt;/span&gt;资源平滑升级能力，方便数据库实例平滑扩容需求&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;CDS借助JDOS平台资源池化提供管理容&lt;span&gt;器&lt;/span&gt;生命周期API能力，实现用户自助上下线数据库以及自动化运维。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;本文会从架构设计，性能测试等方面说明京东CDS落地实践过程。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;整体架构&lt;/h3&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJBDwib7LGpTCxVM2Bd5vJjBZ7C7thaRibAwibVnT5LCTA1TIwexZ1WP3Lw/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CDS与JDOS解耦，CDS负责管理MySQL主从等集群方式的生命周期管理；京东JDOS负责单个MySQL容&lt;span&gt;器&lt;/span&gt;实例生命周期管理。京东Docker容器集群分多Region，多POD部署，且不同集群之间网络互通，有效支持每个MySQL实例可被业务系统直接调用，确保极佳的网络延迟性能。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;MySQL集群实例&lt;/h3&gt;&lt;p&gt;&lt;span&gt;优先级 配额&lt;/span&gt;&lt;/p&gt;&lt;p&gt;数据库cluster根据业务重要性划分不同的优先级，京东的划分更加细致，这里我们简化分2种优先级：核心系统，非核心系统。&lt;/p&gt;&lt;p&gt;云数据库管理平台只需要在调用京东JDOS平台API时候，带上priority=0，即可表示创建的是核心系统依赖的数据库。京东JDOS平台会强制把属于该cluster的多MySQL实例调度到不同的机架，且不资源“超配”。&lt;/p&gt;&lt;p&gt;底层资源云化和核算成本需求，会针对按事业部配给一定的配额，所在的创建数据库集群实例成功后，自动从该部门扣除对应的资源值，反之销毁会归还配额到部门。&lt;/p&gt;&lt;p&gt;&lt;span&gt;监控 告警&lt;/span&gt;&lt;/p&gt;&lt;p&gt;数据库cluster自身DB层面的告警由云数据库集群平台提供。涉及到底层计算，网络，存储等资源层面的告警，由底层京东Docker容器平台提供数据给云数据库集群。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;JDOS架构&lt;/h3&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJMJMZvy90HLBleWol5xdQUia1shaFR1ePmuvC2zklzyYXoElBJDCxGDQ/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;JDOS是京东统一数据中心计算，网络，存储管理平台。除支持CDS外，也支持京东全部的业务系统运行环境。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJlluSqczUE6c2IuS7iaGEoOzomdP2XlHPrl4TW6uAWj7MOkicY3ka6APQ/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;JDOS系统基于京东扎实的Openstack，Docker等开源技术的持续研发能力，提供稳定，高性能的计算资源平台。每个组件都是独立服务部署，采用MQ互相交互信息，京东重构了主要的核心组件服务，使JDOS平台可以支持更大的集群规模，目前稳定在6K台物理计算节点。重新设计JDOS升级功能，做到平滑无感知，有效支撑长时间运行容器的稳定性。&lt;/p&gt;&lt;p&gt;&lt;span&gt;JDOS控制节点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJkgFibS69ibedzQnxdz6pS5We9QRKvahEUvTS7MSibBPXhC4liabx5Fj7kw/0?"/&gt;&lt;/p&gt;&lt;p&gt;JDOS控制节点服务组件，借助Haproxy做PooL模式部署，有效避免单点和负载能力问题。&amp;nbsp;&lt;/p&gt;&lt;p&gt;控制节点3台物理机，分别跨在不同的机架上，避免Tor交换机，机架电力，服务器等故障影响。&lt;/p&gt;&lt;p&gt;控制节点服务组件混合部署，进一步提升控制节点每个服务组件的高可用和负载能力。比如计算服务API，镜像服务API，认证服务API，网络服务API，存储服务API进程混部同一台物理机。&lt;/p&gt;&lt;p&gt;&lt;span&gt;JDOS计算节点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;计算节点管理网络与虚拟化数据网络使用不同的网口进行隔离，全万兆网络环境，对数据库的网络环境支持非常好。特别京东在虚拟化网络技术方向的扎实积累，基本可以做到虚拟化网络损耗控制在2%以下。&lt;/p&gt;&lt;p&gt;&lt;span&gt;调度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJ2QSzm53uAnzk3Q05bVXqON2h11aaGnLquxgtslDM6qK6ibjnF6ibcwdg/0?"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;调度架构简单，负载可扩展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJibEXENgxk8ZUawb0wibBH7lichrCHhoAINjW0BbbSZ56Ws2wL8UxrVE4w/0?"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;主要思想是，先一系列filter掉不满足要求的计算节点，然后打分，最后做排序，选择最优并返回调度结果。&lt;/p&gt;&lt;p&gt;&lt;span&gt;资源分区调度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;按Region，POD，Zone，物理机等4个层面划分计算区域，调度算法灵活可配确保业务特点与计算硬件环境特点结合适配。如CDS的机器全部是SSD的硬盘，所以JDOS会在每个数据中心提供CDS SSD Zone的tag，把CDS的创建请求优先调度到具有SSD硬盘的计算Zone。&lt;/p&gt;&lt;p&gt;&lt;span&gt;亲和性和反亲和性调度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;创建全新数据库集群实例如一主一层，JDOS调度器会把这2个MySQL容器实例分布到不同的机架。&lt;/p&gt;&lt;p&gt;业务多从库需求，要求从库是高性能读，JDOS调度器会根据performance_slave=True标记，尽可能把从库创建到网络繁忙度较小的机架，并与主在相同的物理POD，甚至同一个Tor交换机下面的不同物理机上。&lt;/p&gt;&lt;p&gt;业务增加备份性质的从库需求，JDOS调度器会根据DB_Cluster_ID=uuid, backup_slave=True标记，强制把从库创建避免已经有该DB_cluser_ID所在的宿主机，以及机架甚至POD。&lt;/p&gt;&lt;p&gt;&lt;span&gt;可扩展性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;底层JDOS资源池的扩容性，按使用率，有计划进行扩容底层物理计算资源。CDS每个库使用资源的平滑扩容，比如CPU，内存，网络，磁盘空间均支持平滑扩容功能。采用直接重置修改cgroup的配置，即可达到平滑扩容的目的。结合京东设计的cpu set与cpu share并存的资源隔离策略，提升资源使用率。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;性能&lt;/h3&gt;&lt;p&gt;主要关注MySQL运行在Docker容器内的实际DB层面的性能。&lt;/p&gt;&lt;p&gt;&lt;span&gt;MySQL实例性能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;性能测试环境部署图&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJ3iajy7qx5CUlvc1YloKKbQ5M5LZFnjH7sHeiaHVQKu93JhjsnWIwEoFg/0?"/&gt;&lt;br/&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;测试环境硬件配置&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJnVicNIIU5Q0XKmx6khBSg2M688J1LwicaacRDzL5ibckX1nWmR1AsGkzA/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多容器实例基准测试&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;测试模型&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJibUvmOcuflGJgDBVlWj5VuJBianlzRHbEEl3dOgiaT6XLaOUQEpRJSGbA/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;场景描述&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;基础数据为：8个容器，每个容器基础数据量为1000W（532M），单表加压，每个表10W行记录，同时对多个容器发起相同的请求，测试响应情况，并对比同等线程数下物理机的情况。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;容器测试数据&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJ8zosicfa5tS8p4vbvENL7Gic5egKZb42ut3SHpuDnb2jSXgIussnQGVA/0?"/&gt;&lt;br/&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;物理机数据&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJF7vSgmbQvNJb68fgUKyBY0dsGmvF0QSDOKjW0MicsiaSkI2psnz0zyww/0?"/&gt;&lt;br/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;稳定性测试&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;场景描述&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;单容器1000W基础数据，单表请求10W数据，8容器并发运行24小时。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;性能表现&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJdAAGoPWwuf7EPjXUa3PlftE9DVjIMmBZ76I8GhVYyR7nvtGtF9XoAQ/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/em&gt;&lt;/span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; font-weight: 700; line-height: 27.2px; word-wrap: break-word !important;"&gt;CPU表现&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em style="max-width: 100%; box-sizing: border-box; font-weight: 700; line-height: 27.2px; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJ5cGibs1mfwZhzetzD9T1Fkojf1BL9gNv0PSHgQKEY6tLYaZQKgnNRhQ/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/em&gt;&lt;em style="max-width: 100%; box-sizing: border-box; line-height: 27.2px; font-weight: 700; word-wrap: break-word !important;"&gt;磁盘表现&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em style="max-width: 100%; box-sizing: border-box; line-height: 27.2px; font-weight: 700; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJm6NO4n8ia9PTubRFHDe5ciaXPmtnViaVY4L0zwicm4HS1QicVraIcwOfTrg/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/em&gt;&lt;em style="max-width: 100%; box-sizing: border-box; line-height: 27.2px; font-weight: 700; word-wrap: break-word !important;"&gt;网络表现&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em style="max-width: 100%; box-sizing: border-box; line-height: 27.2px; font-weight: 700; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJJicbPGbibMduNfejTMDOib5xkU1ibWSnRTjzTicuSwn8iaP8lPDOJNJTotIw/640?wx_fmt=png"/&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Mon, 16 Jan 2017 16:46:21 +0800</pubDate>
    </item>
    <item>
      <title>Apache Beam：下一代的数据处理标准</title>
      <link>http://www.iwgc.cn/link/4360874</link>
      <description>&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-bottom: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;声明：本文为&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;《程序员》&lt;/a&gt;原创文章，未经允许不得转载，更多精彩文章请&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;订阅2017年《程序员》&lt;/a&gt;。&amp;nbsp;&lt;br/&gt;作者：李呈祥，万达网络科技集团大数据技术专家，Apache Hive Committer，Apache Flink Committer，超过6年的分布式数据处理系统开发经验，有丰富的开源社区工作经验。&amp;nbsp;&lt;br/&gt;责编：郭芮，关注大数据领域，寻求报道或投稿请联系guorui@csdn.net。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Apache Beam（原名Google DataFlow）是Google在2016年2月份贡献给Apache基金会的孵化项目，被认为是继MapReduce、GFS和BigQuery等之后，Google在大数据处理领域对开源社区的又一贡献。Apache Beam的主要目标是统一批处理和流处理的编程范式，为无限、乱序，Web-Scale的数据集处理提供简单灵活、功能丰富以及表达能力十分强大的SDK。Apache Beam项目重点在于数据处理的编程范式和接口定义，并不涉及具体执行引擎的实现。本文主要介绍Apache Beam的编程范式——Beam Model，以及通过Beam SDK如何方便灵活地编写分布式数据处理业务逻辑，希望读者能够通过本文对Apache Beam有初步了解，同时对于分布式数据处理系统如何处理乱序无限数据流的能力有初步认识。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;Apache Beam基本架构&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;随着分布式数据处理不断发展，业界涌现出越来越多的分布式数据处理框架，从最早的Hadoop MapReduce，到Apache Spark、Apache Storm、以及更近的Apache Flink、Apache Apex等。新的分布式处理框架可能带来更高性能，更强大功能，更低延迟等，但用户切换到新分布式处理框架的代价也非常大：需要学习一个新的数据处理框架，并重写所有业务逻辑。解决这个问题的思路包括两部分，首先，需要一个编程范式，能够统一规范分布式数据处理的需求，例如统一批处理和流处理的需求。其次，生成的分布式数据处理任务应该能够在各个分布式引擎上执行，用户可以自由切换执行引擎与执行环境。Apache Beam正是为了解决以上问题而提出的。它主要由Beam SDK和Beam Runner组成，Beam SDK定义了开发分布式数据处理任务业务逻辑的API接口，生成的的分布式数据处理任务Pipeline交给具体的Beam Runner执行引擎。Apache Beam目前支持的API接口由Java语言实现，Python版本的API正在开发之中。它支持的底层执行引擎包括Apache Flink、Apache Spark以及Google Cloud Platform，此外Apache Storm、Apache Hadoop、Apache Gearpump等执行引擎的支持也在讨论或开发中。其基本架构如图1。&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjUVMHMxrKk8sYvZRS5T8krEJc5VByGkzKbZvhvO62hkKzmbrAulUiarD1jzHrH3sufOF6x77P2pCJA/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;图1 Apache Beam架构图&lt;/center&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;br/&gt;&lt;/center&gt;&lt;p&gt;需要注意的是，虽然Apache Beam社区非常希望所有的Beam执行引擎都能够支持Beam SDK定义的功能全集，但在实际实现中可能并不一定。例如，基于MapReduce的Runner显然很难实现和流处理相关的功能特性。目前Google DataFlow Cloud是对Beam SDK功能集支持最全面的执行引擎，在开源执行引擎中，支持最全面的则是Apache Flink。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;Beam Model&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Beam Model指Beam的编程范式，即Beam SDK背后的设计思想。在介绍Beam Model前，先介绍下Beam Model要处理的问题域与基本概念。&lt;/p&gt;&lt;ol style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据&lt;/span&gt;。要处理的数据一般可以分为两类，有限的数据集和无限的数据流。对于前者，比如一个HDFS中的文件，一个HBase表等，特点是数据提前已经存在，一般也已经持久化，不会突然消失。而无限的数据流，比如Kafka中流过来的系统日志流，或是从Twitter API拿到的Twitter流等，这类数据的特点是动态流入，无穷无尽，无法全部持久化。一般来说，批处理框架的设计目标是用来处理有限的数据集，流处理框架的设计目标是用来处理无限的数据流。有限的数据集可以看做无限数据流的一种特例，但是从数据处理逻辑角度，这两者并无不同之处。例如，假设微博数据包含时间戳和转发量，用户希望按照每小时的转发量统计总和，此业务逻辑应该可以同时在有限数据集和无限数据流上执行，并不应该因为数据源的不同而对业务逻辑的实现产生任何影响。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时间&lt;/span&gt;。Process Time是指数据进入分布式处理框架的时间，而Event-Time则是指数据产生的时间。这两个时间通常是不同的，例如，对于一个处理微博数据的流计算任务，一条2016-06-01-12:00:00发表的微博经过网络传输等延迟可能在2016-06-01-12:01:30才进入到流处理系统中。批处理任务通常进行全量的数据计算，较少关注数据的时间属性，但是对于流处理任务来说，由于数据流是无穷无尽的，无法进行全量计算，通常是对某个窗口中的数据进行计算。对于大部分的流处理任务来说，按照时间进行窗口划分，可能是最常见的需求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;乱序&lt;/span&gt;。对于流处理框架的数据流来说，其数据的到达顺序可能并不严格按照Event-Time的时间顺序。如果基于Process Time定义时间窗口，数据到达的顺序就是数据的顺序，因此不存在乱序问题。但对于基于Event Time定义的时间窗口来说，可能存在时间靠前的消息在时间靠后的消息后到达的情况，这在分布式的数据源中可能非常常见。对于这种情况，如何确定迟到数据，以及对于迟到数据如何处理通常是很棘手的问题。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Beam Model处理的目标数据是无限的时间乱序数据流，不考虑时间顺序或是有限的数据集可看做是无限乱序数据流的一个特例。Beam Model从下面四个维度归纳了用户在进行数据处理的时候需要考虑的问题：&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;What。如何对数据进行计算？例如，Sum、Join或是机器学习中训练学习模型等。在Beam SDK中由Pipeline中的操作符指定。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Where。数据在什么范围中计算？例如，基于Process-Time的时间窗口，基于Event-Time的时间窗口、滑动窗口等。在BeamSDK中由Pipeline中的窗口指定。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;When。何时将计算结果输出？例如，在1小时的Event-Time时间窗口中，每隔1分钟，将当前窗口计算结果输出。在Beam SDK中由Pipeline中的Watermark和触发器指定。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;How。迟到数据如何处理？例如，将迟到数据计算增量结果输出，或是将迟到数据计算结果和窗口内数据计算结果合并成全量结果输出。在Beam SDK中由Accumulation指定。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Beam Model将“WWWH”四个维度抽象出来组成了Beam SDK，用户在基于它构建数据处理业务逻辑时，在每一步只需要根据业务需求按照这四个维度调用具体的API即可生成分布式数据处理Pipeline，并提交到具体执行引擎上。“WWWH”四个维度的抽象仅关注业务逻辑本身，和分布式任务如何执行没有任何关系。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;Beam SDK&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;不同于Apache Flink或是Apache Spark，Beam SDK使用同一套API表示数据源、输出目标以及操作符等。下面介绍4个基于Beam SDK的数据处理任务，通过它们，读者可以了解Beam Model是如何统一灵活地描述批处理和流处理任务的，这3个任务用来处理手机游戏领域的统计需求，包括：&lt;/p&gt;&lt;ol style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;用户分数：批处理任务，基于有限数据集统计用户分数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;每小时团队分数：批处理任务，基于有限数据集统计每小时，每个团队的分数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;排行榜：流处理任务，2个统计项，每小时每个团队的分数以及用户实时的历史总得分数。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下面基于Beam Model的“WWWH”四个维度，分析业务逻辑，并通过代码展示如何通过BeamSDK实现“WWWH”四个维度的业务逻辑。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;用户分数&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;统计每个用户的历史总得分数是一个非常简单的任务，在这里我们简单地通过一个批处理任务实现，每次需要新的用户分数数据，重新执行一次这个批处理任务即可。对于用户分数任务，“WWWH”四维度分析结果如下：&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjUVMHMxrKk8sYvZRS5T8krEqrMfL8icPh2zicU0mkgxnJI1ibnUbliceKNtupTszKwqiancN09N5EVGr0Q/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;br/&gt;&lt;/center&gt;&lt;p&gt;通过“WWWH”的分析，对于用户分数这个批处理任务，通过Beam Java SDK实现的代码如下所示：&lt;/p&gt;&lt;p&gt;&lt;code class=" hljs r" style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;gameEvents
[&lt;span&gt;...&lt;/span&gt; input &lt;span&gt;...&lt;/span&gt;]
[&lt;span&gt;...&lt;/span&gt; parse &lt;span&gt;...&lt;/span&gt;]
.apply(&lt;span&gt;"ExtractUserScore"&lt;/span&gt;, new ExtractAndSumScore(&lt;span&gt;"user"&lt;/span&gt;))
[&lt;span&gt;...&lt;/span&gt; output &lt;span&gt;...&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ExtractAndSumScore实现了“What”中描述的逻辑，即按用户分组然后累加分数，其代码如下：&lt;/p&gt;&lt;p&gt;&lt;code class=" hljs coffeescript" style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;gameInfo
.apply(MapElements
. via&lt;span&gt;&lt;span&gt;((GameActionInfo gInfo) -&amp;gt; KV. &lt;span&gt;of&lt;/span&gt;(gInfo.getKey( field ), gInfo.getScore()))&lt;/span&gt;.&lt;span&gt;withOutputType&lt;/span&gt;&lt;span&gt;(
TypeDescriptors. kvs(TypeDescriptors. strings(), TypeDescriptors. integers()))&lt;/span&gt;)
.&lt;span&gt;apply&lt;/span&gt;&lt;span&gt;(Sum.&amp;lt;String&amp;gt; integersPerKey())&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过MapElements确定Key与Value分别是用户与分数，然后Sum定义按key分组，并累加分数。Beam支持将多个对数据的操作合并成一个操作，这样不仅可以支持更清晰的业务逻辑实现，同时也可以在多处重用合并后的操作逻辑。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;每小时团队分数&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;按照小时统计每个团队的分数，获得最高分数的团队可能获得奖励，这个分析任务增加了对窗口的要求，不过我们依然可以通过一个批处理任务实现，该任务的“WWWH”四维度分析如下：&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjUVMHMxrKk8sYvZRS5T8krECFX0qDeNUpZdGnMv9TPRcLWTw3DcGAdmLyu10pryQDpBfkYj9gSe9g/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;br/&gt;&lt;/center&gt;&lt;p&gt;相对于第一个用户分数任务，只是在Where部分回答了“数据在什么范围中计算？”的问题，同时在What部分“如何计算数据？”中，分组的条件由用户改为了团队，这在代码中也会相应体现：&lt;/p&gt;&lt;p&gt;&lt;code class=" hljs r" style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;gameEvents
[&lt;span&gt;...&lt;/span&gt; input &lt;span&gt;...&lt;/span&gt;]
[&lt;span&gt;...&lt;/span&gt; parse &lt;span&gt;...&lt;/span&gt;]
.apply(&lt;span&gt;"AddEventTimestamps"&lt;/span&gt;, WithTimestamps.of((GameActionInfo i)
-&amp;gt; new Instant(i.getTimestamp())))
.apply(&lt;span&gt;"FixedWindowsTeam"&lt;/span&gt;, Window.&amp;lt;GameActionInfo&amp;gt;into(
FixedWindows.of(Duration.standardMinutes(windowDuration))))
.apply(&lt;span&gt;"ExtractTeamScore"&lt;/span&gt;, new ExtractAndSumScore(&lt;span&gt;"team"&lt;/span&gt;))
[&lt;span&gt;...&lt;/span&gt; output &lt;span&gt;...&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;“AddEventTimestamps”定义了如何从原始数据中抽取EventTime数据，“FixedWindowsTeam”则定义了1小时固定窗口，然后重用了ExtractAndSumScore类，只是将分组的列从用户改成了团队。对于每小时团队分数任务，引入了关于“Where”部分窗口定义的新业务逻辑，但是从代码中可以看到，关于“Where”部分的实现和关于“What”部分的实现是完全独立的，用户只需要新加两行关于“Where”的代码，非常简单和清晰。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;排行榜&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;前面两个任务均是基于有限数据集的批处理任务，对于排行榜来说，我们同样需要统计用户分数以及每小时团队分数，但是从业务角度希望得到的是实时数据。对于Apache Beam来说，一个相同处理逻辑的批处理任务和流处理任务的唯一不同就是任务的输入和输出，中间的业务逻辑Pipeline无需任何改变。对于当前示例的排行榜数据分析任务，我们不仅希望他们满足和前两个示例相同的业务逻辑，同时也可以满足更定制化的业务需求，例如：&lt;/p&gt;&lt;ol style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;流处理任务相对于批处理任务，一个非常重要的特性是，流处理任务可以更加实时地返回计算结果，例如计算每小时团队分数时，对于一小时的时间窗口，默认是在一小时的数据全部到达后，把最终的计算结果输出，但是流处理系统应该同时支持在一小时窗口只有部分数据到达时，就将部分计算结果输出，从而使得用户可以得到实时的分析结果。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;保证和批处理任务一致的计算结果正确性。由于乱序数据的存在，对于某一个计算窗口，如何确定所有数据是否到达（Watermark）？迟到数据如何处理？处理结果如何输出、总量、增量、并列？流处理系统应该提供机制保证用户可以在满足低延迟性能的同时达到最终的计算结果正确性。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;上述两个问题正是通过回答“When”和“How”两个问题来定义用户的数据分析需求。“When”取决于用户希望多久得到计算结果，在回答“When”的时候，基本上可以分为四个阶段：&lt;/p&gt;&lt;ol style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;Early。在窗口结束前，确定何时输出中间状态数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;On-Time。在窗口结束时，输出窗口数据计算结果。由于乱序数据的存在，如何判断窗口结束可能是用户根据额外的知识预估的，且允许在用户设定的窗口结束后出现迟到的属于该窗口的数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Late。在窗口结束后，有迟到的数据到达，在这个阶段，何时输出计算结果。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Final。能够容忍迟到的最大限度，例如1小时。到达最后的等待时间后，输出最终的计算结果，同时不再接受之后的迟到数据，清理该窗口的状态数据。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;对于每小时团队得分的流处理任务，本示例希望的业务逻辑为，基于Event Time的1小时时间窗口，按团队计算分数，在一小时窗口内，每5分钟输出一次当前的团队分数，对于迟到的数据，每10分钟输出一次当前的团队分数，在窗口结束2小时后迟到的数据一般不可能会出现，假如出现的话，直接抛弃。“WWWH”表达如下：&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjUVMHMxrKk8sYvZRS5T8krEMePLiaqTf3TqCbJQpibRakSLWnYMHdVUV4cWdameQ2zwLMo90LUwicpYQ/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在基于Beam SDK的实现中，用户基于“WWWH” Beam Model表示的业务逻辑可以独立直接地实现：&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=" hljs r" style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;gameEvents
[&lt;span&gt;...&lt;/span&gt; input &lt;span&gt;...&lt;/span&gt;]
.apply(&lt;span&gt;"LeaderboardTeamFixedWindows"&lt;/span&gt;, Window
.&amp;lt;GameActionInfo&amp;gt;into(FixedWindows.of(
Duration.standardMinutes(Durations.minutes(&lt;span&gt;60&lt;/span&gt;))))
.triggering(AfterWatermark.pastEndOfWindow()
.withEarlyFirings(AfterProcessingTime.pastFirstElementInPane()
.plusDelayOf(Durations.minutes(&lt;span&gt;5&lt;/span&gt;)))
.withLateFirings(AfterProcessingTime.pastFirstElementInPane()
.plusDelayOf(Durations.minutes(&lt;span&gt;10&lt;/span&gt;))))
.withAllowedLateness(Duration.standardMinutes(&lt;span&gt;120&lt;/span&gt;)
.accumulatingFiredPanes())
.apply(&lt;span&gt;"ExtractTeamScore"&lt;/span&gt;, new ExtractAndSumScore(&lt;span&gt;"team"&lt;/span&gt;))
[&lt;span&gt;...&lt;/span&gt; output &lt;span&gt;...&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LeaderboardTeamFixedWindows对应“Where”定义窗口，Trigger对应“Where”定义结果输出条件，Accumulation对应“How”定义输出结果内容，ExtractTeamScore对应“What”定义计算逻辑。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Apache Beam的Beam Model对无限乱序数据流的数据处理进行了非常优雅的抽象，“WWWH”四个维度对数据处理的描述，十分清晰与合理，Beam Model在统一了对无限数据流和有限数据集的处理模式的同时，也明确了对无限数据流的数据处理方式的编程范式，扩大了流处理系统可应用的业务范围。Apache Flink、Apache Spark Streaming等项目的API设计均越来越多地借鉴或参考了Apache Beam Model，且作为Beam Runner的实现，与Beam SDK的兼容度也越来越高。此外，由于Apache Beam已经进入Apache Incubator孵化，读者也可以通过官网或是邮件组了解更多Apache Beam的进展和状态。&lt;/p&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; margin-bottom: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;美国时间1月10日，Apache软件基金会对外宣布，万众期待的 Apache Beam 在经历了近一年的孵化之后终于毕业。这一顶级 Apache开源项目终于成熟。&lt;/p&gt;&lt;/blockquote&gt;&lt;hr style=" box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;想了解更多大数据相关资讯？立即扫码关注吧。&lt;/span&gt;&lt;/p&gt;&lt;center style="box-sizing: border-box; color: rgb(51, 51, 51);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/center&gt;</description>
      <pubDate>Mon, 16 Jan 2017 16:46:21 +0800</pubDate>
    </item>
    <item>
      <title>机器学习算法线上部署方法</title>
      <link>http://www.iwgc.cn/link/4360875</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;本文由携程技术中心投递，ID：ctriptech。作者：潘鹏举，携程酒店研发BI经理，负责酒店服务相关的业务建模工作，主要研究方向是用机器学习实现业务流程自动化、系统智能化、效率最优化，专注于算法实践和应用。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;我们经常会碰到一个问题：用了复杂的GBDT或者xgboost大大提升了模型效果，可是在上线的时候又犯难了，工程师说这个模型太复杂了，我没法上线，满足不了工程的要求，你帮我转换成LR吧，直接套用一个公式就好了，速度飞速，肯定满足工程要求。这个时候你又屁颠屁颠用回了LR，重新训练了一下模型，心里默骂千百遍：工程能力真弱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这些疑问，我们以前碰到过，通过不断的摸索，试验出了不同的复杂机器学习的上线方法，来满足不同场景的需求。在这里把实践经验整理分享，希望对大家有所帮助。（我们的实践经验更多是倾向于业务模型的上线流程，广告和推荐级别的部署请自行绕道）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先在训练模型的工具上，一般三个模型训练工具，Spark、R、Python。这三种工具各有千秋，以后有时间，我写一下三种工具的使用心得。针对不同的模型使用场景，为了满足不同的线上应用的要求，会用不同的上线方法。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一、总结来说，大体会区分这三种场景，请大家对号入座，酌情使用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;如果是实时的、小数据量的预测应用，则采用的SOA调用Rserve或者python-httpserve来进行应用；这种应用方式有个缺点是需要启用服务来进行预测，也就是需要跨环境，从Java跨到R或者Python环境。对于性能，基本上我们用Rserver方式，针对一次1000条或者更少请求的预测，可以控制95%的结果在100ms内返回结果，100ms可以满足工程上的实践要求。更大的数据量，比如10000/次，100000/次的预测，我们目前评估下来满足不了100ms的要求，建议分批进行调用或者采用多线程请求的方式来实现。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;如果是实时、大数据量的预测应用，则会采用SOA，训练好的模型转换成PMML（关于如何转换，我在下面会详细描述），然后把模型封装成一个类，用Java调用这个类来预测。用这种方式的好处是SOA不依赖于任何环境，任何计算和开销都是在Java内部里面消耗掉了，所以这种工程级别应用速度很快、很稳定。用此种方法也是要提供两个东西，模型文件和预测主类；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;如果是Offline（离线）预测的，D+1天的预测，则可以不用考虑第1、2中方式，可以简单的使用Rscript x.R或者python x.py的方式来进行预测。使用这种方式需要一个调度工具，如果公司没有统一的调度工具，你用shell的crontab做定时调用就可以了。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;以上三种做法，都会用SOA里面进行数据处理和变换，只有部分变换会在提供的Function或者类进行处理，一般性都建议在SOA里面处理好，否则性能会变慢。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;大概场景罗列完毕，简要介绍一下各不同工具的线上应用的实现方式。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;二、如何转换PMML，并封装PMML&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;大部分模型都可以用PMML的方式实现，PMML的使用方法调用范例见：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;jpmml的说明文档：GitHub - jpmml/jpmml-evaluator: Java Evaluator API for PMML；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Java调用PMML的范例（PPJUtils/java/pmml at master · pjpan/PPJUtils · GitHub），此案例是我们的工程师写的范例，大家可以根据此案例进行修改即可；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Jpmml支持的转换语言，主流的机器学习语言都支持了，深度学习类除外；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;从下图可以看到，它支持R、python和spark、xgboost等模型的转换，用起来非常方便。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJN0DKjKhwoZOVnJlLFyW0TPFhu5icKJY9E5tMa0u1YAsddepGvCz60Rw/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;三、接下来说一下各个算法工具的工程实践&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1.python模型上线：我们目前使用了模型转换成PMML上线方法。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;python-sklearn里面的模型都支持，也支持xgboost，并且PCA，归一化可以封装成preprocess转换成PMML，所以调用起来很方便；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;特别需要注意的是：缺失值的处理会影响到预测结果，大家可以可以看一下；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用PMML方式预测，模型预测一条记录速度是1ms，可以用这个预测来预估一下根据你的数据量，整体的速度有多少。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2.R模型上线-这块我们用的多，可以用R model转换PMML的方式来实现。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这里我介绍另一种的上线方式：Rserve。具体实现方式是：用SOA调用Rserve的方式去实现，我们会在服务器上部署好R环境和安装好Rserve，然后用JAVA写好SOA接口，调用Rserve来进行预测；&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;Java调用Rserve方式见网页链接：Rserve - Binary R server；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;centos的Rserve搭建方法见：centos -Rserve的搭建，这里详细描述了Rserve的搭建方式。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Rserve方式可以批量预测，跟PMML的单个预测方式相比，在少数据量的时候，PMML速度更快，但是如果是1000一次一批的效率上看，Rserve的方式会更快；用Rserve上线的文件只需要提供两个：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;模型结果文件（XX.Rdata）；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;预测函数（Pred.R）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Rserve_1启动把模型结果(XX.Rdata)常驻内存。预测需要的输入Feature都在Java里定义好不同的变量，然后你用Java访问Rserve_1，调用Pred.R进行预测，获取返回的List应用在线上。最后把相关的输入输出存成log进行数据核对。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;code class="" style=" max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;Pred&lt;/span&gt;.&lt;span&gt;R&lt;/span&gt; &amp;lt;- function(x1,x2,x3){&lt;span&gt;&lt;span&gt;data&lt;/span&gt; &amp;lt;- cbind&lt;span&gt;(&lt;span&gt;x1&lt;/span&gt;,&lt;span&gt;x2&lt;/span&gt;,&lt;span&gt;x3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;# feature engineering&lt;/span&gt;&lt;span&gt;score&lt;/span&gt; &amp;lt;- predict(modelname, &lt;span&gt;&lt;span&gt;data&lt;/span&gt;, &lt;span&gt;type&lt;/span&gt; = 'prob')&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;(list(score))
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;3.Spark模型上线-好处是脱离了环境，速度快。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Spark模型的上线就相对简单一些，我们用scala训练好模型（一般性我们都用xgboost训练模型）然后写一个Java Class，直接在JAVA中先获取数据，数据处理，把处理好的数据存成一个数组，然后调用模型Class进行预测。模型文件也会提前load在内存里面，存在一个进程里面，然后我们去调用这个进程来进行预测。所以速度蛮快的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;Spark模型上线，放在spark集群，不脱离spark环境，方便，需要自己打jar包；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们这里目前还没有尝试过，有一篇博客写到了如果把spark模型导出PMML,然后提交到spark集群上来调用，大家可以参考一下：Spark加载PMML进行预测。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;四、只用Linux的Shell来调度模型的实现方法—简单粗暴&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;因为有些算法工程师想快速迭代，把模型模拟线上线看一下效果，所以针对离线预测的模型形式，还有一种最简单粗暴的方法，这种方法开发快速方便，具体做法如下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;写一下R的预测脚本，比如predict.R，是你的主预测的模型；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;然后用shell封装成xx.sh，比如predict.sh，shell里面调用模型，存储数据；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;predict.sh的写法如下：&lt;/p&gt;&lt;p&gt;&lt;code class="" style=" max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;# 数据导出&lt;/span&gt;data_filename = xxx
file_date = xxx
result = xxx
updatedt = xxx&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; path
hive &lt;span&gt;-e&lt;/span&gt; &lt;span&gt;"USE tmp_xxxdb;SELECT * FROM db.table1;"&lt;/span&gt; &amp;gt; &lt;span&gt;${data_filname}&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;# R脚本预测&lt;br/&gt;&lt;/span&gt;Rscript path/predict.R &amp;nbsp;&lt;span&gt;$file_date&lt;br/&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ $? &lt;span&gt;-ne&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; ]&lt;br/&gt;&lt;span&gt;then&lt;/span&gt; &lt;br/&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;"Running RScript Failure"&lt;br/&gt;&lt;/span&gt;&lt;span&gt;fi&lt;br/&gt;&lt;/span&gt;&lt;span&gt;# R预测的结果导入Hive表&lt;br/&gt;&lt;/span&gt;list1=&lt;span&gt;"use tmp_htlbidb;
load data local inpath 'path/&lt;span&gt;$result&lt;/span&gt;'
overwrite into table table2 partition(dt='&lt;span&gt;${updatedt}&lt;/span&gt;');"&lt;/span&gt;&lt;br/&gt;hive &lt;span&gt;-e&lt;/span&gt; &lt;span&gt;"&lt;span&gt;$list1&lt;/span&gt;"&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;最后用Crontab来进行调度，很简单，如何设置crontab，度娘一下就好了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code class="" style=" max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&amp;gt;crontab -e
-------------------------&lt;/span&gt;### 每天5点进行预测模型；
0 5 * * * sh predict.sh&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;五、说完了部署上线，说一下模型数据流转的注意事项&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;区分offline和realtime数据，不管哪种数据，我们根据key和不同的更新频次，把数据放在redis里面去，设置不同的key和不同的过期时间；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;大部分redis数据都会存放两个批次的数据，用来预防无法取到最新的数据，则用上一批次的数据来进行填充；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;针对offline数据，用调度工具做好依赖，每天跑数据，并生成信号文件让redis来进行读取；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;针对realtime数据，我们区分两种类型，一种是历史+实时，比如最近30天的累计订单量，则我们会做两步，第一部分是D+1之前的数据，存成A表，今天产生的实时数据，存储B表，A和B表表结构相同，时效性不同；我们分别把A表和B表的数据放在Redis上去，然后在SOA里面对这两部分数据实时进行计算；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;模型的输入输出数据进行埋点，进行数据跟踪，一是用来校验数据，二来是用来监控API接口的稳定性，一般性我们会用ES来进行log的查看和性能方面的监控；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;任何接口都需要有容灾机制，如果接口超时，前端需要进行容灾，立即放弃接口调用数据，返回一个默认安全的数值，这点对于工程上非常重要。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;以上就是我们在模型部署的经验分享，欢迎大家来找我一起探讨相关工程上的最佳实践。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Mon, 16 Jan 2017 16:46:21 +0800</pubDate>
    </item>
    <item>
      <title>2017年，你需要GET的9大技术领域</title>
      <link>http://www.iwgc.cn/link/4325086</link>
      <description>&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;文中蓝色字体可点击底部的【阅读原文】获取链接。&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2016年过去了，然而我一点也不怀念它，因为2017年的技术趋势更加吸引人。回顾一年里业界的发展，2017年的技术趋势初现端倪。根据CSDN知识库这一年来大家关注的热门知识图谱，我们来给大家梳理一下2017年值得关注的技术方向。&lt;/p&gt;&lt;h4 style=" margin-top: 20px; margin-bottom: 10px; font-size: 18px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); text-decoration: underline; max-width: 100%; box-sizing: border-box; font-size: 16px; word-wrap: break-word !important; background-color: transparent;"&gt;&lt;strong&gt;&lt;span&gt;人工智能&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;span&gt;与&lt;/span&gt;&lt;/strong&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); text-decoration: underline; max-width: 100%; box-sizing: border-box; font-size: 16px; word-wrap: break-word !important; background-color: transparent;"&gt;&lt;strong&gt;&lt;span&gt;机器学习&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;元旦刚过，阿法狗就以60胜0负1平的成绩一骑绝尘，横扫了围棋界高手。一时间，“AI将取代人类”的惊呼声再次响起。其实，这种悲观想法真的多余。人工智能在未来更多的，还是帮助我们的生活更加便捷轻松。未来，可能一个AI就是一个超级App，可以帮我们专门解决一个类生活问题。&lt;/p&gt;&lt;p&gt;现在很多巨头都在布局AI领域。Google就不必说了，它在人工智能领域的尝试非常广泛，除了阿法狗，还有自动驾驶、语音助理、智能家居等。Facebook已经收购了8个机器人公司和1个机器学习公司，并在许多新的业务中使用了人工智能技术。IBM斥资10亿美元成立的Watson项目包括了语音、语言理解、图像识别和情绪分析等能力，已经与一些汽车企业和医疗机构开始展开合作。而在国内，小米CEO雷军在近期的年会上也宣布人工智能是2017年的重点发展领域。&lt;/p&gt;&lt;p&gt;提到人工智能，就一定离不开机器学习。机器学习中比较火的一个主题——深度学习，已经在人脸识别、图像识别、语音识别，自然语言理解NLP技术、大数据挖掘技术、无人驾驶技术等领域获得了应用。Open AI研究科学家Durk Kingma&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;预测&lt;/a&gt;，未来3年，DNN、反向传播、SGD仍将是主要的技术。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuuJicUzjtQbDkTEhUo4Via0fh1fbwAsFIFbqiaiaTeNyv5jecg0bTUo0SnA/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; line-height: 27.2px; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多人工智能知识点&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; line-height: 27.2px; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多机器学习知识点&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); text-decoration: underline; max-width: 100%; box-sizing: border-box; line-height: 1.1; word-wrap: break-word !important; background-color: transparent;"&gt;&lt;strong&gt;&lt;span&gt;微信开发&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2017年开年，筹备一年的小程序正式发布，引发了行业不小的地震，其带来的应用程序存在方式与现有App模式大有不同，掀起了技术热潮。无需安装用完即走的“触手可及”概念、多种接入方式等便捷的特点可以预见第三方小程序的市场巨大，微信也成为连接PaaS和SaaS的平台。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFunpic7iafiaicDZ6oPWPR2kRT2fhLzsmia9JMvGUF7u7oOibyEiaLmBWKznSdA/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;CSDN社区集合CSDN知识库、CSDN学院、CSDN博客、CSDN下载，从知识图谱、在线公开课，到系列博客与案例源码，全方位为大家梳理了一篇关于微信小程序开发的&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;技术干货&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多微信开发知识点&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; line-height: 1.1; word-wrap: break-word !important; background-color: transparent;"&gt;直播技术&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;直播在去年的热门程度堪比前两年的VR。然而两者面对的竞争点也很相似。最初局限于游戏直播和聊天的直播技术，也在泛娱乐、教育、VR等领域生根开花，直播逐渐从一个独立的产品，慢慢成为各领域产品中的一个标配功能。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuaicqu2gtZoIQOYekQ4kpYAqtl1Z1WicVTYvLSN6bTAgkZkcibRJfPaSDQ/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;VR直播也是一个非常热门的应用场景。年底，王菲的演唱会支持网络直播+VR直播，算过国内第一个吃螃蟹的。而在美国，2016年获得6000万美元B轮融资的NextVR已经开始直播了NBA比赛和美国民主党总统候选人辩论。&lt;/p&gt;&lt;p&gt;另一方面，教育直播由于国内雾霾问题被各个学校提上了日程，很多学生在家通过网络直播来上课。姑且算是应了“天时”吧。在教育领域，有几家直播技术服务商已经耕耘多年，通过自建CDN保证直播质量，通过教学白板、课件分享等功能，不断提升着交互体验。目前很多支持直播课堂的教育机构都采用了他们的服务。&lt;/p&gt;&lt;p&gt;直播行业在今年会出现更加激烈的竞争，不仅仅是在内容层面，更多也会在技术上出现更多提升与创新。&lt;/p&gt;&lt;p&gt;直播看似效果相似，但在不同领域需要解决的问题却不同。根据特邀专家与用户梳理的&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;直播技术知识库&lt;/a&gt;显示，在教育领域的直播，在技术上要求有稳定的内容分发网络，以及符合教育场景的拓展功能；游戏直播对网络要求高，更重要的是解决好编解码。另外，还有一些直播产品需要搞定多视频无缝切换、多人连麦等功能。另外，还有许多值得关注的技术点，比如基础的流媒体协议、开源项目、系统架构、CDN、交互技术等。&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击访问直播技术知识图谱&lt;/a&gt;&lt;/p&gt;&lt;h4 style=" margin-top: 20px; margin-bottom: 10px; font-size: 18px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); text-decoration: underline; max-width: 100%; box-sizing: border-box; font-size: 16px; word-wrap: break-word !important; background-color: transparent;"&gt;&lt;strong&gt;&lt;span&gt;大数据&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;“数据即价值、数据指引未来”，这已经是大家对大数据领域的共识。数据背后蕴藏的力量体现在基于数据驱动精细化运营，数据驱动的Growth Hacking等概念和方法论在国内也越来越普及。从事数据的企业主要主要有两大阵营：数据技术为核心，为企业提供定制化解决方案，如数据分析、云Saas业务等；围绕数据库和数据仓储业务，利用在硬件方面以及传统IT基础建设的优势冲击大数据领域，如数据中心建设，数据存储计算业务等。&lt;/span&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuTxkZRxPHJZq1KdDZVsbD4boDFOULTztAbGNibiadYzOY2laRdqE0uUcA/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;有分析认为， 2017年将会出现更多的基于大数据研究的应用项目，大家关注的焦点也会继续围绕如何将大数据业务化、商用化。&amp;nbsp;&lt;br/&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多云计算大数据技术知识点&lt;/a&gt;&lt;/p&gt;&lt;h4 style=" margin-top: 20px; margin-bottom: 10px; font-size: 18px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;微服务&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;微服务架构作为一种特定的软件应用程序设计方式，被业界公认为云计算时代互联网应用的主要构建方式，可将大型软件拆分为多个独立可部署服务组合而成的套件方案，其中各项服务都拥有自己的进程并利用轻量化机制（通常为HTTP源API）实现通信。“简单就是硬道理”也是微服务能够流行的原因。&amp;nbsp;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuEm4kmKjbeVvhvYsMJm6GvjyyLjuKAIb65g9iaTkC4ybueenINZhfBTw/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;最早从Netflix、Amazon等公司实践，因其高度的弹性、灵活性和效率的巨大提升，快速受到各领域架构师和技术决策者的关注，成为2016年IT领域最受关注的技术潮流之一。在过去一年中，各行各业逐步将微服务这一设计理念应用于核心系统中，也引发更多关于微服务在提高系统效率以及满足业务需求方面的的贡献与冲突的讨论。&amp;nbsp;&lt;br/&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多微服务知识点&lt;/a&gt;&lt;/p&gt;&lt;h4 style=" margin-top: 20px; margin-bottom: 10px; font-size: 18px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;虚拟现实&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;相比2016年初市场对“VR浪潮”的热炒，人们去年下半年对待VR反而“冷静”了许多。根据&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;Superdata&lt;/a&gt;发布的数据报告，尽管在2016年各大VR设备厂商的销量并没有达到年初预期，但整体还是呈增长趋势。在内容方面，Steam上排名前100的VR内容已经累计用友750万用户，用户量最多的是《The Lab》，达到了44万。根据高盛的&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;报告分析&lt;/a&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuh5On9lUVaRKrlkkArGUk7gJcDKh3eeLPOic3NlvMd4nD08fN3BnQS8A/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;在去年10月的Oculus Connect大会上，Oculus首席科学家Michael Abrash表示，未来将实现单眼4K、140度FOV、注视点渲染技术、空间音效，以及更自然的控制交互。在今年的CES上，Intel与Qualcomm均将VR解决方案作为参展的重点之一。在内容开发方面，不仅包括Oculus、Sony、HTC在内的公司在不断优化SDK，Unity、Ureal也在为VR做出相应优化。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击访问虚拟现实知识图谱&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; line-height: 1.1; word-wrap: break-word !important; background-color: transparent;"&gt;区块链&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;2016年FinTech概念愈发火热，而区块链又是其中最火的话题，政策扶持、资本热捧、各巨头纷纷高呼。资本版图数据显示，两年前区块链就是美国创投中融资最高的版块，突破10亿元。投行、金融巨头从最初的观望到逐步拥抱，开始尝试实践落地；BAT等互联网巨头，也纷纷布局金融科技，加大技术团队投入，扩展金融科技实力以求进一步拓展业务疆土。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuChVTkJsxGI8PzJIib0ySUAcVeQxSj2iclFkqpAWrMiaUuhPAA5KLdscEg/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;2016年工信部发布《中国区块链技术和应用发展白皮书》，国务院印发的《“十三五”国家信息化规划》中特别提到国家布局重点，区块链也位列其中，但目前区块链领域技术通用标准还未建立，这方面在2017年也将逐步完善。&amp;nbsp;&lt;br/&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多区块链知识点&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); text-decoration: underline; max-width: 100%; box-sizing: border-box; line-height: 27.2px; word-wrap: break-word !important; background-color: transparent;"&gt;&lt;strong&gt;嵌入式开发&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;以上提到了很多业界热门的趋势，人工智能、虚拟现实、直播，这些热门行业背后除了有软件技术的支撑，也离不开硬件技术的加持。嵌入式开发或许没有VR、直播、自动驾驶、无人机听上去那么炫，但缺少了背后的嵌入式工程师，这些都是纸上谈兵。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuOfbOA6Mibn2pic31E4yWmVPATDh9zibAswu95xMt0GqhZ9F354NndIJ6w/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;2017年我们将会看到更多由各大厂商提供的硬件开发工具和软件包支持。我们已经可以看到的是DeltaOS的Limda编译环境，Vxworks提供了Tonado开发环境，Windows CE也推Embedded VC++。&lt;/p&gt;&lt;p&gt;同时，由于智能设备、联网设备的兴起，嵌入式设计更多地开始考虑网络化和信息化。嵌入式处理器开始增加一些功能接口。新一代的嵌入式处理器已经开始内嵌网络接口，除支持TCP/IP协议，还有的支持IEEE1394、USB、CAN、蓝牙等。&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多嵌入式开发知识点&lt;/a&gt;&lt;/p&gt;&lt;h4 style=" margin-top: 20px; margin-bottom: 10px; font-size: 18px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;敏捷开发&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;敏捷是以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发、管理。它是针对传统的瀑布开发模式的弊端而产生的一种新的模式，目标是提高生产效率和响应能力。敏捷在过去一年中成为软件开发领域热度靠前的一词，其被奉为软件开发制胜之道。当研发团队发展到一定阶段，越来越多的团队以求用敏捷开发模式来实施研发管理，进而能达到高效迭代、保障高质量软件产品等目的，最终实现为企业谋取更大的收益。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFu3PDP8R3jk5Pydtrt3WkUX26LT4CgUSVm9gibtVZVW8BVpgxBXsZib5tQ/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;2016年关于持续集成、DevOps、测试驱动开发等相关讨论越来越多，很多互联网巨头公司在研发团队中设置敏捷教练、Scrum Master。由于直观易用的特性，Scrum和看板逐渐成为软件研发管理两股风潮。&amp;nbsp;&lt;br/&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多敏捷知识点&lt;/a&gt;&lt;/p&gt;&lt;p&gt;配图来源：&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;freepik&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 13 Jan 2017 17:12:34 +0800</pubDate>
    </item>
    <item>
      <title>展望 IoT 市场：机器学习能力定生死</title>
      <link>http://www.iwgc.cn/link/4325087</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;&amp;nbsp;Jacques Touillon，AirBoxLab 首席执行官，智能空气质量监控器 Foobot 的开发者。&amp;nbsp;&lt;br/&gt;&lt;span&gt;译者：&lt;/span&gt;&amp;nbsp;张新慧&amp;nbsp;&lt;br/&gt;&lt;span&gt;审校：&lt;/span&gt;&amp;nbsp;屠敏，关注 IoT 领域，寻求报道或者投稿请发邮件&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;tumin@csdn.net&lt;/a&gt;，技术之路，我们共同进步。&lt;/p&gt;&lt;/blockquote&gt;&lt;hr style=" margin-top: 20px; margin-bottom: 20px; max-width: 100%; box-sizing: content-box; font-size: 16px; white-space: normal; widows: 1; height: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;机器哪怕价值上亿，也无法替代医生来治病救人；但一个25美元的可穿戴设备却知道你什么时候该去看医生。&lt;/p&gt;&lt;p&gt;1996 年，美国芝加哥的库克郡医院急诊室采用了一种算法来判断出现胸痛症状的患者中，哪些面临更高的心脏病发作风险，是否在医院床位紧缺的情况下有住院的充分理由。该算法严格按照流程执行系统的基础测试，被证明不但快速高效，且及其精准。相比单纯依赖医生的判断，该算法判定的低风险患者数量多了 70%，而高风险患者数量则达到实际数量的 95%（医生判断仅为 75-89%）。这真是让人惊叹——要知道那个年代，深度运算还未问世呢。&lt;/p&gt;&lt;p&gt;想象当前，仅今年在使用的&amp;nbsp;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;IoT 设备就几近 64 亿个&lt;/a&gt;——全球平均每人一台。这么庞大的数量，哪怕只有 1% 能通过脉搏、饮食和睡眠数据来判断用户健康状况的话，那么全球能够及时治疗的患者数量会是之前的 5 倍。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuPAwxtKO3RVhcsicLCRdEJskjNGMJ9rbbtIB7p0U43DGPtV2QxhyuMIQ/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;但真正了不起的还是机器学习能力，它不止广泛应用算法那么简单，而是通过收集的大量数据，觉察出拥有几十年从医经验者都难以发现的症状。想象一下， Fitbit（美国健康追踪器品牌）觉察到用户脉搏异常，显示出强烈的心脏发病征兆，于是提醒用户及时就医。机器学习就意味着居家用品也能解决“不可能解决”的问题。&lt;/p&gt;&lt;p&gt;IBM 的“沃森(Watson)”和 Google 的“深度思维(DeepMind)”在诸多领域（如 Jeopardy 智力问答和围棋）表现超过人类后，机器学习就不再是一个愿景了。现在要问的是：如果 Fitbit 能救命，而 Nike+ Fuel Band 运动追踪器不能救命，你会购买哪一个呢？&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;“smart（智慧、智能）”的真正价值&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;“智能”产品层出不穷，也难怪名列前茅的总是那些具备学习能力的。拿 Nest 智能恒温器举例，消费者愿意掏腰包并非因为 Nest 是手机可操控的，而是因为没人在家时可以节能——Nest 以智慧的方式解决了长久存在的问题，既能根据用户所需调整温度，没人在家时又能节能，这比一个简单的定时器高明多了。&lt;/p&gt;&lt;p&gt;遗憾的是，大部分制造商太急功近利。拿 Phillips 的 HUE 无线 LED 灯举例，其外观固然惹人喜爱，但仅仅因为可手机操控开关就贴上“smart（智慧、智能）”的标签难免牵强。开关灯不是个问题，不需要解决——难道你轻易因为一个人会开关灯就称其“smart”吗？那么为什么换做一个灯泡，就心安理得贴上“smart”一词呢？&lt;/p&gt;&lt;p&gt;很多 IoT 产品并不是真正“smart”，这也成了 IoT 市场发展的阻碍。能够远程控制的门锁，还有主人一进家门就自动打开的收音机充其量只是奢侈品，跟米其林大餐和豪华游轮这些只能富人消费的起的东西没什么两样。&lt;/p&gt;&lt;p&gt;机器学习能力将“渴求”转换为“必备”，比如既让你温暖过冬又节省电费的恒温器；比如给予睡眠或健身意见的可穿戴设备；比如在恶果酿成前就察觉污染、追踪来源的环境监视器……&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;机器学习能力：永远的胜者标杆&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;“会学习”的设备总是出类拔萃，更具吸引力。但机器学习能力本身则意味着在众多竞争者之中，长久地保持领先优势。&lt;/p&gt;&lt;p&gt;云技术让设备会“学习”，所以机器学习能力不再是设计问题（只要设备能联网），不再是硬件问题（复杂的数据处理可以远程实现），更像是人才问题——有能力的工程师少之又少，不过只要薪资够高，这也不是问题。可能将其形容为数据问题是最为贴切的。&lt;/p&gt;&lt;p&gt;要让计算机老老实实学习数据模式(patterns)，需提供大量数据集。计算机要考虑用户偏好、使用案例、环境等诸多因素，而很多，甚至绝大多数因素都是时间相关的——使用频率、行为频率、条件发生频率、用户行为逐渐改变、环境的季节变化以及传感器寿命期内的数据精确性等。&lt;/p&gt;&lt;p&gt;人人都在争分夺秒，而时间是公平的。即便拥有上亿台优质的联网设备，数不清的用户和资金也无法缩小与竞争者之间哪怕仅有 6 个月的差距。而坐拥优质数据则是对手无法超越的强大优势，这就要看数据读取的精确度、设备众多功能，包括早先开发并最终稳定下来的功能。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;IoT 市场是大家的市场&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;现在的行情，好像只有 IBM 和 Google 才能时不时拿出像样的，“会学习”的产品来，难道只有大玩家才能玩转，小公司没资本吗？当然不是。&lt;/p&gt;&lt;p&gt;一些创业公司无法处理复杂数据，可以外包啊。正如刚刚所说，云技术已经实现远程处理数据了，创业公司只要按每小时付费，就可“租用”高级设备——这投资有理有据，成本不高，省事省力省心。&lt;/p&gt;&lt;p&gt;更重要的市，“会学习”的设备硬件要求不是很高，不一定开发的第一批设备就要具备机器学习能力，刚起步的公司设计和组装都够忙的，别给自己添太多麻烦。&lt;/p&gt;&lt;p&gt;其实当初 Nest 也饶了很多弯路；可手机操控的恒温器通过简单算法来评估房子升温所需时间。算法并没有去了解住户的需求，但是升级只需要新的数据包，而不是装着新产品的新包裹——添加机器学习能力没必要非得投入重金（当然得赶在竞争者之前，越早开始，成本越小）。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;专业，可以无处不在&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;把机器学习能力看作知足常乐的创业公司的坟墓，想想挺可怕。但我们有更多理由去选择乐观，而不是恐惧。“会学习”能够增加的价值超出想象——手上戴的不仅仅是健康腕带，还是医生；门上装的不仅仅是智能门锁，还是侦探；家里用的不仅仅是环境监控器，还是健康卫士；花钱买的不仅仅是豪华设备，还是男管家。&lt;/p&gt;&lt;p&gt;“会学习”智能设备不再急功近利，而是变得更为强大。一些机器学习能力的早期开拓者，如 Nest 和 Echoes，已脱颖而出，让我们的生活更有价值。其他科技公司纷纷效仿之时，世界将是另一番模样。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 13 Jan 2017 17:12:34 +0800</pubDate>
    </item>
    <item>
      <title>“鲜点”资讯：Doug Cutting寄语2017，AWS和VMware“双赢”联盟</title>
      <link>http://www.iwgc.cn/link/4325088</link>
      <description>&lt;p&gt;&lt;span&gt;“鲜点”资讯网罗新鲜要闻，每日为你呈现&lt;/span&gt;&lt;span&gt;大数据和云计算领域&lt;/span&gt;&lt;span&gt;热点新闻。本次内容播报如下&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;文中所有蓝色字体可点击底部的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;获取详情链接&lt;/span&gt;&lt;span&gt;）：&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;Hadoop创始人Doug Cutting寄语2017：五种让开源项目成功的方法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在未来的几年内，开源生态系统将继续扩大，也会不断地在有实际意义的项目里实施。它汇聚了今天最聪明的头脑，在通力合作下，以十年前不可能的速度推进软件开发。如果你想改善现有技术，或者想支持打破传统的观念，可以加入这里。Doug鼓励每个人都有兴趣参与进来，也鼓励经验丰富的人因为这个原因继续坚持下去。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;阿里云国际化再布局 将为马来西亚学校提供云服务&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;阿里云宣布推出面向教育行业的解决方案EduCloud，并与数字媒体公司Conversant和在线教育服务提供商Prestariang Berhad达成合作，以云计算大数据技术为基础向马来西亚学校提供校园管理、教学、娱乐、移动支付等服务。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;年度盘点 | 2016年中国云计算十大新闻&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;刚刚离去的2016，有太多值得我们思考与感悟，回顾过去的2016，是为了开启更好的2017。为此，中国软件网针对移动办公、CRM、HR、云计算、大数据、信息安全等细分领域以及软件园区2016年的发展状况，整理出了2016年度十大新闻和2016年度十大产品，并对未来发展做了趋势预测。今天我们要盘点的是云计算领域。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2019年云计算市场规模将达5706.4亿 PAAS成为决胜一环&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;云计算服务市场由云计算数据中心基础设施、IaaS、PaaS、SaaS四个细分市场构成。2016年中国云计算市场依然保持增长，预计整体市场规模将达到2797亿元，同比增长41.7％。云计算服务市场由云计算数据中心基础设施、IaaS、PaaS、SaaS四个细分市场构成。2016年中国云计算市场依然保持增长，预计整体市场规模将达到2797亿元，同比增长41.7％。公有云服务市场规模仍然仅占整体云计算市场规模的8％，主要是中国云计算市场规模依然以硬件投资为主，云计算服务市场还未起到主导作用，公有云服务的市场培育之路依然艰巨。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;AWS和VMware“双赢”联盟：用户是否是“第三赢”家？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;AWS和VMware之间的合作伙伴关系虽然可以对他们在企业级云市场中的合作伙伴有所帮助，但是也带来了与定价和支持相关的问题。现在，这两家行业巨头正在着手开展这项工作。供应商们正在开发VMware Cloud on AWS，这是一个基于VMware Cloud Foundation的平台，其中包括了VMware vSphere、VMware Virtual SAN以及NSX。这个软件在裸机AWS基础设施上运行，这意味着它可支持私有云、混合云以及公有云。因而，VMware云服务现在具有一致的接口。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2016年度“中国大数据创新百人榜单”火热出炉&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;2017年1月10日，“2016中国大数据创新百人榜单”隆重发布。2016年入选“中国大数据创新百人榜单”的人物涉及商界、政界、科研、学术、创业、投资等多个领域，在过去的2016年中，他们站在所属行业的前沿，具有开创性与前瞻性地推动大数据产业发展，在当下经济全球化时代，主导或参与了具有深刻影响力和重大突破性的大数据产品与技术研发、应用与服务创新，管理与战略规划，他们是中国大数据产业的杰出代表，是中国企业转型、创新、创业大潮中的引领者和开创者，是中国大数据产业的“标杆”。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2017年数据知识产权第一案：脉脉非法抓取使用微博用户信息 被判不正当竞争&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;日前，有关“脉脉非法抓取使用新浪微博用户信息”的案件在北京知识产权法院终审宣判。法院驳回了脉脉的上诉，维持原判，认定北京淘友天下技术有限公司和北京淘友天下科技发展有限公司(均为脉脉的经营公司)构成不正当竞争，立即停止涉案不正当竞争行为。进入大数据时代后，包括微博在内的平台方均有责任和义务推动数据生态繁荣，建立使用规则，并及对滥用行为加以制止。本案为大数据不正当竞争纠纷案首案，对行业规则的建立以及如何维权具有重要指导意义。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2016年十大云故障事件：数量减少，损害增加&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;随着云提供商不断积累运营经验和技术的日益成熟，云故障的频率和持续时间都在减少。这是个好消息。但另一方面，企业却在面对宕机的时候变得越来越脆弱。随着现代化应用和数据源变得越来越分散，我们对它们来管理日常生活方方面面的依赖性也越来越高，潜在的危害，或者强烈的挫折感，变得比以往任何时候都更大。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;广东省交通运输厅与腾讯云腾讯地图合作，提供春运出行大数据分析&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1月11日消息，广东省春运工作领导小组暨广东省交通运输厅春运办公室昨天正式挂牌运作。为服务好春运，今年广东省交通运输厅积极推进“互联网+”大数据在春运工作中的应用，与腾讯公司共同构建了广东省春运交通大数据预测分析平台，提升春运组织协调和应急预警能力。同时，“广东交通发布”微信公众号也正式上线，及时向公众发布各类春运信息。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;国内首个航旅大数据研究中心在沪成立 倡导开放共享、融合创新、安全规范&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1月11日，国内首个航旅大数据研究中心——工信海威-敬众航旅大数据研究中心在沪成立。该研究中心由上海敬众科技股份有限公司联合工业和信息化部电子科学技术情报研究所相关部门共同成立，通过政企合作的形式致力于共同研究利用航旅大数据提升管理服务能力，促进航旅消费和产业转型，并就航旅大数据的安全保障体系、使用标准规范等问题展开深入研究。&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjXo0TOxQLNpNbkVxQ6f9mciaTia8lriaDbFRDv173l0icFibbZCvlHMsOvMXYWrwaCuY5SCNUPHrVbfib9A/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br/&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/p&gt;&lt;/blockquote&gt;</description>
      <pubDate>Fri, 13 Jan 2017 17:12:34 +0800</pubDate>
    </item>
    <item>
      <title>SIGIR 2016信息检索精选论文</title>
      <link>http://www.iwgc.cn/link/4307421</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;洪亮劼，Etsy数据科学主管，前雅虎研究院高级经理。长期从事推荐系统、机器学习和人工智能的研究工作，在国际顶级会议上发表论文20余篇，长期担任多个国际著名会议及期刊的评审委员会成员和审稿人。&amp;nbsp;&lt;br/&gt;&lt;span&gt;责编：&lt;/span&gt;何永灿，欢迎人工智能领域技术投稿、约稿、给文章纠错，请发送邮件至&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;heyc@csdn.net&lt;/a&gt;&amp;nbsp;&lt;br/&gt;&lt;span&gt;本文为&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;《程序员》&lt;/a&gt;原创文章，未经允许不得转载，更多精彩文章请&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;订阅2017年《程序员》&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;人工智能和机器学习领域的学术论文汗牛充栋。每年的各大顶级会议、研讨班录用好几千篇论文，即便是亲临现场也很难追踪到所有的前沿信息。在时间和精力有限的情况下，选择精读哪些论文、学习哪些热门技术就成为了AI学者和从业人员头痛的问题。本栏目旨在帮助大家筛选出有意思的论文，解读出论文的核心思想，为精读提供阅读指导。&lt;/p&gt;&lt;p&gt;信息检索（IR）界的顶级会议International ACM SIGIR Conference on Research and Development in Information Retrieval（SIGIR 2016）在意大利比萨举行。整整三十年前的1986年，第一届SIGIR大会也在同一个城市举行。尽管与机器学习和数据挖掘领域其他大会的蓬勃发展相比，SIGIR这几年有所收缩，但信息检索界的研究依然对搜索系统以及推荐系统的发展有着重要的指导作用。笔者从SIGIR 2016精选出5篇有意思的文章，为读者解惑。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;A Sequential Decision Formulation of the Interface Card Model for Interactive IR&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这篇论文来自伊利诺伊大学香槟分校信息检索领域权威翟成祥的实验室。推荐这篇文章主要有如下几个目的：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;很多人，特别是比较年轻的读者，在现在常见的有“模型、实验”然后拼“性能”之外，可能没有见识过其他的论文形式。所以，这篇文章至少从构思、写作的角度可以扩宽读者的眼界。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;当下还在做信息检索理论模型研究的人已经寥寥无几。作为信息检索领域权威之一的翟成祥教授能够一直推动这方面的发展，着实不容易。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;这篇文章本身也有一些有意思的扩展（后文详述）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这篇文章的立足点，是如何扩展信息检索领域的经典假设——传统的Probability Ranking Principle到更加复杂的Decision Making的情况下。文章的核心，是用作者自己的语言和框架，把Markov Decision Process的基础重新写了一遍。然后，通过引入用户状态的概念，又推导到Partially Observed Markov Decision Process（POMDP）。之后，文章扩展了State，引入了Stopping State的概念。此外，文章定义了几种特殊的Card。由于提出的框架过于新颖，文章的实验主要是Simulation和小规模的User Study。单独看文章提出的这套理论，有一点希望在POMDP的经典语境下添加一些新东西的意味。同时，由于整个思路和传统的IR又相去甚远，实验也不好做。不过，这篇文章提出了一个不错的研究方向，和笔者之前的预期比较吻合。那就是：如何把最新的Reinforcement Learning的成果应用到信息检索领域？能否提出一个优化Long Term User Utility的办法，同时解决很多中间的问题，比如没法定义Utility怎么办，没法定义用户的中间状态怎么办？&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;Statistical Significance, Power, and Sample Sizes: A Systematic Review of SIGIR and TOIS, 2006-2015&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这篇论文的作者酒井哲来自日本的早稻田大学，也是信息检索界的著名学者。他的这篇文章具有两层实用价值：第一，文章系统地分析了过去十年SIGIR和ACM Transactions on Information Systems（TOIS），信息检索领域的两大顶级发表平台中的绝大多数文章使用Hypothesis Testing的情况；第二，文章总结了不少实用的Hypothesis Testing工具，以及一系列关于这些工具的讨论，特别是针对这些工具在不同论文中的使用。&lt;/p&gt;&lt;p&gt;这里总结一下这篇文章的一些结论：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;在10年的将近862篇论文中，只有35%使用了Paired t-test，而255篇（30%）没有Significance Testing。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在255篇中，167篇使用了“Significant Improvement”和“Significantly outperform”的字眼。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;464篇有两个系统比较的论文中，65%使用了Paired t-test， 21%使用了Wilcoxon Signed Rank Test。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;这10年来，没有Paired t-test或者Wilcoxon signed rank test的文章总体是减少的，使用Paired t-test的论文是增加的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在565篇汇报了Significance Test结果的论文中，65%没有汇报p-values或者没有汇报test statistics。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在133篇能够做Power Analysis的文章中，29%是Extremely overpowered，还有7%是Extremely underpowered。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Extremely overpowered的实验数据通常来自工业界，而Extreme underpowered的则来自于雇佣了Participants。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总体看来，结果不是那么乐观。也就是说，过去10年SIGIR和TOIS的很多结果可能并不是那么站得住脚。当然，实践在慢慢改变。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;Query to Knowledge: Unsupervised Entity Extraction&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这篇文章来自雅虎研究院的Query Understanding组。目的是从Query Logs里面提取和商品有关的Entity，文章专注于品牌名和产品名。总体说来，Query的Entity Extraction是提取Query相关Feature的重要环节。与以前的思路不同的是，这篇文章提出的是彻底的无监督方法，也就是借助所谓的Adaptor Grammars（想深入了解Adaptor Grammars的朋友建议看相关论文，这篇文章里有简单的介绍，但不是很透彻）。&lt;/p&gt;&lt;p&gt;简单说来，Adaptor Grammars就是一个Nonparametric版的Probabilistic Context-free Grammar。用户可以通过定义一组简单的规则或者叫Grammar来启发算法发现类似的规则。当然，较真的朋友，可能会觉得这样的规则也是一部分监督信息。但是，定义这样的规则还是比要给单个数据点标注信息来得容易。&lt;/p&gt;&lt;p&gt;文章里的Adaptor Grammars是通过MCMC来学习的，作者们也提出了使用Variational Inference来加速的可能。从算法部分来看，这篇文章并没有对Adaptor Grammars进行大的改进，亮点是把这个算法应用到这个场景。从实验效果来看，Adaptor Grammars还是不错的，能够识别非常多的品牌和产品名。&lt;/p&gt;&lt;p&gt;另外有两点值得注意：第一，文章中提到的Query Normalization方法也值得参考，这样减少了数据中非常多的Noise；第二，文章的Related Work也很值得关注，看点在于总结了之前的Query Entity Extraction的主要方法，基本上都是基于CRF+Topic Modeling的Semi-Supervised的方法。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;Generalized BROOF-L2R: A General Framework for Learning to Rank Based on Boosting and Random Forests&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这篇文章的作者来自巴西的University Federal of Minas Gerais。文章的核心思想非常直观，就是要把Boosting和Random Forest（RF）结合起来做Learning to Rank。有这样想法的人过去也有不少，已经有了很多类似思路。这篇文章的思路是使用RF来做Weak Learner，然后用Boosting的想法把这些Weak Learner串起来。&lt;/p&gt;&lt;p&gt;当然，文章不是仅仅限于这么一个简单的思路，而是提出了一个叫BROOF的框架，很多算法的变种都可以在这个框架里实现。比如Weak Learner的Weight如何确定，是否选择使用Validation Set等，有兴趣的读者可以去看看文章的细节。&lt;/p&gt;&lt;p&gt;文章比较了提出的框架和很多知名算法的性能，比如AdaRank、LambdaRank、RankSVM等等。选用的数据集是LETOR 2003、2004和Yahoo Learning to Rank数据集。结果还是比较引人注目的，基本上在所有的数据集上，提出的算法性能不是最好，就是和最好的算法持平。&lt;/p&gt;&lt;p&gt;这篇文章的另外一个亮点是Related Work，对于Boosting或者RF在Learning to Rank里的应用有兴趣的读者，建议好好看看Related Work里的文献。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Fast First-Phase Candidate Generation for Cascading Rankers&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;作者中的Torsten Suel研究方向就是Query Processing和Index Construction，是这方面的专家。文章讨论的问题非常具有实际意义。首先，现代的搜索引擎和推荐系统多数采用Cascade Ranker的模式。也就是说，Candidate Set经过多轮的选择、排序、过滤，每一个阶段都比前一个阶段可能更复杂，Model的层次更高。关于Cascade Ranker的详细阐述，这篇文章的Related Work和Reference（惊人的59篇）都是非常不错的资源宝库。&lt;/p&gt;&lt;p&gt;回到文章本身，这篇文章探讨的是在Cascade Ranker的第一阶段如何利用Boolean Filter来达到最佳的选择效果。第一阶段之所以那么重要，是因为这个阶段Evaluate的文档个数是最多的，也是最需要效率的地方。值得注意的是，这篇文章探讨的是所谓Unsafe的方法，也就是第一部分有可能漏掉高质量的文档。具体而言，是建立两层结构的Index，在Offline的情况下就筛选出一些可能是高分的文档。其中第一层的Index有一个Single-Term和Pairwise-Term的结构，这两个结构都保持一定数量的高分文档；第二层Index用来查看剩下的一些分数。这里面要解决的问题是，如何选择第一层的深度，然后究竟在一个Query进来的情况下，如何选择Look-up的路径。需要注意的是，文章提供的还是偏向于Web Search的情况，要想推广到一般意义的Index，可能还需要额外的工作。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Thu, 12 Jan 2017 13:28:26 +0800</pubDate>
    </item>
  </channel>
</rss>
