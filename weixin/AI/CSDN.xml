<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>CSDN大数据</title>
    <link>http://www.iwgc.cn/list/1933</link>
    <description>CSDN分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点,提供云计算和大数据技术、平台、实践和产业信息等服务.</description>
    <item>
      <title>微服务实践 | 网易考拉海购Dubbok框架优化详解</title>
      <link>http://www.iwgc.cn/link/4445445</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQORchpgdnmlciaHEVbibSEK29SJq45K1IKy5ADKMTWm5udTe8188WviaD6jncKO4z9USz01CAjLzTibMXw/0?wx_fmt=gif"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0AoP1HGBJoBAbIgBDCR7XUibDIvCIibhLafgTWxqUP8LfQbdQkdYiazYQCQ/0?wx_fmt=gif"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;微服务化&lt;/strong&gt;&lt;/span&gt;是当前电商产品演化的必然趋势，&lt;strong&gt;&lt;span&gt;网易考拉海购&lt;/span&gt;&lt;/strong&gt;通过微服务化打破了业务爆发增长的架构瓶颈。本文结合网易考拉海购引用的开源Dubbo框架，分享支持考拉微服务工作的基本原理。文章分析了使用Dubbo过程中遇到的问题，讲解了团队所做的一些问题修复和功能集成工作，在此基础上最终形成了考拉内部持续维护升级的Dubbok框架。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;本文背景还要从网易考拉海购（下文简称“考拉”）微服务化说起，现在任何大型的互联网应用，尤其是电商应用从Monolithic单体应用走向微服务化已经是必然趋势。微服务化是一个比较宽泛的概念，涉及到一个产品生命周期的多个方面，首先它作为一个指导原则指引业务划分、架构解耦等；技术层面实施微服务需要开发测试阶段、运行阶段、发布阶段、部署阶段等一系列基础框架的支撑。我们在享受服务化易扩展易部署等便利性的同时，也面临新的问题，如数据一致性、分布式调用链路追踪、异常定位、日志采集等。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;本文将集中在支撑微服务交互、运行的基础框架讲解上，即考拉当前使用的&lt;strong&gt;&lt;span&gt;Dubbok框架&lt;/span&gt;&lt;/strong&gt;，Dubbok由阿里开源Dubbo框架的优化和功能改进而来。当前开源上可选用的微服务框架主要有&lt;strong&gt;&lt;span&gt;Dubbo&lt;/span&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;span&gt;Spring Cloud&lt;/span&gt;&lt;/strong&gt;等，鉴于Dubbo完备的功能和文档且在国内被众多大型互联网公司选用，考拉自然也选择了Dubbo作为服务化的基础框架。其实相比于Dubbo，Spring Cloud可以说是一个更完备的微服务解决方案，它从功能性上是Dubbo的一个超集，&lt;strong&gt;&lt;span&gt;个人认为从选型上对于一些中小型企业Spring Cloud可能是一个更好的选择。&lt;/span&gt;&lt;/strong&gt;提起Spring Cloud，一些开发的第一印象是http+JSON的rest通信，性能上难堪重用，其实这也是一种误读。&lt;/p&gt;&lt;p&gt;微服务选型要&lt;strong&gt;&lt;span&gt;评估&lt;/span&gt;&lt;/strong&gt;以下几点：内部是否存在异构系统集成的问题；备选框架功能特性是否满足需求；http协议的通信对于应用的负载量会否真正成为瓶颈点（Spring Cloud也并不是和http+JSON强制绑定的，如有必要Thrift、protobuf等高效的RPC、序列化协议同样可以作为替代方案）；社区活跃度、团队技术储备等。作为已经没有团队持续维护的开源项目，选择Dubbo框架内部就必须要组建一个维护团队，先不论你要准备要集成多少功能做多少改造，作为一个支撑所有工程正常运转的基础组件，问题的及时响应与解答、重大缺陷的及时修复能力就已足够重要。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;下文将选取Dubbo高性能RPC通信原理、服务注册发现特性、依赖隔离、启动与停机等几个方面阐述Dubbok的工作原理和相关改进工作。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0ALPqiaoBtr2jtq5troN4OlEO1ohiaZORCmxwGLZBQc5KZPuSDSLgwWicdw/0?wx_fmt=gif"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;高性能RPC&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Dubbo作为一个分布式通信框架，最基本的职责就是完成&lt;strong&gt;&lt;span&gt;跨进程的远程调用（RPC）&lt;/span&gt;&lt;/strong&gt;。以下是RPC基本流程图：&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0AEn3Uz4kfJClRjY71P5B7cAKgauTJibicIPh4IVFiaJpPrl6ClTg9GIX3Q/0?wx_fmt=png"/&gt;&lt;span&gt;RPC工作原理（图片来自网络）&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;RPC基本原理非常简单，那么Dubbo是如何实现高效的RPC通信的那，和其他分布式通信组件关注点一样，主要集中在以下几点的优化：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.协议栈：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;Dubbo支持自定义RPC协议，冗余字段少、通信性能高；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;序列化协议支持hessian2、Dubbo自定义序列化等高性能协议；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Dubbo支持序列化协议解码在业务线程（Netty3编码自动在业务线程执行）；&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0A6Y3hmf45RSwvzicbT4FrHBU7jJibmDhmGh7q9DSd2rcpKzy3jjb7ibHFQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Dubbo RPC通信协议栈&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;2.线程模型：&lt;/strong&gt;&lt;span&gt;依赖Netty3的非阻塞线程模型，支持I/O、业务逻辑线程分离，通过Handler链处理请求。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0A8TzLZfPddZroJ0f7jgBwU8gOcEYEDtlrLy7cKqwJy9v1XoFsXVcaAA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Dubbo业务线程与netty3 IO线程交互&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;这里特别强调&lt;strong&gt;&lt;span&gt;Netty3&lt;/span&gt;&lt;/strong&gt;，是因为Netty4在线程模型、buffer缓冲区等方面做了重大的设计和性能改进，包括Inbound、Outbound事件强制在I/O线程发起、buffer通过缓冲池减少分配释放、DirectBuffer实现缓冲区零复制等。Netty这块升级相对是一个高风险的点，明面上的API兼容性改造是小，如对Netty4工作原理认识不足，新的线程模型、buffer缓冲池等带来的非预期性能下降、内存泄露等问题相对更难定位与跟踪。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;讲到线程模型，实现上密切相关的&lt;strong&gt;&lt;span&gt;Dubbo网络连接模型&lt;/span&gt;&lt;/strong&gt;必须要提一下。Dubbo默认是所有服务共享单一的TCP长连接的（这也是为什么服务接口不适合传输大负载值，即容易阻塞其他服务的调用）。为响应慢或重要的服务接口考虑，Dubbo支持设置多TCP连接，此时连接数和线程池数默认是绑定的，即每连接对应一个线池，consumer、provider都执行这个策略，从线程隔离的角度讲是合理的，但不注意也容易造成线程占用资源过多，尤其是对于消费端基本无线程阻塞的情况下可能是一个设计缺陷。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.缓冲区：&lt;/strong&gt;Dubbo默认使用的全部是heap缓冲区，因此Socket通信不可避免会存在内核缓冲区和堆缓冲区复制消耗；除此之外在RPC协议解析（包括粘包/半包处理）、序列化协议解析等处理上也存在heap区内的复制，因此性能上是存在优化点的（当然要确有必要）。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0ALPqiaoBtr2jtq5troN4OlEO1ohiaZORCmxwGLZBQc5KZPuSDSLgwWicdw/0?wx_fmt=gif"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;自动注册/发现、负载均衡等服务化特性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;高性能通信是Dubbo作为RPC框架的基本功能，但使其区别于Thrift、hessian、gRPC等框架的关键在于其新增的服务间自动协调、服务治理等特性。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.&amp;nbsp;服务自动注册自动发现、负载均衡&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;服务自动注册发现依赖于注册中心的支持，consumer与provider通过注册中心获取各自地址后直接通信。目前考拉使用Zookeeper作为注册中心，Dubbo原生支持Redis作为注册中心，使用pub/sub机制协调服务的上下线事件通知，但Redis方案要求服务器时间同步且存在性能消耗过大的缺点。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0Aee3hRIwkfdGcRg3UGWdQJnZKK0pBG5SS7KFVhX6XS0RvW7jwnzsb6w/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;消费者/提供者注册中心交互图&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用Zookeeper作为注册中心，建议选用curator作为客户端框架；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Zookeeper服务器异常宕机并重新启动的场景下，Dubbo服务的recover恢复机制存在不能重新注册的问题，导致老zk session失效后服务被错误清除。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;服务框架常见负载均衡实现方案包括：集中式、分布式，分布式又可分进程内、分进程两种。Dubbo采用的是服务发现和负载均衡共同集成在consumer端的分布式进程内解决方案。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0A4EU5icFZicEt5jSSB6IFLY9Xaqe7Z2E1mCIZkoxX1YuDYr5kmGd1GT0w/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Dubbo负载均衡策略&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;负载均衡策略上Dubbo原生提供的有基于权重随机负载、最少活跃数优先、Roundrobin、一致性Hash等几个方案。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;在实际应用中，为了能对个别错误率较高的异常provider做到及时发现、及时引流，Dubbok&lt;strong&gt;&lt;span&gt;增加了新的负载均衡策略&lt;/span&gt;&lt;/strong&gt;，在支持权重的基础上自动发现异常provider，异常期自动减流、正常后自动恢复流量。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.路由、集群容错、限流&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;和负载均衡策略一样，Dubbo的路由方案是集成在消费端的，加上集群容错功能客户端相对是一个重量的功能封装。可选方案是将路由工作移到注册中心完成（这要求注册中心具有&lt;strong&gt;&lt;span&gt;较强的可定制性&lt;/span&gt;&lt;/strong&gt;，不仅路由像权限控制、服务过滤、环境隔离等都可由注册中心集成）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;限流目前支持consumer、provider端并发限流，实际上是基于信号量限制的，以接口粒度分配信号量，当信号量用完新的调用将被拒绝，当业务返回后信号量被释放。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;消费端限流应该是为整个提供端集群分配信号量，而Dubbo错误的将信号量分配给单个机器。这个问题目前可以通过下文提到的隔离框架的流控功能来实现。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;限流并非精确限制，不应当依赖其实现严格的并发数控制。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;后端backend服务限流需要业务方合理评估每个接口的流控值，要求对业务量有足够经验值（可能要在多次线上调优后才能最终得出合理的流控值）。考拉内部流控实践证明，对于保证服务稳定性、优先保证重要消费方、实现服务隔离等有着重要的作用。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.服务动态治理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;动态治理本质上是依赖Dubbo运行期参数的&lt;strong&gt;&lt;span&gt;动态调整&lt;/span&gt;&lt;/strong&gt;，再通用一点其实就是应用的参数动态调整，开源常用的disconf、diamond、archaius等集中配置管理工具都是设计来解决这个问题。Dubbo内部在url参数传递模型基础上实现了一套参数动态配置逻辑，个人认为相比于Dubbo的实现，集成disconf等更专业的框架应该是更好的解决方案，或许Dubbo为了一些其他设计目标解除了对一些外部框架的强制依赖。动态治理可以实现从基本参数如timeout、mock到一些高级特性如路由、限流等几乎所有的运行期参数调整。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Dubbo原生在动态配置上存在很多bug，配置不生效或配置规则误读等问题都遇到过，如果你再使用原生Dubbo过程中也遇到任何配置问题，Dubbok应该都已经解决掉了。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0ALPqiaoBtr2jtq5troN4OlEO1ohiaZORCmxwGLZBQc5KZPuSDSLgwWicdw/0?wx_fmt=gif"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;依赖隔离（服务降级）&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;当应用被设计依赖外部服务时，要始终保持警惕状态：外部依赖是不稳定的，为此对接外部依赖&lt;strong&gt;&lt;span&gt;做好解耦&lt;/span&gt;&lt;/strong&gt;是关键，避免外部接口发生异常拖垮自身系统。Dubbo提供了&lt;strong&gt;&lt;span&gt;超时timeout机制&lt;/span&gt;&lt;/strong&gt;作为最基本的解耦措施，同时在接口报错时支持提供降级的容错逻辑；除了容错降级，Dubbo进一步支持强制的短路降级。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0ACugftUj8k4uF0GFy6qMHhzsbTIXfKmXHTSjVgroAZg6Yu37Pbv4lZA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;容错 &amp;nbsp;短路&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;然而在容错降级与短路降级之间，Dubbo缺乏一种在容错与短路间切换的机制，即&lt;strong&gt;&lt;span&gt;自动熔断&lt;/span&gt;&lt;/strong&gt;。自动熔断要达到的效果是：当接口偶然报错时执行容错返回备用数据，而当接口持续大量报错时能自动在消费端对接口调用短路直接返回备用数据，之后持续监测接口可用性，接口恢复后自动恢复调用。这样能最大限度减少接口异常对消费方的影响，同时也减轻本就处于异常状态的提供端负载。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0AZ1wCHwjxxf5ib7eBa00CGdRQUdq2Ttbw8nSicB4IibDHbO7Vaal31sMMw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;自动熔断工作原理图&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Dubbok通过标准SPI的的形式，实现了熔断功能。目前支持两套方案：&lt;strong&gt;&lt;span&gt;一套是自己实现的熔断逻辑&lt;span&gt;；&lt;/span&gt;一套是通过集成hystrix框架实现&lt;/span&gt;&lt;/strong&gt;。目前支持错误率、最低请求量、熔断时间窗等基本配置，支持将业务异常纳入统计范畴；以上参数均可通过SOA治理平台运行期动态调整；支持外部Dubbo依赖调用的准实时监控。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0ApemU1dtBRvONS1WibzWtHRbTNMYZczQ5kL3UQUrgsDUsGhycQZULcgQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;SOA动态调整熔断参数&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0Amzp64DLxG1bTaBFdwK4F9NtCGgibia4PsbBu3tSyzyrW5B6hs7eg7DaA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;依赖实时监控&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Hystrix是Netflix在微服务实践中为实现外部依赖解耦而设计的框架，它假设所有的外部依赖（http、MySQL、Redis等等）可能在任何时间出现问题（你甚至可以想像不经意间就使用了一个没有提供超时设置的http客户端）。于任何可能的外部延时造成的阻塞或其他异常，hystix提供了基于线程池隔离的超时机制，新版本在RxJava基础上信号量隔离也同样支持超时。此外框架还支持定制容错逻辑、请求结果缓存、请求合并、消费端线程池隔离等，由于某些功能当前无明确需求或与Dubbo功能设计重合而没有进行集成。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hystrix更多特性及实现原理请参见Netflix官方文档。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0ALPqiaoBtr2jtq5troN4OlEO1ohiaZORCmxwGLZBQc5KZPuSDSLgwWicdw/0?wx_fmt=gif"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;启动与停机&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;这里主要关注Dubbo工程启动初始化阶段和停机销毁阶段的一些特性和改进点：&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.延迟暴露。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;默认Dubbo服务会随着Spring框架的加载逐一完成服务到注册中心的注册（暴露），如果某些服务需要等待资源就位才能暴露，那就需要延时注册。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0AOHjiaU9wkcbOvWCERD9zMd8oqDIZCOqBVHqibN8R6rqA9HwVolInhNLw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;增加Spring context初始化完成后继续延时等待的配置项；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;在无特殊配置的情况下，所有的Dubbo服务默认是注册在同一个tcp端口的。而延迟暴露是通过开启新的延时线程实现的，当延时结束时由于多线程并发执行导致多服务随机注册在多个端口。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.启动预热&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;一些应用在运行期会通过本地缓存中间结果提升性能，而当此类应用重启时本地缓存数据丢失，如果重启后的机器立即有大量请求导流过来，由于没有缓存加速会导致请求阻塞响应性能降低。通过对重启后的机器设置预热期可有效缓解重启缓存失效问题：&lt;strong&gt;&lt;span&gt;具体做法&lt;/span&gt;&lt;/strong&gt;是降低预热期内的机器权重，引导少部分流量到此机器，此机器可以在预热期内逐步建立缓存，待预热期过后恢复正常权重与其他机器平均分摊流量。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.优雅停机&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在集群部署的情况下，单个消费者或提供者机器上下线对整个产品的运转应该是近乎无感知的，Dubbo提供了优雅停机功机制保障在进程关闭前请求都得到妥善处理。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;消费方&lt;/span&gt;&lt;/strong&gt;优雅停机：控制不再有新的请求发出；等待已经发出的请求正确返回；释放连接等资源。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;提供方&lt;/span&gt;&lt;/strong&gt;优雅停机：通知消费端停止发送请求到当前机器；通知注册中心服务下线；等待已经接收的请求处理完成并返回；释放连接等资源。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;考拉再每次服务上下线过程中，每个工程总是收到大量的消费方/提供方报出的服务调用异常，经排查是Dubbo优雅停机实现的问题，修复问题后工程上线阶段异常数明显减少。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;另外停机阶段总是莫名的收到zk连接为空的异常信息。是由于在通知注册中心服务下线的过程中，Spring销毁线程和jvm hook线程并发执行，导致zk客户端被提前销毁导致抛出异常。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.Provider重启，注册中心发送大量服务销毁与注册通知导致consumer工程Full GC。&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;历史原因，考拉内部仍存在一个提供近200个Dubbo服务的单体工程，而每次当这个工程上线时，消费它的consumer工程就会出现频繁Full GC（3-5次，非内存泄露）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="box-sizing: border-box;"&gt;&lt;li&gt;&lt;p&gt;是Dubbo为保证高可用而设计的注册中心缓存导致的问题：在每次收到注册中心变更时consumer会在本地磁盘保存一份服务数据副本，由于多注册中心共享同一份缓存文件，为了避免相互覆盖，每个注册中心实例会在收到变更时重新从磁盘加载文件到缓存，和变更数据对比后重新写回磁盘，在近100提供者机器不断重启的过程中，大量的变更通知导致的频繁加载缓存文件占用大量内存导致Full GC。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0ALPqiaoBtr2jtq5troN4OlEO1ohiaZORCmxwGLZBQc5KZPuSDSLgwWicdw/0?wx_fmt=gif"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;Dubbok近期优化目标&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;ul class=" list-paddingleft-2" style="box-sizing: border-box;"&gt;&lt;li&gt;&lt;p&gt;提供端线程池隔离，解决提供端线程池阻塞等问题；优化消费端线程池分配方案&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务治理动态配置功能增加应用、机器粒度的配置&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;多注册中心消费端负载均衡策略&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Dubbo内部资源JMX监控&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;结合SOA平台优化监控统计数据：错误类型细分（超时、限流、网络异常等）；执行时间细分如90%、99% RT等；统计占用线程数较多的服务、传送数据量较大的服务，为分线程池或连接做参考&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对Spring boot推行的Javaconfig配置方式提供更友好、全面的注解支持&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一些框架升级，如Javassist、Netty等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;替代Zookeeper的高性能、可扩展注册中心&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务安全、授权问题调研&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Spring Cloud的一些优秀特性将作为Dubbok改进的一个持续关注点&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;……&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0ALPqiaoBtr2jtq5troN4OlEO1ohiaZORCmxwGLZBQc5KZPuSDSLgwWicdw/0?wx_fmt=gif"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;文中提到的一些改进点只是简略描述，Dubbok的很多改进点也没有一一提及，后续有时间再详细道来。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Dubbok框架、SOA服务治理平台、分布式调用链路跟踪以及其他考拉内部维护的如分布式事务、消息中间件等共同支撑了考拉微服务化的正常运转。上文也提到微服务需要有开发、测试、运行、运维、部署、发布等各阶段的全链路支撑才能发挥最大价值，后续我们将继续联合其他兄弟部门，对微服务化实践进一步优化。&lt;/p&gt;&lt;p&gt;&lt;span&gt;——刘军&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网易考拉海购&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;刘军&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，2013年硕士毕业于中国科学院，2015年入职网易先后在杭州研究院和考拉海购参与一些中间件开发，现主要负责考拉微服务化的基础中间件开发工作，包括服务治理平台、分布式调用框架、调用链追踪等，近期专注于微服务化全链路基础框架的研究。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;如果您对本文的分享有疑问，或者想了解更多的优化工作，欢迎与作者展开更深入的讨论。讨论请联系网易云小秘书，微信：&lt;strong&gt;Jianding_zhou&lt;/strong&gt;，邮箱：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;jianding311@163.com&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;点击阅读更多：&lt;/p&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzI2MzM3MzkyMg==&amp;amp;mid=2247483912&amp;amp;idx=1&amp;amp;sn=e0dadb8a713b3caadaa75b6b17a01c33&amp;amp;chksm=eabd9705ddca1e136c49d00650726b3550ad2442fa653943b4f4cc06a4dab6d5ead631ea98e8&amp;amp;scene=21#wechat_redirect" target="_blank" data_ue_src="http://mp.weixin.qq.com/s?__biz=MzI2MzM3MzkyMg==&amp;amp;mid=2247483912&amp;amp;idx=1&amp;amp;sn=e0dadb8a713b3caadaa75b6b17a01c33&amp;amp;chksm=eabd9705ddca1e136c49d00650726b3550ad2442fa653943b4f4cc06a4dab6d5ead631ea98e8&amp;amp;scene=21#wechat_redirect" style="text-decoration: underline; box-sizing: border-box; color: rgb(0, 0, 0);"&gt;&lt;span&gt;4亿资源打造洋货节，网易考拉海购借云计算玩双11&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQOQ2VcmBUgAG3VJQCnsryo0AYv6icHyFLa4YIE9WL3as0m9cibWPTa8db8xXhRZnyNmq2iamRzn5ibBmXg/0?wx_fmt=gif"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/0tqmmR6jQORchpgdnmlciaHEVbibSEK29S3UL0GtxLY2qA3GkR0zaLAmfXGic80zFUfXr5HeAcgXn2uTQTSmQCHaQ/0?wx_fmt=gif"/&gt;&lt;/p&gt;</description>
      <pubDate>Sun, 22 Jan 2017 17:04:41 +0800</pubDate>
    </item>
    <item>
      <title>重磅 | MySQL 5.6 （GA）中文手册翻译全球招募！</title>
      <link>http://www.iwgc.cn/link/4445446</link>
      <description>&lt;p&gt;&lt;span&gt;自从中华数据库行业协会重启MySQL5.6 手册翻译项目后，有越来越多的志愿者开始加入。ZHDBA为了打造一个更加便捷的翻译环境，组建了核心翻译团队为大家服务，在召集了各路大牛成为我们最后的审核老师的同时，对翻译流程也做了优化。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;下面讲解此次维护更新后的翻译参与流程：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;全新翻译进度查询&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;更新后，MySQL 5.6手册的大章节被拆成里程碑（Milestones），每一章节中的小节以Issue方式显示，且在Issue的评论区有翻译者、翻译时间、翻译进度和联系方式等信息以方便大家了解具体的翻译进度。图一为Issue页面点击“Milestones”出现的章节划分页面。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nIW7JbKspEchACCTQwLFicwTibl8a1WJrwQSawcfL3Tv6FcIzs73soWZeg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图一：里程碑划分大章节&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;点击单个里程碑可以看到该里程碑对应的章节下具体小节的翻译情况，具体issue中的内容在“我要怎么参与翻译？”段落中有详细说明。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nItst446xRMzcVLEqN4uz9x4IK48R4Uf7S6BfCTvnJmgQn7JlWAhzpOg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图二：小节翻译进度详情&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我要怎么参与翻译？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本次项目在GitHub上开放式翻译，网址为：&lt;span&gt;https://github.com/mysql2cn/manual56&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. Fork翻译项目&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nItnLxBPdI8IjS4iafxAjPB9MOy7qSlBwYO7vCQ0SLbwGn9KxiaHXB5sJg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图三：复制项目&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在页面右上角“Fork”整个项目后，图三所指出的位置进行下载当前整个项目的资源。其中docs文件夹为全部的翻译文件，Readme文件中为翻译的相关事宜以及翻译工具的简单教学。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 新建Issue声明自己翻译的章节&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nIj5nGQPqhye324ldUkErTxndWP8icBnWy7h9WnXb7I1E6QHCtjU1PuIA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图四：新建issue示范&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;为了让所有参与者知道整个翻译的进度，请大家根据以下规则将自己想要翻译的小节建立Issue：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;a. 标题以翻译小节题目命名&lt;/p&gt;&lt;p&gt;b. 评论区备注翻译者的姓名、翻译完成时间和联系方式&lt;/p&gt;&lt;p&gt;c. 右侧（上）可以指定自己为翻译者&lt;/p&gt;&lt;p&gt;d. 右侧（中）更改Label表示当前翻译状态变化&lt;/p&gt;&lt;p&gt;e. 右侧（下）选择里程碑该小节属于具体哪个大章节&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nI06uzf4RsLVsAt2cZ4ZYlgrLhPCOSqOppd3qtmhP5XJ3jINQHqmtT8A/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图五：注意事项&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;需要注意的是，由于文件夹中为2013年MySQL 5.6手册的翻译内容，因此大家在翻译时请注意更改自己文件中的标题。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 提交翻译&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nILUWvObhqcOkLGeHBHcA7MibDMic0I0j5ydMH0eqehSWGXwgdKvsM8fsg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图六：创建提交申请&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;当翻译好之后，翻译者可通过上图所示位置创建提交，进入图六所示页面。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nINa17IEbxCJkjw7uOUrzZDXAvyc5UYNlOcDEAVxicxZsK5f0BDtA19ag/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图七：更改预览&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;该图中上半部分为评论区，可对自己调整的部分添加备注，下方为更改后的预览。确认提交后点击“Create pull request”按钮进行提交。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;以上内容将于本周末上传至GitHub上“Readme文件中”，欢迎大家补充~&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;MySQL专家审核团队&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本次翻译特地邀请了有丰富的MySQL经验的专家组成审核团队，为翻译增添助力！&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nIibM8QSsia8oEFZEswiaUWibRI7NViaudXODibQDv49gmPibHNUj5oSrQPMXkQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nITyu5zicgFMe9s3mibjsIT3A7bgIiaUO4lfvr6GbgpicRriaXbWjoYibXy2MA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nI0icUic9FiciaRypjGfhw4uaUKuy2FpxM8yI39CBwY0u945kLMY0mJ0BpGg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nIgTJwTPErIyfgqI6V8Lc1jEFcZA6r3jczqtQmtDwe0gibiaeTnQWvyHDA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;更多神秘大牛坐镇，等你揭晓&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;志愿者执行团队&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nIrtDV3wKzGqEwbAFVlVtUdDxJgQbjibUdcxqX6KvHFEQpVHjGLclkECQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;核心小队会帮助整个项目的执行和推进以及技术支持等，如果您也想成为我们核心小队的一员，请联系群主小慧。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;我们期待您的加入&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;翻译交流区&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;QQ交流群：176296241&lt;/p&gt;&lt;p&gt;微信交流群：由于目前人数已经超过一百，请加小助手微信，小助手将邀您入群。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWPOC0LiauOIkVDoyc24ic5nIFxkYicJezg1h4mZKfFwcLERMLroIM3iaVYnqoyLBqZVqBjiaaHft4FzRQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;翻译团小助手二维码&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本次活动由中华数据库行业协会发起，感谢老叶茶馆、知数堂、ACMUG、SDCC、IT大咖联盟、DBAplus社群等平台的大力支持。&lt;/p&gt;</description>
      <pubDate>Sun, 22 Jan 2017 17:04:41 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】Apache Kudu 1.2.0 发布，好未来教育云与阿里云达成战略合作</title>
      <link>http://www.iwgc.cn/link/4445447</link>
      <description>&lt;p&gt;Cloudaily网罗新鲜要闻，每日为你呈现大数据和云计算领域热点新闻。本次内容播报如下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于 Docker 的操作系统：RancherOS v0.8.0-rc4&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;RancherOS v0.8.0-rc4 发布了，RancherOS 是微型 Linux 发行，整个操作系统以 Docker 容器的形式运行。这包含了系统服务如 udev 和 rsyslog。RancherOS 只包含运行 Docker 所需的最低数量的软件。这使得 RancherOS 的二进制下载量非常小。其他任何东西都可以动态通过 Docker 来获得。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Apache Kudu 1.2.0 发布，Hadoop 存储系统&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我们为了实现这些目标，首先在现有的开源项目上实现原型，但是最终我们得出结论：需要从架构层作出重大改变。而这些改变足以让我们重新开发一个全新的数据存储系统。于是3年前开始开发，直到如今我们终于可以分享多年来的努力成果：Kudu，一个新的数据存储系统。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;联通和阿里云合作 建互联网云化卡号管理系统&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;继去年11月中国联通与阿里巴巴签订战略合作框架协议之后，今天下午阿里云宣布将于中国联通建卡号管理系统“cBSS2.0集中号卡系统”。据了解，这将是电信行业第一个核心业务系统云化改造的重点工程，也是云计算技术在电信行业的首次大规模应用。cBSS2.0集中号卡系统目前已经在广西、内蒙古、黑龙江三个试点省市快速上线，并将逐步推广至全国，形成惠及3亿用户的超级“卡号云”。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Facebook投资1亿美元在丹麦建立数据中心&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1月20日Facebook宣布，将在丹麦欧登塞市(Odense)建立一座新数据中心，这将是Facebook在美国以外的第三座数据中心。Facebook数据中心业务总监尼奥·麦肯特加特(Niall McEntegart)称：“欧登塞数据中心将是全球最先进、最节能的数据中心之一。”麦肯特加特称，这座数据中心将100%使用可再生能源。此外，欧登塞市寒冷的气候也有助于降低服务器温度，而无需依赖于空调设备。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;好未来教育云与阿里云宣布达成战略合作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1月22日，好未来教育云与阿里云宣布达成战略合作，双方将在4个方面深度合作，推动中国教育均衡发展。深度合作包括：1、好未来教育云依托阿里云，将优质产品输送到公立教育体系，推动教育均衡发展；2、双方联合服务帮助10000多家中心K12企业，打造互联网教育新生态；3、阿里云创新中心与好未来未来之星，共同发展孵化教育垂直行业独角兽；4、阿里和好未来共同推动xiwang.com教育公益平台，提供直播技术和底层支撑服务等。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数人云完成5000万A+轮融资&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1月22日，云启家族成员数人云宣布公司完成5000万人民币A+轮融资。此次融资由沣源资本领投，云启资本、唯猎资本以及UCloud等A轮投资方继续跟投。本轮融资将主要用于企业级市场开拓、开源项目的推进，以及上下游生态的完善。数人云由原Google架构师王璞博士于2014年9月创立，其核心团队来自于谷歌、红帽和惠普，具有丰富的分布式研发能力和平台运营经验。2016年初完成3000万人民币A轮融资。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;腾讯云国内首发FPGA云服务器&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1月20日，腾讯云推出国内首款高性能异构计算基础设施——FPGA云服务器，以云服务方式将大型公司才能长期支付使用的FPGA推广到更多企业。通过FPGA云服务器，企业可以进行FPGA硬件编程，可将性能提升至通用CPU服务器的30倍以上，而只需支付相当于通用CPU约40%的费用。腾讯云成为国内首家在云端开放FPGA计算服务的云服务商。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;蚂蚁金服CEO在达沃斯接受采访：支付宝将引入区块链技术&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在今年的达沃斯经济论坛上，蚂蚁金服CEO井贤栋向CNBC透露，公司计划10年内发展20亿用户，并称将进一步探索区块链技术的应用。井贤栋还畅谈了人工智能和区块链技术的潜力——后者是一种分布式总账系统，据专家表示，这一技术可使众多金融流程成本变得更低，速度更快。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;到2021年，Hadoop大数据分析市场产值将达406.9亿美元&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;据市场研究咨询公司MarketsandMarkets新发布的一份市场研究报告声称，Hadoop大数据市场产值预计会从2016年的67.1亿美元猛增至2021年的406.9亿美元，2016年至2021年的年复合增长率(CAGR)将高达43.4%。这份报告名为《2016年至2021年Hadoop大数据分析市场全球预测》，从以下这几方面解读这个市场：组成部分(解决方案和服务)、应用软件(风险及欺诈分析、物联网、商品销售及供应链管理、客户分析、卸载大型机和安全情报)、垂直领域和地区。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;电子地图Here将向百度提供中国境外地图数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;据《日本经济新闻》近日报道，德国提供电子地图和位置信息服务的 Here 宣布，将与中国提供网络搜索及地图服务的百度扩大合作，在中国以外的全球地图信息提供方面开展合作。百度的约 3.5 亿用户到欧洲等旅行时，将能够以 Here 的数据为基础继续利用百度的服务。此举意在对抗地图搜索领域的竞争公司美国谷歌，扩大用户规模。&lt;/p&gt;</description>
      <pubDate>Sun, 22 Jan 2017 17:04:41 +0800</pubDate>
    </item>
    <item>
      <title>给老朋友们推荐几个大数据和机器学习方面的公众号</title>
      <link>http://www.iwgc.cn/link/4439793</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/cokWkYcF4Dc6P0RxKzNvzibJjTGU0DqiclhE6icEdFVnV92aOArMqPqbCEsph7voGHeF63t870oulpUJK2LicwKJMg/640?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们甄选了大数据和机器学习领域里的&lt;span&gt;小而美、精而专的&lt;/span&gt;微信公众号。&lt;/span&gt;&lt;span&gt;它们来自不同的媒体或教育机构，内容上&lt;/span&gt;&lt;span&gt;各有侧重&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;运营者都&lt;/span&gt;&lt;span&gt;怀着传播技术的初心。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;希望你能在这里遇见心仪的公众号。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;大数据杂谈（InfoQ）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ID：BigdataTina2016&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们专注大数据和机器学习，关注前沿技术和业界实践。每天发布高质量文章，技术案例等原创干货源源不断。同时有四千人的社群微课堂，每周一次业界大牛技术分享，也希望你能从这里分享前沿技术，交流深度思考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VNW7mQQ8bHltyStNib8kAC73zABMRb2n7UBEFdibfny51yYcT7vrEZ2iaggGGOVGNF8uibH2pWhRKpL4A/640?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN大数据&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ID：csdnbigdata&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;CSDN分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/cokWkYcF4Dc6P0RxKzNvzibJjTGU0DqiclPkNyCCpwJiavh161yu20M8licdnUcyIcshO24vfD5Au0eTZWsqgceyibw/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;清华大数据&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ID: datapi&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;清华大数据，&lt;/span&gt;尽在THU数据派。前沿数据产业动态，独家发布干货内容，持续传播数据思维，定期组织线下活动，数据人才聚集平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfPnuMndibP16hlmQoutw0pYWuO5DoarGqNoE5xuXXzFK3N5A22MXmzu3ibADe3AHF3YYiaejkYK2KHLQ/640?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据猿&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ID：datayuancn&lt;/span&gt;&lt;/p&gt;&lt;p&gt;数据猿--大数据产业创新服务媒体！传播大数据产业前沿资讯和原创深度好文，更有业界大咖等你来会。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/cokWkYcF4Dc6P0RxKzNvzibJjTGU0Dqiclf4ukaFJOqfZcmb0GXcj2xvkicma5Hce4MKV8iczW3gt9ibhLIPFfjzOrw/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;架构文摘&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ID: ArchDigest&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;每天一篇架构领域重磅好文，涉及一线互联网公司的互联网应用架构、大数据、机器学习等各个热门领域。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/cokWkYcF4Dc6P0RxKzNvzibJjTGU0DqiclIibprErJoicT0dhYoTnoO7ZdyibTQXIy56xUiautyMHd5o8Tn2HceZwxNw/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;PaperWeekly&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ID：PaperWeekly&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每周会分享N篇nlp领域好玩的paper，旨在用最少的话说明白paper的贡献，内容均为原创。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/cokWkYcF4Dfcz1aePdDiaYH2avf1iaZyxqw2FGbagdvP7iawpfibxIFuia7OiaKd1jfYMIC94mW6ISKfVcng09YUj1MA/640?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Call4Papers&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ID：Call4Papers&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;发布近期各领域即将截稿的学术会议和期刊专刊约稿信息。用户可根据自己论文的水平、研究方向和投稿时间查找感兴趣的会议或期刊。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/cokWkYcF4Dc6P0RxKzNvzibJjTGU0Dqiclqq2icG1yxhoCwOKbFanJia9xr8jrfRUxysAmJnOmQ6D1wj2uK9zeia73g/640?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;AI金融评论&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ID：aijinrongpinglun&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在大数据、人工智能、区块链等新技术奔涌薄发的时代，我们关注一切能够推动传统金融业务变得更加安全、高效的技术创新，致力于提供最前沿全面的技术应用参照与市场解读。我们重点报道智能投资、智能信贷、智能保险、区块链。在这里，读懂智能金融与未来。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/cokWkYcF4Dc6P0RxKzNvzibJjTGU0DqiclPn80kfyz6ickABPytlj8HASBceiab2ZHEYLJLHom47bxSee7P88pWPVQ/640?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;AIHealth&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ID：HealthAI&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;AIHealth是雷锋网旗下专注于未来医疗&amp;amp;健康领域的垂直内容频道。AIHealth致力于帮助科技从业者掀开医疗行业的神秘面纱，替医务人员解读最新最硬前沿技术。在这里，读懂未来医疗&amp;amp;健康。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/cokWkYcF4Dc6P0RxKzNvzibJjTGU0DqiclkwusmQk1spssXkQLbDLnGFDicDJVyTf1yhDhKZh61JfyXumXfl7X6fA/640?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;科研圈&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ID：keyanquan&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;《科学美国人》中文版《环球科学》面向科研人员的微信公众号。我们提供好看的科学故事、前沿的研究、没有毒的鸡汤，推荐和导读各领域最新论文，发布科研招聘、会议预告。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/cokWkYcF4Dc6P0RxKzNvzibJjTGU0DqiclomxZgrSZ1SiaxIsAqx8MZ1icyOibpbgY5KH1f2VVpw3te3QhGIncicWKiaQ/640?wx_fmt=jpeg"/&gt;&lt;/p&gt;</description>
      <pubDate>Sat, 21 Jan 2017 23:08:18 +0800</pubDate>
    </item>
    <item>
      <title>区块链开发技术综述</title>
      <link>http://www.iwgc.cn/link/4422178</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;孟岩，IBM大中华区高级经理，曾负责IBM智慧地球、智慧城市、认知计算等重大技术战略在中国的推广和落地。一年前开始关注区块链技术及其行业应用前景，对比特币、以太坊、超级总账和BigchainDB四个主要区块链技术流派都进行过考察和研究，形成了在中国应用区块链技术的观点和思路。&amp;nbsp;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你关注区块链技术长达几个月，可能也会跟我一样，对没完没了的原理介绍、前景描绘、行业探讨和链圈新闻产生了审美疲劳。没错，区块链必须与行业紧密结合，它也有颠覆人类协作方式之洪荒巨力，但是说到底它还是一个技术活，是要写代码的，在咖啡厅里整天坐而论道是造不出金链子来的。技术人员的逻辑简单直接，这个事情有没有前（钱）途？有，那怎么干？&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文试图对区块链有关技术流派和主流平台进行一个概览，作为学习区块链技术体系的导览，意在抛砖引玉，促进区块链开发社区的讨论与共识。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;区块链技术的流派&lt;/h3&gt;&lt;p&gt;未战先谋局，你想投入区块链开发这个领域，至少先要搞清楚现在有哪些玩家，各自的主张和实力如何。&lt;/p&gt;&lt;p&gt;&lt;span&gt;划分区块链技术流派并无一定之规，据我所见，或可有以下四种方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一是按照节点准入规则，划分为公有链、私有链和联盟链。&lt;/span&gt;公有链的代表自然是比特币和以太坊，私有链则以R3 Corda声名最盛，联盟链的代表作品是Hyperledger名下的Fabric。公有链注重匿名性与去中心化，而私有链及联盟链注重高效率，而且还往往设置了准入门槛。公有链、私有链与联盟链之间的这些不同都在技术中有所体现，比如私有链和联盟链假设节点数目不大，可以采用PBFT算法来形成共识。而公有链假设有大量且不断动态变化的节点网络，用PBFT效率太低，只能采用类似抽彩票的算法来确定意见领袖。这就意味着，私有链与联盟链很难变成公有链，而用公有链来作联盟链或私有链虽然容易，却也并非即插即用。此种差异，学者不可不察。&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二是按照共享目标，划分为共享账本和共享状态机两派。&lt;/span&gt;比特币是典型的共享账本，而Chain和BigchainDB也应属此类，这几个区块链系统在各个节点之间共享一本总账，因此对接金融应用比较方便。另一大类区块链系统中，各个节点所共享的是可完成图灵完备计算的状态机，如以太坊、Fabric，它们都通过执行智能合约而改变共享状态机状态，进而达成种种复杂功能。&lt;/p&gt;&lt;p&gt;&lt;span&gt;第三是按照梅兰妮 · 斯旺所描述的代际演进，将区块链系统分为1.0、2.0和3.0三代。&lt;/span&gt;其中1.0支撑去中心化交易和支付系统，2.0通过智能合约支撑行业应用，3.0支撑去中心化的社会体系。比特币和Chain应属于区块链1.0系统，而以太坊和Fabric是区块链2.0系统，目前尚无成功的区块链3.0系统出现，不成功的尝试倒是有那么一个，就是著名的The DAO。&lt;/p&gt;&lt;p&gt;&lt;span&gt;第四是按照核心数据结构，分为区块链和分布式总账两派。&lt;/span&gt;区块链这一派在系统中真的实现了一个区块的链作为核心数据结构，而分布式总账这一派，只是吸取了区块链的精神，并没有真用一条区块链作为核心数据结构，或者虽然暂时用了，但声明说吾项庄舞区块链，意在分布式总账耳，若假以时日，因缘际会，未尝不可取而代之也。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;主流区块链技术平台&lt;/h3&gt;&lt;p&gt;了解流派划分，仍是只能用来指点江山，吹牛论道，要动手，总要有个切入点。区块链货币据说已经有上千个了，但值得关注的技术平台大概只有数十个，而如果要进入区块链开发领域，打下一个好基础，练出一身好功夫，捞到几个好offer，则值得深入研究学习的平台，屈指可数。&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先当然是比特币。&lt;/span&gt;比特币作为区块链的第一个也是目前为止最成功、最重要的样板工程，已经上线运行了八年多，本身没有发生任何严重的安全和运维事故，其稳定与强悍堪称当代软件系统典范。比特币Bitcoin Core是一个代码质量高、文档良好的开源软件，从学习区块链原理、掌握核心技术的角度来说，Bitcoin Core是最佳切入点，能够学到原汁原味的区块链技术。当然，Bitcoin Core是用C++写的，而且用了一些C++11和Boost库的机制，对学习者的C++水平提出了较高的要求。&lt;/p&gt;&lt;p&gt;学习比特币平台开发还有一个优势，就是可以对接繁荣的比特币技术社区。目前围绕比特币进行改进和提升的人很多，人多力量就大，诸如隔离验证、闪电网络、侧链等比较新的想法和技术，都率先在比特币社区里落地。比如侧链技术的主要领导者Blockstream是由密码学货币元老Adam Back领衔的，而Blockstream是Bitcoin Core最大的贡献者之一，所以一些有关侧链的技术在比特币社区里讨论最充分。&lt;/p&gt;&lt;p&gt;但比特币作为一个典型的区块链1.0系统，是不是支撑其他类型区块链应用的最佳技术平台，存在很大的争议。另外，也不是所有人都有能力和必要精通区块链底层技术。所以对那些急于冲到区块链领域里做（quān）事（qián）的人来说，可能更直截了当的学习目标是以太坊和Hyperledger Fabric。&lt;/p&gt;&lt;p&gt;&lt;span&gt;在以太坊上面用Solidity进行的智能合约开发是切入区块链开发最简单的方式，没有之一。&lt;/span&gt;以太坊的理想非常宏大，由于配备了强大的图灵完备的智能合约虚拟机，因此可以成为一切区块链项目的母平台，是驮住整个区块链世界的大乌龟。在以太坊上开发一个类似比特币的加密货币，是一个不折不扣的小目标。一般有经验的开发者在文档指导下，半天到一天即可入门。问题在于，入门以后又如何？靠写Solidity是否就可以包打天下？这是大大存疑的。我们也可以反过来说，如果以太坊+Solidity是区块链的终极解决方案，那么怎么还会出现那么多区块链技术门派呢？特别是，以太坊似乎并没有给现实世界中巨型的中心化组织们留下一条活路，这种彻底不妥协的革命态度有可能也成为以太坊推广的障碍。&lt;/p&gt;&lt;p&gt;当前以太坊项目的开发进展并不顺利。一个比较突出的问题是项目过多，力量分散，导致项目质量参差不齐。但尽管如此，跟其他区块链2.0平台相比，以太坊提供的开发环境是最简单最完善的。初学区块链的人绝对有必要学习以太坊，从而对区块链和智能合约建立起一个最“正宗”的认识。&lt;/p&gt;&lt;p&gt;&lt;span&gt;主流区块链技术平台的第三支就是Fabric，它是Hyperledger的第一个也是最知名的孵化项目。&lt;/span&gt;&amp;nbsp;Fabric最早来自IBM的Open Blockchain项目，到2015年11月，IBM将当时已经开发完成的44,000行Go语言代码交给Linux基金会，并入Hyperledger项目之中。在2016年3月一次黑客马拉松中，Blockstream和DAH两家公司将各自的代码并入Open Blockchain，随后改名为Fabric。到目前为止，Fabric与Intel提供的Sawtooth Lake并列为Hyperledger的一级孵化项目，但前者得到的关注远超后者。&lt;/p&gt;&lt;p&gt;从技术角度来说，Fabric思路不错，重点是满足企业商用的需求，比如解决交易量问题。众所周知，比特币最大的短板是它每秒钟7个交易的上限，完全无法满足现实需要。而Fabric目标是实现每秒钟10万交易，这个量接近刚刚过去的双十一交易量瞬时峰值，完全可以满足正常条件下的行业级应用。Fabric用Go语言开发，也提供多种语言的API。特别值得一提的是，Fabric比较充分地运用了容器技术，比如其智能合约就运行在容器当中。这也是Go语言带给Fabric的一项福利，因为Go语言静态编译部署的特征很适合开发容器中的程序。&lt;/p&gt;&lt;p&gt;Fabric还有一些特点，比如其membership服务可以设置节点准入审查，这是典型的联盟链特征。再比如其共识算法是可定制的。Fabric自带PBFT共识算法实现，但是PBFT的算法效率是O(n²)，其中n是节点数量。因此PBFT用在节点数量受限的联盟链里是没有问题的，但用在公有链里效率过低。&lt;/p&gt;&lt;p&gt;Fabric的短板是体系较为复杂，虽有文档，但缺少经验的开发者学习起来障碍比较大。然而由于其定位清楚，迎合了不少企业的心态，所以已经有多家机构在基于Fabric秘密研发行业内的联盟链项目。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;小众门派&lt;/h3&gt;&lt;p&gt;上述区块链开发的三大主流平台，从活跃度、受关注和参与人数来说，远远超过其他平台。但俗话说莫欺少年穷，&lt;span&gt;一些眼下还默默无闻的平台也不容忽视&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hyperledger的另一个一级孵化项目Sawtooth Lake是Intel开发的区块链平台&lt;/span&gt;，是一个很少被关注的项目，大概是因为被同在Hyperledger旗下的Fabric给掩盖了，再加上名字拗口，所以很少看到有人讨论它，项目活跃度也不高。但其实Sawtooth Lake是一个挺有想法的区块链项目，设计十分精心。它以数字金融资产管理为目标，整体架构清晰，模块化程度高，因此可定制能力也强。概念上独创了“交易族（transaction family）”概念，而且还支持PoET和Quorum两种共识机制。当节点数量很多（公有链环境）时，使用第6代Intel Core CPU所提供的SGX扩展功能提供一种称为时间流逝证明（PoET）的机制来形成共识，这种机制与比特币所采用的PoW同属“抽彩票”式的共识算法，但杜绝了通过ASIC专用硬件“作弊”的可能性，排除了比特币出现的算力过于集中的隐患，可靠性由Intel CPU硬件来保障，是公有链系统里很有价值的一个共识机制。另一方面，当节点数量少且受控时，Sawtooth Lake可以采用Quorum共识机制，这是由Ripple提出并验证的共识机制，非常适合于联盟链场景，这样Sawtooth Lake就摇身一变成为很好用的联盟链了。&lt;/p&gt;&lt;p&gt;Sawtooth Lake采用Python开发，并提供了Java SDK。由于这两种语言的流行度，实际上它应该有很大的潜在开发者人群。事实上，R3 CEV曾经测试过Sawtooth Lake并进行了成功的证券交易实验。当前它主要的问题是受关注度不足，不知Intel是否有足够的耐心和毅力坚持到底。如果Intel战略更明确一些，支持力度更大一些，我建议大家可以对它投以更多的关注。&lt;/p&gt;&lt;p&gt;&lt;span&gt;R3 Corda是一个备受关注的分布式账本项目。&lt;/span&gt;&amp;nbsp;R3是由数十家银行和金融机构支持的区块链企业，融资上亿美元，号称汇集了一票高手，潜心研究符合金融行业需求的分布式账本系统。Corda是R3分布式账本系统中的核心，在千呼万唤之后，于11月30日正式开源。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Corda采用JetBrain原创的小众语言Kotlin开发，对Java世界敞开大门，这是令人点赞的。&lt;/span&gt;此外，Corda更重要的特色是其与现有世界里大银行、大型中心机构的全面妥协、全面合作的姿态，这与以太坊革命无罪、造反有理的形象形成鲜明对比。Corda在设计中有多项独特考虑，就是为了对接现有的业务规则。比如在其他几乎所有区块链平台里，每一个交易对于各节点来说都是可见的，可见才能验证，能验证才谈得上共识，所以交易的全网可见性是顺理成章的。但是现实世界里金融机构之间的交易，只有交易相关方才能看到交易详情，工行与建行的一笔交易，绝无必要让招行看到。为了对接这个现实，Corda设计了与众不同的机制，牺牲了交易验证的全局可见性，确保只有交易相关方才能看到和验证交易本身。可是另一方面，银行业务是被重度监管的业务，不能因为你用了区块链系统，就把洋洋洒洒的巴塞尔协议晾在一边，监管机构的职能如何体现？这是其他区块链系统里考虑不多的。而Corda设计了独特的Notary和Oracle节点，为监管体系进入留下了空间。仔细品味，这些都是给现实世界当中的大机构预留的美差。这些设计上的考虑，无疑大大增强了Corda被现有大型金融机构采纳的机会。不过这一切看上去很美好，但目前Corda的实现基本上是个花架子，设想的种种，不少处于TODO状态。&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外两个值得点名的区块链门派分别是Chain和BigchainDB。&lt;/span&gt;前者跟Visa有合作，后者是一个基于RethinkDB开发的分布式账本，两者各有各的思路和特色，也拿到了为数可观的投资，不排除未来能有大的发展。限于篇幅，在这里不展开介绍了。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;区块链开发所需具备的技术基础&lt;/h3&gt;&lt;p&gt;可以预见，&lt;span&gt;未来从事区块链开发的主要有三类开发者，一类是开发基于区块链的Web或移动App&lt;/span&gt;，这种开发者所需要的技能与今天的Web和移动开发者并无二致，这里就不赘述了。&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二类开发者是开发智能合约的。&lt;/span&gt;这类开发者使用类似Solidity这样的智能合约语言，或者直接用Go、Java、Python等语言开发。开发智能合约所要求的语言和算法技术水平不高，什么并发、多线程之类的东西一般用不到，普通开发者均可胜任。但是智能合约的难点在于业务与安全。本质上智能合约就是以代码写成的商业合同，必须对于业务有非常清晰的认识，对于安全有着深刻的理解，才能够写出正确的智能合约。因此，我认为未来智能合约的开发者，可能反而是具体应用领域的行业专家出身居多，因为让他们掌握Python语言，远比让程序员去理解进出口贸易规则或者商业票据业务要容易得多。&lt;/p&gt;&lt;p&gt;&lt;span&gt;第三类开发者，就是区块链核心应用系统和核心平台的开发者。&lt;/span&gt;这部分人当然必须是技术高手，按现在通俗的说法，得是后端专家。从语言上讲，C++、Java、Python、Go、JavaScript都有可能要触及。从基础知识来说，要求对密码学、分布式系统、网络编程、系统架构和部署都有相当程度的理解和实践经验。这种开发者显然将是区块链技术浪潮当中的弄潮儿，也将是最大的受益者之一。&lt;/p&gt;&lt;p&gt;&lt;span&gt;特别要点一下密码学。密码学是大多数开发人员的短板，但若要在区块链核心技术领域搞出能够碾压竞品的创新点，密码学是最有可能出成果的地方。&lt;/span&gt;不用说搞出什么密码学突破，就是将密码学现有成果充分运用在区块链里，都可能会搞出一些逆天的创新来。比如用零知识证明协议（zero-knowledge proof）构造高度匿名化的区块链系统，比如用私有计算外包（private computing outsourcing）技术让别的节点既能够验证交易，又对交易本身的内容一无所知，这都是能够激发大量商业模式创新的技术，等待密码学黑客们发掘和实现。因此，我相信密码学成为显学的时代即将到来。&lt;/p&gt;&lt;p&gt;区块链是一项前景无限、极具颠覆性和想象空间的技术，它有潜力带来一个完全不同的商业时代，塑造新一代的互联网，也有可能被传统势力合谋异化。无论如何，区块链为创业者和程序员提供了又一次弄潮的机会，在这片蓝海上将演出一场怎样的大戏，我们且拭目以待。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 20 Jan 2017 17:06:05 +0800</pubDate>
    </item>
    <item>
      <title>Apache顶级项目8-Geode源码深度分析</title>
      <link>http://www.iwgc.cn/link/4422179</link>
      <description>&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicCXxwygmszesibsgyX9lBkRkU3ectJceGI3RZY37mtKS2fyEgSBbgzrdg/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;顶&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;级项目介绍之Geode。Apache顶级项目介绍之8，我们重新恢复Apache顶级项目系列，较之前介绍系列，我们本文直入代码分析，原因有二，Geode即上文我们分析的Gemfire的开源版本，其二被逼无奈，阅读源码查找问题。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;1. Geode&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;2016年11月21日，Apache 软件基金会（ASF）宣布 Apache® Geode™ 已从 Apache 孵化器毕业成为顶级项目（TLP），表明该项目的社区和产品已根据 ASF 的精英流程和原则得到良好管理。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Apache Geode 是一个数据管理平台，提供实时的、一致的、贯穿整个云架构地访问数据关键型应用，最初由 GemStone Systems 公司开发，商标为 GemFire。 此项技术初期被广泛应用在金融领域，用于华尔街交易平台，作为事务性、 低延时的数据引擎。2015年4月将代码提交给 Apache 孵化器作为孵化项目。&lt;span&gt;目前 Apache Geode 有超过600家大中型企业级用户, 主要是必须满足低延时和24x7 高可靠要求的，高可扩展的关键业务应用系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;2. 适用场景&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;可以参考上文，分布式缓存利器-Gemfire.&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicCbBo3rPoMR4Qpibu7yFQ9QGJJGh43eExBa1icAPk1Zfq7K5PVeUDJiaeTA/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4个主要使用场景：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;－高可用性的分布式缓存&lt;br/&gt;－网格计算&lt;br/&gt;－事件通知和处理（CEP类似）&lt;br/&gt;－交易处理（Transaction），采用最终一致性&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Geode 池化了服务器上的内存, CPU, 网络资源, 和本地磁盘，跨多个进程来管理应用对象和行为. 它使用了动态数据复制和分区技术来实现高可用, 高性能, 高可扩展性, 和容错. 另外, 对于一个分布式数据容器, Apache Geode 是一个基于内存的数据管理系统, 提供了可靠的异步事件通知和可靠的消息投递.&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;3. 数据结构源码&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;如上文所说，系统目前遇到一个分布式系统异常复杂之难题，难到不遍历源码无法解开谜题的地步。注意，笔者写此文时，此难题尚无答案，我们希望当此文发布时，已有解药。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;另外，强烈建议看官先自行了解Gemfire功能以及部分原理，否则此文较为吃力。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;3.1 Region&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;进入正题，先来看一下核心类Region。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicCMbdznnGMW6WCQ0U23EzQs6gwOyDDtT0bnbdsBcvx1e2nBD1XNpvhNw/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Region继承Java的ConcurrentMap，实现了分布式K,V的HashMap，并提供了高阶的事务，Persistence，分区等分布式功能。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;接口继承Map的get, put无须多说，看几个比较重要的。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicCfvG81T8EcuqoASDEWG9ibUGibJJSL98jO5ZowVwsAZ1ejaZnUQibicMeicw/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Geode的Region可以像树形一样，形成一种Hierarchy结构嵌套，使用"/"来分隔多个子Region.所以有向上获取父亲，自然也有向下导航获取子女：getSubregion(String path)&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;RegionDistributedLock&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicCxnhXHDp91EmE7D9g38mDwuKCWJiaRx0eJJSZWh6RT9cIpO2J7eQkeng/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;第一个分布式锁，全局Region。注释写很到位，其中提到当region创建时会自动开启全局region锁，所有对region级别的操作，如invalidateRegion, destroyRegion也可能会自动用到region级别锁，这个么可以理解，毕竟是重量级操作。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;getDistributedLock（key）&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicCYr5ZRQlDoXiafPkeSmZf4BavwXsnYPnRiczn3R5vHpu48TXcFicZibFrPQ/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;提供了更细粒度的region级别分布式锁控制。&lt;/p&gt;&lt;p&gt;然而，除非必要，所有分布式操作不建议用如此之重的锁，否则后患无穷。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;public void writeToDisk();&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;当然，支持持久化到磁盘，分布式的一种表现形式，相对于普通的HashMap。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;public void becomeLockGrantor();&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicCibXgQ9Xct1Riaqz9bqgFnxukAfsbxOjddFy0wy6icjFfbuQ36U2Jk2eJg/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;不赘述，如注释所描述，LockService的担保，前提当前region必须是Global类型，有点类似对于分布式全局变量加锁，所以每当调用此方法，线程将阻塞直到担保被转移到当前member。&lt;/p&gt;&lt;p&gt;超级重量级方法，请自保。注释强调了，相互调用可能造成死锁，说的比较委婉，back and force。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;public void registerInterest(K key);&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicCv7mia6ypuoQwY3AWCdAO4O1wHpOd7iacCDwXNxicLg61oFq6faISJDh4A/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;后续很多分布式，多个member交互的入口之一。&lt;/p&gt;&lt;p&gt;注释提到用于向&lt;strong&gt;CacheServer&lt;/strong&gt;提交注册一个感兴趣的key，后续还有按照正则表达式注册，或者注册所有key。其注册目的是用于被通知，类似ems queue的subscription功能，或者回调通知。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;public List&amp;lt;K&amp;gt; getInterestList();&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;返回当前region已经注册的所有感兴趣key。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对了，每个类代码小于500行都是骗人的，随便看看这些开源代码，少则1000，多则6-7千行代码。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;3.2&amp;nbsp;AbstractRegion&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;AbstractRegion抽象类，主要封装实现了关于RegionAttributes, AttributesMutator, and some no-brainer method&amp;nbsp;implementations。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicCGMdXcDoBMEvzx65tETEuM0nicXExoWRTsd2DVX9I8F9NrHsdxp5bDXQ/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;其中，主要cache操作的读写则由上面loader与writer代理实现。Usually there will be only one CacheWriter in&amp;nbsp;the distributed system.所以，通常整个分布式系统只有一个cache writer，其它特殊情况暂时不提。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicC6wFEcA15BLEkADDTfibiajibu2D8HOKqOh2nndECD3OiaygsFzDMnnOpxQ/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;截获entry更新事件，其中entryEvent包含了整个操作的信息，如KeyInfo, EventID, newValue, oldValue, Operation, originated member等。BTW, 这个看起来普通的EntryEvent类也有2856行，此处省略无数。。。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;protected Set&amp;lt;String&amp;gt; asyncEventQueueIds;&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;隐隐觉得，其分布式的消息事件处理会放到queue中，这里用了set结构，我们继续看下去。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;protected boolean &lt;span&gt;&lt;strong&gt;enableSubscriptionConflation&lt;/strong&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;这个参数对于高频写region非常有用，主要是同一个key高速写，类似实时报价。这个参数效果类似于Leaky Bucke。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;漏桶算法(Leaky Bucket)是网络世界中流量整形（Traffic Shaping）或速率限制（Rate Limiting）时经常使用的一种算法，它的主要目的是控制数据注入到网络的速率，平滑网络上的突发流量。漏桶算法提供了一种机制，通过它，突发流量可以被整形以便为网络提供一个稳定的流量。漏桶可以看作是一个带有常量服务时间的单服务器队列，如果漏桶（包缓存）溢出，那么数据包会被丢弃。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YzCJqLscUbZlJUu9b61FFicCm3dfSWWrVyj403CF7ibftZSb8Sv8pVjSqkxXOhlljf36oPxaIaupExg/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;3.3 Regions UML&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;当我们越加深入，发现代码越来越复杂，很多类少则几千，多则上万行，类也有上千万个，对于大型开源项目，还是来一张类图吧，掌握整体宏观很重要。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YztaObsK9meAddBNUwUm0PiaKbXFmFBhF6yatVuxnWAa53Z76fwMnNhAH5edJV6sNxYQcibsian1SpYw/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;可以看到LocalRegion继承自AbstractRegion，最重要的是内部封装了Region的数据结构。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;了解HashMap内部数据结构的朋友应该知道，其内部为数组+链表组合的二维空间；同理，Geode的Region内部数据结构则由RegionMap来抽象，持有真正的数据，而究其内部则是内置了一个ConcurrentHashMap，想想让我们来设计的话也大概如此吧。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;3.4 AbstractRegionMap&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YztaObsK9meAddBNUwUm0PiaJjUp5VC1PhslGLz64zBOZ5ln1TSbRIj3ey1Gwy3jSxNcxqs5Gz3b4A/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;可以看到里面内置一个CustomEntryConcurrentHashMap map；应该是这个map, 这是什么神器？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmsns.qpic.cn/mmsns/hQibgRpv49YztaObsK9meAddBNUwUm0PiaibWkfd4iaHn4fS2I8AGVxqbg/0"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;如果你看到了Doug Lea的大名，不要惊奇，难道Doug也为Gemfire/Geode操刀？非也。&lt;/p&gt;&lt;p&gt;Gemfire/Geode当年直接copy Doug老人家的ConcurrentHashMap, 你可以去比较一下源码，当然，GemStone也进行了一些定制化，如读锁等。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;了解完其真实内部存储数据结构后，心中略有一二，而然这也是预期之中，我们继续看如何实现分布式的精髓。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;3.5 DistributedRegion&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;我们还是先上UML图吧。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YztaObsK9meAddBNUwUm0Pia6mczvbaEqPYWicUiaEicleabA6Zq0VHSNk8DZF75GkJq3AWMEZic1aCa5A/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;DistributinRegion代表了分布式的&lt;span&gt;&lt;strong&gt;ReplicatedRegion&lt;/strong&gt;&lt;/span&gt;, 而其中则是靠CacheDistributionAdvisor来帮忙跟踪保持数据同步的。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;3.6 Partitioned Regions&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Partitioned Region为PatitionedRegion的实例化，内部则基于key的hash code来检测定位Bucket。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YztaObsK9meAddBNUwUm0PiagDg54icWaxrwNKlkRH9cJCerb0o8hNPNkv72icp0VSgEHV3vFNYMLTqQ/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;PartitionedRegion&lt;/strong&gt;，Geode中的核心分布式结构。通过hash算法（可以自定义）来把key映射到相应的bucket从而达到分布式存储，并提供routing消息到相应的bucket。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;PartionedRegion中的PartitionedRegionDataStore则实际负责分布式管理bucket，以及存储。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;PRHARedundancyProvider&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;类如其名:&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YztaObsK9meAddBNUwUm0PiaC9sxkdXcgSxBQAYxCb4QPfNicwXIEZHgkjlibthfv0MlIvW8uRqPqWTg/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;主要提供针对Reduancy Copy的管理，包括：&lt;/p&gt;&lt;p&gt;bucket创建，以及node的管理。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;当创建并配bucket的时候，其内部创建出BucketRegion的实例, 来看一下BucketRegion中经典的virtualPut:&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YztaObsK9meAddBNUwUm0PiaUibVmE7q4TqLzexVFh4jiaiaLaeE6xpsTk54qb1OiaKFfAMQVnTU8ClvwQ/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;注释很好，&amp;nbsp;&lt;/p&gt;&lt;p&gt;如果当前是Primary, 则op locally, 之后分发操作op到secondaries及bridge server，同时cache listerner同步其结果；&lt;/p&gt;&lt;p&gt;反之，则首先op locally，之后更新local bridge server， gateway&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;来个序列图吧：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YztaObsK9meAddBNUwUm0Pia9n8gcbVQGPntYsGibFXjp4ZAEXFd6dFCvbBwqOzv3fVOFianmQdM5G6g/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;4. 分布式管理&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Geode的分布式消息通信分为主要两大类，一类是Peer to Peer，主要使用了InternalDistributedMember。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;4.1 Peer to Peer 消息机制&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;InternalDistributedMember封装了分布式member的信息，当需要发送p2p消息时，需要用该对象表明目标。&lt;/p&gt;&lt;p&gt;DM提供了获取所有当前cluster中的peers列表，并通过listerners来获取动态信息，而其底层则是通过DistributionAdvisor实现，统一的模式，所以真正筹谋画册的都是幕僚。DM主要封装了相关的网络通信信息，包含netMember, dcPort（direct channel port）, vmPid（member machine's process id）等，当然实现特定内部序列化接口（DataSerializableFixedID）是必不可少的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;而消息则是DistributionMessage封装，包含了上述InternalDistributedMember信息的sender与destination,以及多个recipients的InternalDistrbutedMember[]数组，还有万恶的用于direct ack的ReplySender等。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;整个消息通信过程大概是先创建DistributionMessage, 设定recipient（可以多个）,之后调用(DistrbutManager DM) DM.putOutgoing(message)。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;如果需要不但发送消息，而且还要确认消息回复response，则要使用著名的ReplyProcessor21, 如果你看到过Gemfire/Geode的ThreadDump, 你就明白我说什么了。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YztaObsK9meAddBNUwUm0Piar54oyGfI1L4glVzsolPGL885qicA5U2NW2H0gZU6iciaRtAjUKkyPia1pA/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;还是来个序列图吧，一图抵千言。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YztaObsK9meAddBNUwUm0PiaBIHlpqqIZXDLJyugs4EAbYdkXfw0iaeKibT4jkxXglQpAYVTb0dMKaOQ/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;最后在远端则是通用的处理：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YyILiaTiaUkjEQAYs0GNAbH2ticXEzUMkJ0oLRtWZcQEaEk2PDns2ic0JojribwQ9zcyKy3c94mYfNshaA/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;最后，远端返回replyMessage，并使用相同的unique id，sender收到消息后，找到ReplyProcessor，并wakeup thread waitForRepliesUninterrupibly()。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;4.2 Client / Server 通信&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Client/Server通信机制与p2p略有不同。Server端封装了command，引入智囊团BridgeServerImpl, AcceptorImpl, Client端则封装了AbstractOp。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YyILiaTiaUkjEQAYs0GNAbH2tbeodpL1YibhzDwU6NRAA4pLfic08l1Po42fGMH3f1MnvupIF7ia02J2Ig/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;Acceptorimpl主要监听socket端口，接受客户端的链接。而其中又通过区分max-connections, max-threads而分为使用dedicated thread还是selector模式的NIO处理。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/hQibgRpv49YyILiaTiaUkjEQAYs0GNAbH2tg5xcia7lX8JrWialKXa5wflkbQGaQR76VzYKlM8jiaPfxHZneibYKA9hHA/0?wx_fmt=jpeg"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;客户端则使用PoolImpl来管理连接connections，client region则持有serverRegionProxy以便实现调用。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;值得注意的是，客户端可以通过subscribe events于特定／多个region或者通过内置的continuous queries，这样当服务器端有数据更新则client端可以受到更新的通知event。&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;5. 总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;好吧，时间，篇幅受限，我们先到此。&lt;/p&gt;&lt;p&gt;我们把核心的数据结构以及分布式通信的核心类大概介绍了一下，详细细节还需要仔细阅读源码，有时间有精力的话再来一篇。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 20 Jan 2017 17:06:05 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】HPE收购超融合技术公司SimpliVity，ElasticSearch 5.1.2 发布</title>
      <link>http://www.iwgc.cn/link/4422180</link>
      <description>&lt;p&gt;Cloudaily网罗新鲜要闻，每日为你呈现&lt;span&gt;大数据和云计算领域&lt;/span&gt;热点新闻。本次内容播报如下：&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;Deis v1.13.4 发布，开源 PaaS 系统&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;开源 PaaS 系统 Deis v1.13.4 发布了。该版本是 v1 系列的最终维护版。注意，对 Deis v1 LTS 的支持将于 2017 年 2 月 13 日结束。请参阅 Deis Workflow 以获取下一代 PaaS。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;羽毛也疯狂，盘点 Apache 最新毕业的11个顶级项目&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;自1999年成立至今，Apache 软件基金会已成功建立起自己强大的生态圈。其社区涌现了非常多优秀的开源项目，同时有越来越多国内外项目走向这个国际开源社区进行孵化。据悉，目前所有的 Apache 项目都需要经过孵化器孵化，满足一系列质量要求之后才可毕业。从孵化器里毕业的项目，要么独立成为顶级项目，要么成为其他顶级项目的子项目。为便于了解 Apache 孵化的标准，本文盘点了 Apache 从2016年1月1日至2017年1月19日所有孵化成功并独立管理的顶级项目，共有11个。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;ElasticSearch 5.1.2 发布，开源系列合集&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ElasticSearch 5.1.2 发布了，ElasticStack 是一系列开源产品的合集，包括 Elasticsearch、Kibana、Logstash 以及 Beats 等等。主要增强Internal、Mapping、Network、Plugins等性能，还修复了部分bug。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;HPE宣布以6.5亿美元收购超融合技术公司SimpliVity&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;之前一直有消息称HPE正在考虑以40亿美元左右的价格收购超融合基础设施服务商Simplivity。18日，HPE方面宣布以6.5亿美元完成了对SimpliVity的收购。Simplivity是超融合基础设施一体机（HCIA）市场的第二大初创公司，并且也是存储市场中增长最快的公司。Simplivity与戴尔、思科以及联想和华为都有合作。HPE有自己内部开发的CS 200系列产品；Simplivity套件采用FPGA加速，因此与HPE 3PAR StorServe阵列中使用的ASIC加速是匹配的。Simplivity加入HPE大家族的话会因为HPE庞大的渠道得到扩展，当然，HPE也会因为Simplivity的加入增强自身的基础设施、自动化和云服务能力。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;ZStack获阿里云数千万A轮融资 发布混合云战略&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1月18日，企业专有云、混合云市场的创新者ZStack举办了以“进化”为主题的ZStack产品战略及融资新闻发布会。在发布会上，ZStack表示随着企业应用加速云化，企业云计算正在从项目型向产品型进化，混合云也因为满足敏捷性、安全性等关键需求而获得企业的青睐。据此，ZStack宣布与阿里云进行战略合作，获得由阿里云领投，找钢网胖猫创投、紫竹小苗基金跟投的数千万人民币A轮投资，并推出以公共云为中心的混合云战略，未来更将向基于IaaS的企业软件仓库分发部署方式进化。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;新疆首个智慧城市时空大数据与云平台建设正式启动&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;近日，乌鲁木齐智慧时空大数据与云平台项目正式启动，拉开了新疆智慧时空大数据与云平台建设的序幕。据了解，乌鲁木齐智慧时空大数据与云平台项目已正式列入国家测绘地理信息局试点计划，由国家测绘地理信息局、新疆测绘地理信息局、乌鲁木齐人民政府合作共建，建设成果三方共享。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;工信部：2020年大数据业务收入破万亿&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;近日，工信部正式发布的《大数据产业发展规划（2016-2020）》提出，到2020年，技术先进、应用繁荣、保障有力的大数据产业体系基本形成。大数据相关产品和服务业务收入突破1万亿元，年均复合增长率保持30%左右。随着大数据产业的快速发展，相关上市公司开始分享政策和产业红利。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;大数据安全企业「比特信安」完成千万级天使轮融资&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;近日，成都比特信安宣布完成千万级天使轮融资，本轮融资由成都工投集团领投，成都技术转移集团、天大清源跟投。来自成都本土的大数据企业“比特信安”是一家做大数据安全的公司，对标的国外企业为Ganzang（被大数据第一品牌Cloudrea收购，溢价100倍）。目前在中国大数据领域，做大数据安全的企业非常少，比特信安的静态数据加密技术、涉密信息大数据保密检查系统以及数据脱敏解决方案非常值得关注。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;农村金融征信平台“农信宝”获千万融资，专注于为用户提供大数据风控服务&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;成立于2015年12月的农信宝是一家专注于提供农村征信的金融服务公司。该公司主要针对农村群体，基于“互联网+IPC+大数据”的风控方式，提供专业的信用评估及金融服务。近日，该公司刚刚获得了数千万元的Pre-A轮融资，投资方为万豪投资。届时，该笔资金将全部用于扩充团队及市场拓展方面。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;买买买！国际科技巨头开启云计算军备竞赛&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;821亿美元（约5700亿人民币）——这是Gartner（高德纳咨询公司）对今年全球云计算市场规模的预判。“矿藏”如此丰富，自然吸引了众多的淘金者。甲骨文公司近日宣布，它已斥资6亿美金收购流行的DNS提供商Dyn。甲骨文计划将Dyn的DNS解决方案添加到其更大的云计算平台，该平台已经销售并提供各种基础架构的服务和产品。实际上，早在2006年亚马逊就收购了AWS，谷歌云、阿里云等巨头在云计算产品矩阵与解决方案方面已经形成全面布局，云计算市场的鏖战已经打响。&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjWqWQKwZ728ibFMEuMWIGCqcicT92G6jgTZ2AqWqibn8AhbTIW2OqVv92LkmAULwumuZrFeDBmU3UJ6w/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br/&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/p&gt;&lt;/blockquote&gt;</description>
      <pubDate>Fri, 20 Jan 2017 17:06:05 +0800</pubDate>
    </item>
    <item>
      <title>2016年人工智能技术进展大盘点</title>
      <link>http://www.iwgc.cn/link/4406907</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者简介：&lt;/span&gt;赵永科，笔名卜居，CSDN博主，坚持写技术博客8年。现就职于阿里云计算有限公司，从事异构平台上的人工智能算法优化与系统设计，热爱读书和NES游戏。著有《深度学习：21 天实战 Caffe》一书。&amp;nbsp;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果说2015年大家还在质疑深度学习、人工智能，认为这是又一轮泡沫的开始，那么2016年可以说是人工智能全面影响人们生活的一年。从AlphaGo到无人驾驶，从美国大选到量子计算机，从小Ai预测“我是歌手”到马斯克的太空计划，每个焦点事件背后都与人工智能有联系。纵览2016年的人工智能技术，笔者的印象是实用化、智能化、芯片化、生态化，让所有人都触手可及。下面我们以时间为坐标，盘点这一年的技术进展。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;AlphaGo&lt;/h3&gt;&lt;p&gt;3月9-15日，棋坛新秀AlphaGo一战成名，以4:1成绩打败韩国职业棋手围棋九段李世石（围棋规则介绍：对弈双方在19x19棋盘网格的交叉点上交替放置黑色和白色的棋子，落子完毕后，棋子不能移动，对弈过程中围地吃子，以所围“地”的大小决定胜负）。&lt;/p&gt;&lt;p&gt;其实早在2015年10月，AlphaGo v13在与职业棋手、欧洲冠军樊麾二段的五番棋比赛中，以5:0获胜。在与李世石九段比赛中版本为v18，赛后，AlphaGo荣获韩国棋院授予的“第〇〇一号 名誉九段”证书。7月19日，AlphaGo在GoRantings世界围棋排名中超过柯洁，成为世界第一。&lt;/p&gt;&lt;p&gt;看到AlphaGo这一连串不可思议的成绩，我们不禁要问，是什么让AlphaGo在短短时间内就能以如此大的能量在古老的围棋这一竞技项目迅速击败数千年历史积累的人类？&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vI8MfcaXrUsFQO243B0zU2Xb6Rwtu6Wll4TaeO4gyjz7qdEicAhtpMFw/640?wx_fmt=png"/&gt;&lt;span&gt;图1 AlphaGo与李世石的对阵&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;AlphaGo由Google在2014年收购的英国人工智能公司DeepMind开发，背后是一套神经网络系统，由许多个数据中心作为节点相连，每个节点内有多台超级计算机。这个系统基于卷积神经网络（Convolutional Neural Network, CNN）——一种在大型图像处理上有着优秀表现的神经网络，常用于人工智能图像识别，比如Google的图片搜索、百度的识图、阿里巴巴拍立淘等都运用了卷积神经网络。AlphaGo背后的系统还借鉴了一种名为深度强化学习（Deep Q-Learning，DQN）的技巧。强化学习的灵感来源于心理学中的行为主义理论，即有机体如何在环境给予的奖励或惩罚的刺激下，逐步形成对刺激的预期，产生能获得最大利益的习惯性行为。不仅如此，AlphaGo借鉴了蒙特卡洛树搜索算法（Monte Carlo Tree Search），在判断当前局面的效用函数（value function）和决定下一步的策略函数（policy function）上有着非常好的表现。作为一个基于卷积神经网络、采用了强化学习模型的人工智能，AlphaGo具有广泛适应性，学习能力很强，除了玩游戏、下围棋，最近的DeepMind Health项目将人工智能引入了疾病诊断和预测中，为人们的健康提供更好的保障。&lt;/p&gt;&lt;p&gt;AlphaGo系统和IBM在上个世纪打败国际象棋大师卡斯帕罗夫的深蓝超级计算机有什么不同？&lt;/p&gt;&lt;p&gt;国际象棋AI算法一般是枚举所有可能招法，给局面打分。AI能力主要分为两方面：一是局面打分算法是否合理，二是迭代的深度。国际象棋开局的时候可以动8个兵（*2）和两个马（*2）共20种招法，虽然开局到中期招法会多一点，但是总数也就是几十种，游戏判断局面也简单，将军的加分，攻击强子加分，被将军或者有强子被攻击减分，控制范围大的加分，国际象棋里即将升变的兵加分，粗略一算就可以有个相对不错的判断。&lt;/p&gt;&lt;p&gt;围棋棋盘上每一点，都有黑、白、空，三种情况，棋盘上共有19*19=361个点，所以可能产生的局数为3的361次方种（可以想象，从137亿年前宇宙初始下起，60亿人口每天下60亿盘，到目前为止，只下了不到亿亿亿万分之一）。&lt;/p&gt;&lt;p&gt;围棋可选招法非常多，在初期可以全盘落子，打劫的时候则要找“劫材”。围棋判断形势的复杂度也很高，因为所有棋子地位平等，不在于一子定胜负，但每一子对于全局又都是牵一发而动全身，所以需要的是整体协调和全局决策。AlphaGo不仅能很快计算围棋当前局面的效用函数和决定下一步的策略函数，还能结合蒙特卡洛树搜索算法进行纵深的分析，得到整局棋的“最优解”。无论从计算复杂度还是决策的深度上，AlphaGo都有质的飞跃。&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;小结：&lt;/span&gt;&amp;nbsp;AlphaGo可能是Google公关塑造的一个AI形象，但这是一次十分成功的尝试，引起了世界性的关注。在这些华丽的成绩之外，技术铺垫仍然是一项不容小觑的工作，包括DQN算法模型与硬件平台。我们接下来会详细介绍。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;深度增强学习DQN&lt;/h3&gt;&lt;p&gt;增强学习是最近几年中机器学习领域的最新进展。&lt;/p&gt;&lt;p&gt;增强学习的目的是通过和环境交互学习到如何在相应的观测中采取最优行为。行为的好坏可以通过环境给的奖励来确定。不同的环境有不同的观测和奖励。&lt;/p&gt;&lt;p&gt;增强学习和传统机器学习的最大区别在于，增强学习是一个闭环学习的系统，算法选取的行为会直接影响到环境，进而影响到该算法之后从环境中得到的观测。&lt;/p&gt;&lt;p&gt;增强学习存在着很多传统机器学习所不具备的挑战。&lt;/p&gt;&lt;p&gt;首先，因为在增强学习中没有确定在每一时刻应该采取哪个行为的信息，算法必须通过探索各种可能才能判断出最优行为。如何有效地在可能行为数量较多的情况下有效探索，是增强学习的重要问题。&lt;/p&gt;&lt;p&gt;其次，在增强学习中一个行为不仅可能会影响当前时刻的奖励，而且还可能会影响之后所有时刻的奖励。&lt;/p&gt;&lt;p&gt;在最坏的情况下，一个好行为不会在当前时刻获得奖励，而会在很多步都执行正确后才能得到。在这种情况下，判断出奖励和很多步之前的行为有关非常难。&lt;/p&gt;&lt;p&gt;虽然增强学习存在很多挑战，它也能够解决很多传统机器学习不能解决的问题。首先，由于不需要标注的过程，增强学习可以更有效地解决环境中所存在着的特殊情况。比如，无人车环境中可能会出现行人和动物乱穿马路的特殊情况。只要模拟器能模拟出这些特殊情况，增强学习就可以学习到怎么在这些特殊情况中做出正确的行为。其次，增强学习可以把整个系统作为一个整体，从而对其中的一些模块更加鲁棒。例如，自动驾驶中的感知模块不可能做到完全可靠。前一段时间，特斯拉无人驾驶的事故就是因为在强光环境中感知模块失效导致的。增强学习可以做到，即使在某些模块失效的情况下也能做出稳妥的行为。最后，增强学习可以比较容易学习到一系列行为。&lt;/p&gt;&lt;p&gt;自动驾驶需要执行一系列正确的行为才能成功驾驶。如果只有标注数据，学习到的模型每个时刻偏移了一点，到最后可能就会偏移非常多，产生毁灭性的后果。而增强学习能够学会自动修正偏移。&lt;/p&gt;&lt;p&gt;DeepMind曾用五款雅达利（Atari）游戏Pong、打砖块、太空侵略者、海底救人、Beam Rider分别测试了自己开发的人工智能，结果发现：游戏后，神经网络的操控能力已经远超世界上任何一位已知的游戏高手。&lt;/p&gt;&lt;p&gt;DeepMind用同样的一套人工智能，测试各种各样的智力竞技项目，取得了优异的战绩，足以证明坐在李世石面前的AlphaGo，拥有多强的学习能力。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vDGSwY1Jz9gC56VkyQovtQvCwHxHTWXWc7l13QMnmZdwy6c3A59VEZw/640?wx_fmt=png"/&gt;&lt;span&gt;图2 Atari游戏画面&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;小结：&lt;/span&gt;如果说深度学习相当于嗷嗷待哺的婴儿，需要人们准备好大量有营养的数据亲手喂给它，那么增强学习就是拥有基本生活能力的青少年，叛逆而独立，充满激情，喜欢挑战，不断在对抗中学习成长。虽然与成熟的人工智能仍有较大差距，但可以肯定，这只是个时间问题。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;Google TPU&lt;/h3&gt;&lt;p&gt;Google在今年5月18日Google I/O大会上宣布了加速机器学习的定制ASIC方案：张量处理单元（TPU）。这款芯片由Google工程师设计，用于加速TensorFlow软件，在AlphaGo中TPU也大显神通。TPU已经在用户无感知的情况下在Google云语音、Gmail、Google Photos和Google搜索业务中使用了一年时间。相比目前商品级GPU和FPGA，TPU每瓦性能高出一个数量级。&lt;/p&gt;&lt;p&gt;在大多数企业和研究机构中，设计并构建应用专用处理器是十分奢侈的。开发芯片即使很小的设计也需要投入上百万美元。定制设计的优势相比通用处理器具备更好的性能以及能效。为了平衡收支，需要大规模使用案例和部署量，这样才能将成本摊薄。云服务厂商显然满足这个条件。&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vJ3KHJVu6JzDSSML1rvPNYYBTuTdTEPyqxzlYCeUDYawRImo7GpXQYg/640?wx_fmt=png"/&gt;&lt;span&gt;图3 Google TPU近照&lt;/span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vPKdYLAnmXoIuaicTt8ic4gf5kI0Svu4b7Fy2SaVKEdC4JFmDzW2JDaVw/640?wx_fmt=png"/&gt;&lt;span&gt;图4 配备Google TPU的集群&lt;/span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vQBqx6wUPoYfLGT83mOyCq36ExxCgpWd6RmYP7jhZ3UHlnFxiaWSV6ww/640?wx_fmt=png"/&gt;&lt;span&gt;图5 寒武纪深度神经网络处理器发布现场&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Google认为机器学习的规模是不可预估的，因此有必要构建专用硬件。这个举动当然也给世界上两大芯片厂商——Intel和NVIDIA带来不小触动，两家在新产品的研发上不得不多了一个难缠的对手。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;近两年国内的人工智能处理器也如火如荼，最为知名的寒武纪深度神经网络处理器架构采用硬件神经元和硬件突触作为运算器，并为神经网络的高速连接设计了存储结构，另外还专门设计了与通用处理器完全不同的指令集。最新推出的寒武纪-1A（Cambricon-1A）商用智能处理器IP产品，可集成至各类终端SoC芯片，每秒可处理160亿个虚拟神经元，每秒峰值运算能力达2万亿虚拟突触，性能比通用处理器高两个数量级，功耗降低了一个数量级。该处理器荣获第三届世界互联网大会“世界互联网领先科技成果”奖项。&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;小结：&lt;/span&gt;通用处理器的设计和制造一向由芯片巨头垄断，而在人工智能快速发展的这几年，新架构、新应用使得处理器设计的话语权逐步转移到更大体量的互联网公司，利用规模优势，按照日益增长的需求定制计算架构，在处理器历史上书写新的篇章。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;智能驾驶&lt;/h3&gt;&lt;p&gt;汽车关系到人们出行，几乎每天必备，而利用人工智能解决出行需求是一个大胆的尝试。从去年的“滴滴”、“快的”烧钱大战开始，到两家合并、今年滴滴完成了对Uber中国并购，国内打车软件实现大一统。技术上，目前主要是利用大数据指导车辆调度，利用更少的成本满足乘客的需求。而各地曝光的打车乱象也成为平台痼疾。如何利用技术克服人性的弱点，是个自然而然的问题。一种思路是使用机器代替人担任司机。&lt;/p&gt;&lt;p&gt;无人驾驶、人工智能等已成为世界性的前沿科技，Google、微软、特斯拉等科技巨头新贵等纷纷布局于此，足见无人车极高的研发价值和广阔的市场。&lt;/p&gt;&lt;p&gt;除了商业价值，无人驾驶所能带来的社会价值更加让人浮想联翩。&lt;/p&gt;&lt;p&gt;首先可以想到，未来无人驾驶技术成熟，可以解放人们的双手。开车出行时，可以有更多的时间做自己的事情。而对于残障人士来说，则意义更大，可以有效提高出行效率，过上更加便捷快速的交通生活。&lt;/p&gt;&lt;p&gt;其次，无人车一定程度上会革新现代交通模式，解决交通道路安全问题。百度高级副总裁、自动驾驶事业部总经理王劲曾表示，人工智能用大量的服务器和数据来拟合成人类的驾驶能力，这个系统会比人类所有驾驶员甚至赛车手的水平都更高，这样才能保障驾驶的安全性。安全性之外，智能化的无人车同时也是大数据集散中心，可以时时将交通状况、行驶情况回传，政府交通指挥中心根据大数据进行交通调度，势必可以更好解决拥堵问题。此外，无人车还能推动汽车工业更环保，同时激活更多新兴产业，带动新的产业升级和行业转型，促进更多就业，高精尖人才的发展。&lt;/p&gt;&lt;p&gt;&lt;span&gt;特斯拉（Tesla）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;今年10月20日，马斯克宣布所有特斯拉新车将装备具有全自动驾驶功能的硬件系统——Autopilot 2.0，这套系统包括了8个摄像机、12个超声波传感器以及一个前向探测雷达。摄像机将提供360度的视角，最大识别距离250米，其中三个将观察前方，提供冗余以确保安全；超声波传感器能够探测软性和硬性的物体；而雷达则可以确保在雨天、雾天、沙尘和雾霾天气中正常工作。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vqVvYyqzcOVDicVa8IgK474bPZiaWj6VUEGOm9IZlMh7AEcbpMyoTjevA/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;图6 Tesla汽车内景&lt;/center&gt;&lt;p&gt;&lt;span&gt;此外升级的还有车载电脑——新系统的大脑“Tesla Neural Net”（特斯拉神经网）基于nVIDIA的Titan GPU——每秒钟能进行12万亿次计算，比上一代车载电脑快了40倍。马斯克表示，这次的硬件升级将会即时实行，成为未来特斯拉汽车的标配。换句话说，从今天起，每辆新产出的特斯拉都会具有完全自动驾驶的能力。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;百度无人车&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在11月16日开幕的第三届世界互联网大会上，百度无人车再次亮相。大会期间，18辆百度无人车在桐乡市子夜路智能汽车和智慧交通示范区内首次进行开放城市道路运营。此次百度无人车在乌镇运营体验，是百度首次在开放城市道路情况下，实现全程无人工干预的L4级无人驾驶技术。&lt;/p&gt;&lt;p&gt;在去年12月的乌镇世界互联网大会上，习近平主席视察互联网之光博览会时，百度CEO李彦宏向习近平介绍了百度无人驾驶车。&lt;/p&gt;&lt;p&gt;早在2013年，百度就已经开启了前沿领域的项目布局，无人车由百度研究院主导历时两年研发，2015年12月，更是专门成立自动驾驶事业部，足见百度对无人车项目的重视。凭借LBS、图像识别、大数据等领域深厚的技术积累和人工智能技术的领先，目前百度无人车的研发已经达到世界领先地位。&lt;/p&gt;&lt;p&gt;百度无人驾驶是国内唯一一家通过功能安全ISO26262国际标准的全自动驾驶研究项目。去年12月，百度无人车实现了在北京五环上的上路测试，最高时速100公里，并首次实现城市、环路及高速道路混合路况下全自动驾驶，标志着中国无人驾驶车的发展进入里程碑的新阶段。&lt;/p&gt;&lt;p&gt;对于无人车来说，人工智能、深度学习的技术发展至关重要。无人车在行驶过程中，摄像头、感应器等原件会收集大量数据，而这些数据需要实时处理和分析，通过高性能的计算能力、先进的算法及深度学习系统，来实时适应周围的路面情况自动驾驶汽车。&lt;/p&gt;&lt;p&gt;而据了解，百度在国内拥有首家自主研发的三维高精度地图技术，已达到较高精度，同时具备国内领先的高精度地图采集与自动化处理技术，具备完整的高精度地图采集与自动化处理系统，可支持高精度地图的规模化生产。另外，百度也已经掌握了国内领先的实时高精度定位技术，实现厘米级的定位精度，相比于GPS定位精度提升了两个数量级。在关键技术上“领跑”世界。&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;小结：&lt;/span&gt;智能驾驶是一项复杂的工程，涵盖了汽车制造、自动控制、传感器、人工智能、地理信息、云计算、交通法规、社会伦理等多个领域，需要极强的技术水准和高尚的职业操守。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;Intel人工智能布局&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Intel收购Nervana&lt;/span&gt;&lt;/p&gt;&lt;p&gt;8月9日，Intel宣布收购创业公司Nervana Systems。Nervana的IP和加速深度学习算法经验可帮助Intel在人工智能领域获得一席之地。&lt;/p&gt;&lt;p&gt;Nervana提供基于云的服务用于深度学习，使用独立开发的、使用汇编级别优化的、支持多GPU的Neon软件，在卷积计算时采用了Winograd算法，数据载入也做了很多优化。该公司宣称，训练模型时，Neon比使用最普遍的Caffe快2倍。不仅如此，Nervana准备推出深度学习定制芯片Nervana Engine，相比GPU在训练方面可以提升10倍性能。与Tesla P100类似，该芯片也利用16-bit半精度浮点计算单元和大容量高带宽内存（HBM，计划为32GB，是竞品P100的两倍），摒弃了大量深度学习不需要的通用计算单元。&lt;/p&gt;&lt;p&gt;在硬件基础上，Nervana于11月份推出了Intel Nervana Graph平台（简称ngraph）。该框架由三部分组成：一个用于创建计算图的API、用于处理常见深度学习工作流的前端API（目前支持TensorFlow和Neon）、用于在 CPU/GPU/Nervana Engine上编译执行计算图的转换器API。&lt;/p&gt;&lt;p&gt;与此同时宣布成立Intel Nervana人工智能委员会，加拿大蒙特利尔大学Yoshua Bengio教授担任创始会员。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vmx5n4IAYz33j0NrDibJQmJz8zP238C7gUtY0NJy3UJz1eeamibb1Ticzg/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;图7 Nervana Engine芯片架构&lt;/center&gt;&lt;p&gt;&lt;span&gt;8月17日，在Intel开发者峰会（IDF）上，Intel透露了面向深度学习应用的新Xeon Phi处理器，名为Knights Mill（缩写为 KNM）。它不是Knights Landing和Knights Hill的竞品，而是定位在神经网络云服务中与NVIDIA Tesla GPU一较高下。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2v9vY8gXugjB1IB8LekVVXyz9UDkicHaF3wovfDyBDjLPXKvIkjGOnjZQ/640?wx_fmt=png"/&gt;&lt;span&gt;图8 ngraph框架&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;9月6日，Intel收购计算机视觉创业公司Movidius。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Movidius是人工智能芯片厂商，提供低能耗计算机视觉芯片组。Google眼镜内配置了Movidius计算机视觉芯片。Movidius芯片可以应用在可穿戴设备、无人机和机器人中，完成目标识别和深度测量等任务。除了Google之外Movidius与国内联想和大疆等公司签订了协议。Movidius的Myriad 2系列图形处理器已经被联想用来开发下一代虚拟现实产品。&lt;/p&gt;&lt;p&gt;9月8日，Intel FPGA技术大会（IFTD）杭州站宣布了Xeon-FPGA集成芯片项目。这是Intel并购Altera后最大的整合举动，Intel将推出CPU+FPGA架构的硬件平台，该平台预计于2017年量产，届时，一片Skylake架构的Xeon CPU和一片Stratix10的FPGA将“合二为一”，通过QPI Cache一致性互联使FPGA获得高带宽、低延迟的数据通路。在这种形态中，FPGA本身就成为了CPU的一部分，甚至CPU上的软件无需“感知”到FPGA的存在，直接调用mkl库就可以利用 FPGA来加速某些计算密集的任务。&lt;/p&gt;&lt;p&gt;Xeon-FPGA样机已经在世界七大云厂商（Amazon、Google、微软、Facebook、百度、阿里、腾讯）试用，用于加速各自业务热点和基础设施，包括机器学习、搜索算法、数据库、存储、压缩、加密、高速网络互连等。&lt;/p&gt;&lt;p&gt;除了上面CPU+FPGA集成的解决方案，Altera也有基于PCIe加速卡的解决方案。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vInd9MPvSfQS7yxp6DjTdqo5Cb27oYyibyOhosNeUpUP4VABYSGB76ug/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;图9 Xeon-FPGA集成芯片架构&lt;/center&gt;&lt;p&gt;&lt;span&gt;11月8日ISDF大会上宣布，预计明年将销售深度学习预测加速器（DLIA，Deep Learning Inference Accelerator）。该加速器为软硬件集成的解决方案，用于加速卷积神经网络的预测（即前向计算）。软件基于Intel MKL-DNN软件库和Caffe框架，便于二次开发，基于PCIe的FPGA加速卡提供硬件加速。该产品将直接同Google TPU、NVIDIA Tesla P4/M4展开竞争。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;小结：&lt;/span&gt;&amp;nbsp;Intel在人工智能领域的动作之大（All in AI），品类之全（面向训练、预测，面向服务器、嵌入式），涉猎之广（Xeon Phi，FPGA，ASIC）令人为之一振。冰冻三尺非一日之寒，AI硬件和上层软件的推广与普及还有很长一段路要走。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;NVIDIA人工智能布局&lt;/h3&gt;&lt;p&gt;NVIDIA财报显示，深度学习用户目前占据数据中心销售额一半，而HPC占三分之一，剩下的为虚拟化（例如虚拟桌面）。这也驱动NVIDIA在硬件架构和软件库方面不断加强深度学习性能，典型例子是在Maxwell处理器中最大化单精度性能，而在Pascal架构中增加了半精度运算单元。与HPC不同，深度学习软件能够利用较低精度实现较高吞吐。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Pascal架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在4月5日GTC（GPU Technology Conference）2016大会上，NVIDIA发布了16nm FinFET制程超级核弹帕斯卡（Pascal）显卡，最让人惊叹的还是一款定位于深度学习的超级计算机DGX-1。DGX-1拥有8颗帕斯卡架构GP100核心的Tesla P100 GPU，以及7TB的SSD，两颗16核心的Xeon E5-2698 v3以及512GB的DDR4内存，半精度浮点处理能力170TFLOPS，功耗3.2kW。售价129000美元，现已面市。&lt;/p&gt;&lt;p&gt;9月13日，NVIDIA在GTC中国北京站发布了Tesla P4和P40。这两个处理器也基于最新的Pascal架构，是去年发布的M4和M40的升级版，包括了面向深度学习预测计算的功能单元，丢掉了64位双精度浮点计算单元，取而代之的是8-bit整数算法单元。详细参数如下。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vvYiaibtqIUJ8ULgZhiaS2ojDicK0JwPsD0UcWHd5OfLdtkqNNY5zFMsw3Q/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;图10 DGX-1外观&lt;/center&gt;&lt;p&gt;&lt;span&gt;Tesla P4为半高半长卡，功耗只有50~75W，便于安装到已有的Web Server提供高效的预测服务。同时，P4包括一个视频解码引擎和两个视频编码引擎，对基于视频的预测服务更为适合。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Tesla P40与P4用途稍有不同，绝对性能高，适合训练+预测，使用GoogLeNet评估时相比上一代M40有8倍性能提升。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vaWfG2l1QTtkTEpj5txqVZTpgz7OySyuHe2lYKSLPJ9RJVo1tlWrBJw/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;图11 Tesla P4/P40参数对比&lt;/center&gt;&lt;p&gt;&lt;span&gt;Tesla P100仍然是最合适训练的GPU，自带NVLink多GPU快速互联接口和HBM2。这些特性是P40和P4不具备的，因为面向预测的GPU不需要这些。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Pascal家族从P100到P4，相对三年前的Kepler架构提速达到40~60倍。&lt;/p&gt;&lt;p&gt;在硬件之外，NVIDIA软件方面也不遗余力。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2v0z5ibfOn7BcQbVZmvNy3cGrqGU9Y3XCJVzDd7Dvf4PqaqD5E4pf6Pfw/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;图12 NVIDIA Pascal架构软硬件加速情况&lt;/center&gt;&lt;p&gt;&lt;span&gt;cuDNN&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;NVIDIA CUDA深度神经网络库（cuDNN）是一个GPU上的深度神经网络原语加速库。cuDNN提供高度优化的标准功能（例如卷积、下采样、归一化、激活层、LSTM的前向和后向计算）实现。目前cuDNN支持绝大多数广泛使用的深度学习框架如Caffe、TensorFlow、Theano、Torch和CNTK等。对使用频率高的计算，如VGG模型中的3x3卷积做了特别优化。支持Windows/Linux/MacOS系统，支持Pascal/Maxwell/Kepler硬件架构，支持嵌入式平台Tegra K1/X1。在Pascal架构上使用FP16实现，以减少内存占用并提升计算性能。&lt;/p&gt;&lt;p&gt;&lt;span&gt;TensorRT&lt;/span&gt;&lt;/p&gt;&lt;p&gt;TensorRT是一个提供更快响应时间的神经网络预测引擎，适合深度学习应用产品上线部署。开发者可以使用TensorRT实现高效预测，利用INT8或FP16优化过的低精度计算，可以显著降低延迟。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vzzYFibicbVBXicBuLqL3vyica8OUEjNq1vp6xiaibZBwAQrMic6Ol0a0QX4Mg/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;图13 TensorRT的使用方式&lt;/center&gt;&lt;p&gt;&lt;span&gt;DeepStream SDK支持深度学习视频分析，在送入预测引擎之前做解码、预处理。&amp;nbsp;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这两个软件库都是与Pascal GPU一起使用的。&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;小结：&lt;/span&gt;&amp;nbsp;NVIDIA是最早在AI发力的硬件厂商，但从未停止在软件上的开发和探索，不断向上发展，蚕食、扩充自己在AI的地盘，目前已经涵盖服务器/嵌入式平台，面向多个专用领域（自动驾驶、医疗健康、超算），具备极强的爆发力（从今年NVIDIA股票也能看出这一点）。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;FPGA 崛起&lt;/h3&gt;&lt;p&gt;FPGA（Field-Programmable Gate Array）是现场可编程门阵列的英文缩写。简单来说，FPGA就像是一块空白的数字电路，开发者可以通过编写硬件代码的方式来设计一个数字电路，代码编写完成后，类似软件代码中的编译过程，FPGA的综合器会对代码进行综合、布局布线，之后会生成一个二进制文件，将这个二进制文件烧写到FPGA后，原本空白的FPGA就变成了开发者设计的电路，这就是“现场”和“可编程”的含义。同时，FPGA可以反复擦写，通过烧写不同的二进制文件来实现不同的功能。因此，FPGA是介于专用集成电路（ASIC）和通用处理器（CPU）之间的一种硬件。&lt;/p&gt;&lt;p&gt;Xilinx和Altera是世界上最大的两家FPGA厂商，共同占据了将近90%的市场份额。在2015年，Intel以167亿美元完成了对Altera的并购，并购后的Altera成为Intel可编程技术事业部。此次并购足以见得Intel非常看重FPGA在其生态体系中的作用，可以从中看到Intel携手FPGA进军数据中心的决心。图14为Altera的FPGA芯片。&lt;/p&gt;&lt;p&gt;历史上的FPGA作为“胶合”逻辑广泛应用于信号处理、ASIC验证等领域。所谓胶合逻辑即两个硬件模块进行互联时常常发现硬件接口、通信协议不匹配，这时在中间增加一级FPGA作为协议转换器，就能实现两个模块之间通信和资源共享，而不需要修改原有模块的软硬件设计。iPhone 7里面集成的Lattice FPGA（ICE5LP4K）就是这样的角色。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2v3p8MGDm2bgr4cwFlPlBEnWbIje8NURxfNDticITSRLj04RcX0YuUSoA/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图14 Altera FPGA近照&lt;/center&gt;&lt;p&gt;&lt;span&gt;随着工艺提升，集成度不断加大，FPGA内部的DSP资源也逐渐变多、变强，甚至超过了普通的CPU、GPU，这时利用FPGA做计算加速也顺理成章。FPGA具有高度可定制性、细粒度并行性，低功耗等特点，吸引了互联网企业的关注，越来越多的人在研究如何在数据中心中发挥FPGA的优势。受硬件资源限制，FPGA主要使用低精度（8-bit和16-bit）定点计算，所以一般都是面向神经网络预测而非训练。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;值得注意的是，NVIDIA的低功耗GPU Tesla P4也专门面向预测，与FPGA形成了针锋相对的形势，在多种性能指标中P4也一骑绝尘碾压大多数FPGA器件。使用FPGA而非GPU的一个理由是，FPGA硬件连线可以定制，GPU架构是死的，升级硬件时需要重复投入资金，不像FPGA那样可以更新硬件连线来实现硬件升级。&lt;/p&gt;&lt;p&gt;FPGA编程绝非普通软件开发人员可以胜任。它涉及指定芯片门级布局。最近OpenCL和其他编译器技术引入，使得FPGA设计难度大大降低。&lt;/p&gt;&lt;p&gt;&lt;span&gt;微软Azure&lt;/span&gt;&lt;/p&gt;&lt;p&gt;微软在Azure上采用FPGA加速机器学习和其他需要大量吞吐的应用和服务已有五年多时间。最早在2011年发起了Catapult项目。第一次FPGA落地项目为Bing搜索排序算法，将吞吐提升了两倍同时功耗降低至10%。利用云的巨大体量摊低成本，利用FPGA任意定制特性满足各种各样的应用场景，硬件可以实时升级。&lt;/p&gt;&lt;p&gt;最初的Catapult服务器是双路16核Xeon处理器+64GB RAM和一块Altera Stratix V FPGA板卡，2 TB SATA磁盘和两块480GB美光SSD。&lt;/p&gt;&lt;p&gt;8月份，微软发布了Catapult v2，特点是FPGA连接到CPU、主存和网络。这样，FPGA可以直接与另一块FPGA通信，而不需要经过CPU中转。该设计更适合水平扩展。除了加速AI应用，FPGA也用于加速Azure的25G网络设施，根据微软报告，FPGA可以实现1/10延迟。由于可动态配置，FPGA可以同时加速网络和机器学习应用。&lt;/p&gt;&lt;p&gt;9月27日，微软CEO Satya Nadella与工程师Doug Burger在亚特兰大Ignite会议上联合宣布每个Azure云服务器都安装了Altera FPGA（Catapult 2）。在演示环节，一个装备4块FPGA的服务器仅需2.6秒就能把1440页著名的俄语小说《战争与和平》翻译为英语，而一个24核CPU服务器完成相同任务需要19.9秒，功耗高60W。展示用的FPGA服务器使用10核CPU和4块基于Altera Stratix V D5 FPGA加速卡，其功耗为30W，峰值处理性能为7.9TOPS。使用同样的4块FPGA服务器将英文版Wikipedia全部30亿文本翻译为另一种语言需要4个小时，而Azure整个云都配备了FPGA，当Burger将几乎全部Azure计算能力（差不多1 EOPS）投入计算时，耗时不到0.1秒。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2vh8YwaW6ourXuvkSC0mU9W5QfJPYgwVs2uacQAs6M6rkZZuxYFGux7Q/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图15 Azure FPGA加速文本翻译展示&lt;/center&gt;&lt;p&gt;&lt;span&gt;Xilinx收购Auviz Systems&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Xilinx于9月宣布收购在卷积神经网络（CNN）领域有独到研究的Auviz Systems公司，这家成立仅三年的公司，专注于数据中心和嵌入式系统的加速应用，擅长机器学习、视觉算法和FPGA实现。&lt;/p&gt;&lt;p&gt;Auviz Systems提供基于FPGA的中间件IP，以减少应用程序的功耗。对于需要以低功耗实现高性能的应用，他们提供了FPGA库如AuvizCV, AuvizLA，AuvizDNN以及定制加速器和服务。而针对FPGA，Auviz库支持用C/C++或者OpenCL平台进行编程。&lt;/p&gt;&lt;p&gt;实际上，最近在人工智能领域热门的本土新创公司深鉴科技也采用赛灵思的FPGA完成卷积处理，深鉴科技的创始人汪玉在Xilinx大学计划年会上发言时特别强调了FPGA在卷积神经网络实现上的优势。深鉴成立于2016年3月，DeePhi提供软硬件协同设计方案，实现从模型到硬件的完整工作流。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuj8Da71R7ZIicBa7QLq46b2v70oVBUicyNue6Pona3sNHZnTxEMicl9U6yrDicHghyIKvCEoAiaicqAh5vQ/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图16 AuvizDNN加速CNN&lt;/center&gt;&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;小结：&lt;/span&gt;如果说只有大公司才有足够的财力、人力、物力去设计专用人工智能芯片，那么对于大多数中小企业而言，FPGA是更好的选择，设计相对灵活，成本投入更低，投放市场时间（Time-to-Market）更短。在人工智能硬件的舞台上，无论Hot Chips、 SC16还是ISSCC，我们看到越来越多的FPGA解决方案，呈现百花齐放百家争鸣的盛景。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;嵌入式人工智能崛起&lt;/h3&gt;&lt;p&gt;前面论述的绝大多数软硬件都是在服务器端的，无论Google TPU还是Azure上的FPGA，更不用说NVIDIA DGX-1这样的庞然大物。这些“高大上”的概念让普通人敬而远之。而与我们生活息息相关的大多数场景都与移动设备、嵌入式设备相连。值得注意的是，今年嵌入式设备上的人工智能也成为一道亮丽的风景。众多初创企业投入了这股热潮，努力将人工智能与具体用户需求结合，创造更具性价比的智能产品。今年ILSVRC比赛冠军商汤科技和海康威视，主要产品都是嵌入式设备，从而也为人工智能真正扎根到广大人民群众中间做好了准备，相信不出几年我们身边将会出现越来越多智能设备像智能手环、智能家居、智能健康设备、智能自行车、智能汽车、智能秘书帮我们完成细致而琐碎的工作。&lt;/p&gt;&lt;p&gt;&lt;span&gt;TensorFlow&lt;/span&gt;&lt;/p&gt;&lt;p&gt;AlphaGo的灵魂就是TensorFlow。一年前，Google就将TensorFlow完全开源。半年前，Google发布了专门加速TensorFlow的硬件TPU。在短短的一年内，它的提交就超过了10000次，Google大脑部门做了许多性能改进：增加了对分布式培训的支持，支持从iOS到树莓派（Raspberry Pi）平台，与广泛使用的Hadoop/Spark大数据基础设施集成；发布了领先的图像分类模型Inception；目前是最流行的机器学习项目，广泛用于语音识别、图像识别、自然语言处理等多项机器学习和深度学习领域。&lt;/p&gt;&lt;p&gt;TensorFlow是第一个可以在iOS、Android设备和树莓派等移动设备/嵌入式设备上面运行的机器学习框架。这样可以在有摄像头的手机上运行TensorFlow的Inception分类器或自定义的分类器，只要把摄像头对准你希望做分类的东西，TensorFlow就会告诉你它认为这是什么。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Cartographer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Google在10月8日宣布开源Cartographer，这是一个ROS系统支持的2D和3D同步定位与制图技术（SLAM，simultaneous localization and mapping）库。SLAM是众多自动驾驶平台的重要组件，比如自动驾驶汽车、仓库中的自动叉车、扫地机器人、UAVs等。在产业界和学术界常见的传感器配置上，Cartographer能实时建立全局一致的地图。Google在官方声明中提到，SLAM算法结合了来自多个传感器的数据，比如LiDAR激光雷达传感器、IMU惯性测量单元，还有来自多个摄像头的数据。综合这些庞杂的数据，得以计算传感器及传感器周围的环境。Cartographer现已经支持Toyota HSR、TurtleBots、PR2、Revo LDS这几个机器人平台。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Caffe2Go&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Facebook于11月8日宣布将深度学习系统Caffe2Go开源，可以完全运行在智能手机上，目的是让开发者更容易接触到人工智能。相比TensorFlow，晚了整整一年。&amp;nbsp;&lt;br/&gt;为了可以在iOS和Android设备上高效地运行各种深度神经网络，Facebook将用于图像和视频处理的AI模型压缩了100倍。最终实现在某些手机上用不到二十分之一秒的时间完成AI预测过程。&lt;/p&gt;&lt;p&gt;嵌入式设备并不总是独立作战，一些计算复杂度较高的任务会采用“云+端”的处理架构，一个例子是10月18日锤子手机新品发布会上演示的科大讯飞输入法，通过语音输入转换为文字，准确率达97%，其背后是基于深度学习的语音识别系统，单纯依靠移动端是难以实现的，即使实现了也会有诸如手机发烫、电池不够用等问题，将任务合理分工，“云+端”协作完成复杂任务，可以大幅提升用户体验。&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;小结：&lt;/span&gt;可以预见，将来会有更多具备人工智能功能的嵌入式设备和移动App，进一步拉近我们与人工智能距离，成为密不可分的知心朋友。或许有一天你几乎无法分辨你的微信好友究竟是人，还是AI。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;总结&lt;/h3&gt;&lt;p&gt;2016年是“智能驾驶元年”、“人工智能硬件元年”、“增强学习元年”、“嵌入式人工智能元年”。算法和模型创新、硬件提速、应用创新这三驾马车，将带领我们高速奔向更加智能的时代。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Thu, 19 Jan 2017 16:53:16 +0800</pubDate>
    </item>
    <item>
      <title>饿了么推荐系统：从0到1</title>
      <link>http://www.iwgc.cn/link/4406908</link>
      <description>&lt;blockquote style="margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51); word-wrap: break-word !important; background: rgb(247, 247, 247);"&gt;&lt;p&gt;&lt;span&gt;本文由携程技术中心投递，ID：ctriptech。作者：饿了么数据运营部资深算法工程师陈一村，在携程个性化推荐与人工智能Meetup上的分享。陈一村2016年加入饿了么，现从事大数据挖掘和算法相关工作，包括推荐系统、用户画像等。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;随着移动互联网的发展，用户使用习惯日趋碎片化，如何让用户在有限的访问时间里找到想要的产品，成为了搜索/推荐系统演进的重要职责。作为外卖领域的独角兽, 饿了么拥有百万级的日活跃用户，如何利用数据挖掘/机器学习的方法挖掘潜在用户、增加用户粘性，已成为迫切需要解决的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;个性化推荐系统通过研究用户的兴趣偏好，进行个性化计算，发现用户的兴趣点，从而引导用户发现自己的信息需求。一个好的推荐系统不仅能为用户提供个性化的服务，还能和用户之间建立密切关系，让用户对推荐产生依赖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本次分享介绍饿 了么如何从0到1构建一个可快速迭代的推荐系统，从产品形态出发，包括推荐模型与特征工程、日志处理与效果评估，以及更深层次的场景选择和意图识别。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在携程个性化推荐与人工智能meetup上，已经就以上几部分做了整体上的说明，本文将就其中模型排序与特征计算的线上实现做具体说明，同时补充有关业务规则相关的洗牌逻辑说明，力图从细节上还原和展示饿了么美食推荐系统。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、模型排序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1、设计流程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于任何一个外部请求, 系统都会构建一个QueryInfo(查询请求), 同时从各种数据源提取UserInfo(用户信息)、ShopInfo(商户信息)、FoodInfo(食物信息)以及ABTest配置信息等, 然后调用Ranker排序。以下是排序的基本流程(如下图所示)：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;调取RankerManager, 初始化排序器Ranker：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ol class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根据ABTest配置信息, 构建排序器Ranker；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;调取ScorerManger, 指定所需打分器Scorer(可以多个); 同时, Scorer会从ModelManager获取对应Model, 并校验；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;调取FeatureManager, 指定及校验Scorer所需特征Features。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;调取InstanceBuilder, 汇总所有打分器Scorer的特征, 计算对应排序项EntityInfo(餐厅/食物)排序所需特征Features；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对EntityInfo进行打分, 并按需对Records进行排序。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;center style="max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/zxoLaeCI28QcSwTVfcJSjLHS8jwTu3AQc6p2vh32AQpIetDRcbu1jROFfwNa7iaKYGz0mnEPG5bxmZCSsiaVAfFQ/640?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;这里需要说明的是：任何一个模型Model都必须以打分器Scorer形式展示或者被调用。主要是基于以下几点考虑：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;模型迭代：比如同一个Model，根据时间、地点、数据抽样等衍生出多个版本Version；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;模型参数：比如组合模式(见下一小节)时的权重与轮次设定，模型是否支持并行化等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;特征参数：特征Feature计算参数，比如距离在不同城市具有不同的分段参数。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2、排序逻辑&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于机器学习或者学习排序而言, 多种模型的组合(Bagging, Voting或Boosting等)往往能够带来稳定、有效的预测结果。所以, 针对当前美食推荐项目, 框架结合ABTest系统, 支持single、linear及multi三种组合模式, 具体说明如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;single：单一模式, 仅用一个Scorer进行排序打分；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;linear：线性加权模式, 指定一系列Scorer以及对应的权重, 加权求和；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;multi：多轮排序模式, 每轮指定Scorer, 仅对前一轮的top N进行排序。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;具体说明如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;单一模式：rankType=single&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于单一模式, 仅有一个Scorer, 且不存在混合情况, 所以只要简单对Scorer的打分进行排序即可, 故在此不做详细展开。ABTest配置格式如下表：&lt;/span&gt;&lt;/p&gt;&lt;center style="max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/zxoLaeCI28QcSwTVfcJSjLHS8jwTu3AQEzTM4KVLK1wWzM0UyJ5Su8JfmTXNGHibPZZbzvCyKxjRpCAia2nOfMKw/640?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;线性加权模式：rankType=linear&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于线性加权模式, 在单一模式配置的基础上，需要在ABTest配置每个Scorer的权重, 格式如下表所示：&lt;/span&gt;&lt;/p&gt;&lt;center style="max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/zxoLaeCI28QcSwTVfcJSjLHS8jwTu3AQfSUcIQPKcRwI8qGOQbPV1DOOvhuiaFAtPjHsYOmpLOUoicNxX9VEDFtg/640?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;当LinearRanker初始化时, 会校验和初始化所有打分器Scorer。之后, 按照以下步骤对餐厅/食物列表进行排序, 详见下图(左)：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;特征计算器InstanceBuilder调用ScorerList, 获取所有所需特征Feature并去重；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;InstanceBuilder对所有餐厅/食物进行特征计算, 详见特征计算；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ScorerList中所有Scorer对所有餐厅/食物依次进行打分；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对所有Scorer打分进行加权求和, 之后排序。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;center style="max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/zxoLaeCI28QcSwTVfcJSjLHS8jwTu3AQiaNBKggWxwEtcBTRS46hsQL4obGGCeyOGw9Kt5iaIhesQjulHWZJfTvw/640?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;多轮排序模式：rankType=multi&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于多轮排序模式, 每轮设定一个Scorer, 对前一轮top=Num个餐厅/食物进行排序, 故在ABTest中需要设定每个Scorer的轮次(round)和排序数(num), 格式如下表。&lt;/span&gt;&lt;/p&gt;&lt;center style="max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/zxoLaeCI28QcSwTVfcJSjLHS8jwTu3AQicnJlfAAHKVzGDdz65UgFhj6Fz19UmGFJjTJOiansRaGLTkM1CictjxKg/640?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;MultiRanker初始化与特征计算与LinearRanker类似, 具体步骤详见上图(右)：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;特征计算器InstanceBuilder调用ScorerList, 获取所有所需特征Feature并去重；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;InstanceBuilder对所有餐厅/食物进行特征计算, 详见特征计算；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Scorer按轮次(round)对top=Num餐厅/食物进行打分；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对top=Num餐厅/食物按当前Scorer的打分进行排序。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;重复步骤3、4, 直到走完所有轮次。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在初始化阶段, Ranker根据ABTest配置信息指定算法版本(algoVersion)、排序类型(rankType)、排序层级(rankLevel)及相关打分器(ScorerList)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、模型定义&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于线上任何Model，ModelManager 都会通过以下流程获取相应实例和功能(如下图所示)：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;模型实例化时的构造函数BaseModel()和校验函数validate()；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过FeatureManager获取对应Model的特征Feature：abstract getFieldNames()/getFeatures()；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;传入Model的特征, 获取预测分数：abstract predict(Map&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;对于Model的迭代和更新、以及之后的Online Learning等, 通过ModelManager对接相应服务来实现。&lt;/span&gt;&lt;/p&gt;&lt;center style="max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/zxoLaeCI28QcSwTVfcJSjLHS8jwTu3AQWd5c4QPriayFzXezbiakhvA8OK2n1OicORSOQLgUgoV9bwAftUxlnibEQQ/640?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;如上图所示, 对于任何一个可被Scorer直接调用Model, 都需要实现以下接口：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可供ModelManager进行Model实例化的BaseModel() 和初始化的init()&amp;amp;#8232；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可供Scorer/InstanceBuilder获取特征项的 getFieldNames()/getFeatures()；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可供Scorer调用进行打分的 predict(Map&amp;lt;K, V&amp;gt; values) 和 predict(List&amp;lt;Map&amp;lt;K, V&amp;gt; values)&amp;amp;#8232。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、特征计算&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1、设计流程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不同于离线模型训练，线上特征计算要求低延迟、高复用、强扩展，具体如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;低延迟：针对不同请求Query，能够快速计算当前特征值，包括从各种DB、Redis、ES等数据源实时地提取相关数据进行计算；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高复用：对于同类或者相同操作的特征，应该具有高复用性，避免重复开发，比如特征交叉操作、从USER/SHOP提取基本字段等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;强扩展：能够快速、简单地实现特征，低耦合，减少开发成本。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;根据以上系统设计要求, 下图给出了特征计算的设计流程和特征基类说明。&lt;/span&gt;&lt;/p&gt;&lt;center style="max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/zxoLaeCI28QcSwTVfcJSjLHS8jwTu3AQOBZG8Q2uibVZV7xU1sMvYgdeq1PbAicRre19O075q1b67CuD0oMtib91w/640?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;具体说明如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;FeatureManager：特征管理器, 用于特征管理, 主要功能如下： &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;a.特征管理：包括自定义特征、基础特征、实时特征、复合特征等；&amp;nbsp;&lt;br/&gt;b.特征导入：自定义特征静态代码注册，其他特征数据库导入；&amp;nbsp;&lt;br/&gt;c.特征构建：CompsiteFeature类型特征构建。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;InstanceBuilder：特征构建器, 用于计算餐厅/食物特征, 具体步骤如下： &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;a.从每个Scorer获取Feature列表, 去重, 依赖计算, 最后初始化；&amp;nbsp;&lt;br/&gt;b.层级、并行计算每个EntityInfo的特征值(之后会考虑接入ETL, 用于Online Learning)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、特征定义&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图给出了特征基类说明, 以下是具体的字段和方法说明：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;type: 特征类型, 现有query、shop、food, 表示Feature的特征维度 (粒度)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;operate: CompositeFeature专属, 特征操作, 指定当前特征行为, 比如ADD、MAPGET等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;name: 特征名称 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;weight: 权重, 简单线性模型参数&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;retType: 特征返回字段类型&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;defValue: 特征默认返回值 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;level: CompositeFeature专属, 当前特征层次, 用于特征层次计算&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;operands: CompositeFeature专属, 特征操作数, 前置特征直接依赖&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;dependencies: CompositeFeature专属, 特征依赖&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;*init(): 特征初始化函数&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;*initOther(QueryInfo): InstanceBuilder调用时实时初始化, 即传入当前特征参数 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;*evaluate(QueryInfo, EntityInfo, StringBuilder): 用于餐厅/食物维度的特征计算 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;根据上两小节设计流程和基类定义的说明, 我们能够非常快速、简便地实现一个自定义特征, 具体流程如下(score为例, 对应类名XXXFeature)：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;特征类实现：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;建立XXXFeature, 并继承BaseFeature/CompositeFeature；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实现init(), 设置type\name(defValue\weight可选)等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实现initOther(), 设置特征参数, 包括infoMap；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实现evaluate(), 具体包括特征计算的详细逻辑, 对于返回数值的特征。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;特征注册&lt;/em&gt;&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在FeatureManager中注册, 或者在后台特征管理系统中注册；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;考虑到代码中不允许出现明文常量, 故需在FeatureConsts中添加常量定义。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;3、特征分类&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;1. 基础特征：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基础特征为线上可以通过配置特征名直接从SHOP/USER获取特征值的特征, 比如：shop_meta_、user_meta_、food_meta_等, 详细说明如下表，其从本质上来讲等同于特征操作符(复合特征)。&lt;/span&gt;&lt;/p&gt;&lt;center style="max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/zxoLaeCI28QcSwTVfcJSjLHS8jwTu3AQ6Y6gGCXMabWicqpQvEJvkrgg2y7HUwqbezyRL97v1Ihic2bHLspBINDQ/640?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;2. 实时特征：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实时特征来源于Kafka与Storm的日志实时计算，存于Redis，比如：用户食物搜索与点击信息，实例如下表。&lt;/span&gt;&lt;/p&gt;&lt;center style="max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/zxoLaeCI28QcSwTVfcJSjLHS8jwTu3AQPJR5XAXd5ITKawEf8az5kxHEJ8NMGYVRQMYPdxXr6iab4JMFnpbWEGA/640?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;3. 自定义特征：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;线上除CompositeFeature特征外, 所有XXXFeature均为自定义特征, 在此不再累述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;4. 复合特征(CompositeFeature)：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户特征组合的复杂操作, 比如下表所示(部分)&lt;/span&gt;&lt;/p&gt;&lt;center style="max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/zxoLaeCI28QcSwTVfcJSjLHS8jwTu3AQPGFvBiayDTwFHgB5h2BUIOxLhXoC1yuvL73Ll0rd3gwxibrX94Xz811g/640?wx_fmt=png"/&gt;&lt;/center&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、洗牌逻辑&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1、洗牌类型&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多时候, 基于算法模型的结果能够给出数据层面的最佳结果, 但是不能保证推荐结果符合人的认知, 比如基于CTR预估的逻辑, 在结果推荐上会倾向于用户已点过或已购买过的商户/食物, 这样就使得推荐缺少足够的兴趣面。所以, 为了保证推荐结果与用户的相关性, 我们会保留算法模型的结果; 同时, 为了保证结果符合认知, 我们会人为地添加规则来对结果进行洗牌; 最后, 为了扩展用户兴趣点、引导用户选择, 将会人工地引入非相关商户/食物, 该部分将是我们后续优化点之一。下面将详细介绍“猜你喜欢”模块线上生效的部分洗牌逻辑，其他洗牌规则类似。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;餐厅类目洗牌：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;考虑到餐厅排序时, 为避免同类目餐厅扎堆问题, 我们设定了餐厅类目洗牌, 基本规则如下：&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51); word-wrap: break-word !important; background: rgb(247, 247, 247);"&gt;&lt;p&gt;&lt;span&gt;针对 top = SHOP_CATE_TOPNUM 餐厅, 不允许同类目餐厅连续超过 MAX_SHOP_SHOPCNT。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;餐厅推荐食物数洗牌：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在餐厅列表排序时, 总是希望排在前面的商户具有更好的展示效果、更高的质量。针对 1*餐厅+3*食物 模式, 如果前排餐厅食物缺失(少于3个)时, 页面的整体效果就会大打折扣, 所以我们制定了食物数洗牌, 具体规则如下：&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51); word-wrap: break-word !important; background: rgb(247, 247, 247);"&gt;&lt;p&gt;&lt;span&gt;所有1个食物的餐厅沉底；&amp;nbsp;&lt;br/&gt;针对top=SHOP_FOODCNT_TOPNUM餐厅, 食物数 &amp;lt; SHOP_FOODCNT_FOODCNT(3) 的餐厅降权&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;餐厅名称洗牌：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正常时候, 推荐需要扩展和引导用户的兴趣点, 避免同类扎堆, 比如盖浇饭类目餐厅等。同样的, 我们也不希望相同或相似名称的餐厅扎堆, 比如连锁店、振鼎鸡等。针对此问题, 考虑到餐厅名称的不规则性, 我们通过分词和统计, 把所有餐厅名称做了结构化归类(distinct_flag), 比如所有“XXX黄焖鸡”都归为“黄焖鸡”、“星巴克 XX店”归为“星巴克”等。之后类似于餐厅类目洗牌, 做重排, 具体规则如下：&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51); word-wrap: break-word !important; background: rgb(247, 247, 247);"&gt;&lt;p&gt;&lt;span&gt;对top=SHOP_FLAG_TOPNUM 餐厅进行标签(flag)洗牌, 使得同一标签的餐厅排序位置差不得小于 SHOP_FLAG_SPAN&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;2、线上逻辑&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上一节中可知, 各个洗牌之间存在相互制约, 即洗牌不能并行、只能串行, 谁前谁后就会导致不同的排序结果, 所以, 这里需要考虑各个洗牌对排序的影响度和优先级：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; color: rgb(51, 51, 51); word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;影响度：即对原列表的重排力度, 比如对于连锁店少的区域, 名称洗牌的影响度就会小, 反之, 比如公司周边有25家振鼎鸡, 影响度就会变大；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;优先级：即洗牌的重要性, 比如前排餐厅如果食物少于规定数量, 其实质是浪费了页面曝光机会, 所以食物数洗牌很有必要。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;考虑到洗牌的串行逻辑, 越靠后的洗牌具有更高优先级。为了能够灵活变更线上的洗牌规则, 系统结合Huskar System(线上配置修改系统), 能够快速、便捷地更改洗牌逻辑，下面给出了一个配置实例。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;code class="" style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;span&gt;[
{"name": "recfoods", "topnum": 15, "foodcnt": 3}, 
{"name": "category", "topnum": 15, "shopcnt": 2}, 
{"name": "shopflag", "topnum": 20, "span": 3, "exclude": "XXX"}},
{"name": "recfoods", "topnum": 15, "foodcnt": 3},
{"name": "dinner","topnum":5,"interval": ["10:30~12:30","16:30~18:30"]},
{"name": "mixture","topnum":12, "include": "XXX"}
]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对于一个处于业务快速增长期的互联网企业，如何能够在最短时间内构建一个可快速迭代的推荐系统，是摆在眼前的现实问题。此次分享从饿了么自身业务出发，结合推荐系统的常见问题和解决方案，给出了从产品形态出发, 包括推荐模型与特征工程、日志处理与效果评估, 以及更深层次的场景选择和意图识别等在内多方面的线上实践，力图从整体及细节上还原和展示推荐系统的本质，以期能够为大家今后的工作提供帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Thu, 19 Jan 2017 16:53:16 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】Docker v1.13.0 正式版发布，甲骨文中国辟谣大面积裁员传闻</title>
      <link>http://www.iwgc.cn/link/4406909</link>
      <description>&lt;p&gt;Cloudaily网罗新鲜要闻，每日为你呈现&lt;span&gt;大数据和云计算&lt;/span&gt;领域热点新闻。本次内容播报如下：&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;Docker v1.13.0 正式版发布，应用容器引擎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Docker v1.13.0 正式版发布了。在 Docker 1.13 中，与在 Docker 1.12 中引入的实验版本相比，管理插件 api 发生了变化。在升级到 Docker 1.13 之前，必须卸载使用 Docker 1.12 安装的插件。可通过 docker plugin rm 命令卸载插件。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;全球 500 亿条数据被 Elasticsearch 勒索者删除&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;2017年1月12日，白帽汇监测到针对全球使用广泛的全文索引引擎Elasticsearch的勒索事件，经过多日的跟进分析，直至2017年1月17日，共有3波勒索者，根据白帽汇FOFA系统对删除之前数据与被删除数据进行对比分析，此次攻击被删除的数据至少500亿条，被删除数据至少450TB。在勒索事件发生后，有1%的Elasticsearch启用了验证插件，另外有2%则关闭了Elasticsearch。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;甲骨文中国辟谣大面积裁员传闻 精简后集火云业务&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1月17日媒体报道，全球最大的数据库服务商甲骨文公司将对北京分部大幅裁员，为了整合研发业务，要裁掉云计算存储相关的整个北京研发团队，涉及约200个北京研发岗位。而18日中午，该消息已经被甲骨文中国相关负责人辟谣，称调整的只是其计算机操作系统Solaris相关部门的岗位，人数也没有被传的200人那么多。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;埃森哲：2025年区块链技术或可为8大投行省120亿美元&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;管理咨询服务公司埃森哲（Accenture）日前发布报告称，到2025年，区块链（Blockchain）技术每年可帮助全球8大投资银行节省80亿美元至120亿美元的基础设施成本。该预期基于埃森哲对全球8大投资银行成本数据的分析。区块链是数字货币比特币的底层技术，对于比特币，区块链技术可以追踪货币交易。但事实上，该技术还可以追踪任何有价值事物的交易，包括股票、债券或其他金融证券。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;航旅大数据企业谈扎根上海“初心”：这里有产业发展的好“土壤”&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;近日，内地首个航旅大数据研究中心——工信海威-敬众航旅大数据研究中心在上海成立。该研究中心由中国工信部电子一所相关部门联合上海敬众科技股份有限公司共同成立，通过政企合作的形式，致力于共同研究利用航旅大数据，并就航旅大数据的安全保障体系、使用标准规范等问题展开深入研究。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2017谷歌火力全开：瞄准机器学习与数据分析&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Google在全球扩张方面进行了大量投资，以解决数据距离和数据驻留问题;并在2016年增加了两个新区域，使其总数达到了六个。该公司计划在2017年每月开设一个新区域。Google通过Spotify和Evernote高调地赢得了胜利；同时，花旗、高盛和其他金融行业的重量级公司已经认可了它的技术。其他的大客户还包括可口可乐、迪斯尼、梅西和索尼，但谷歌仍然缺乏传统旗舰企业使用其平台。为了专门应对企业市场，Google和埃森哲将为零售、医疗、能源、金融和其他行业开发特定行业的服务。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;工信部：大数据产业发展规划（2016－2020年）&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;数据是国家基础性战略资源，是21世纪的“钻石矿”。党中央、国务院高度重视大数据在经济社会发展中的作用，党的十八届五中全会提出“实施国家大数据战略”，国务院印发《促进大数据发展行动纲要》，全面推进大数据发展，加快建设数据强国。“十三五”时期是我国全面建成小康社会的决胜阶段，是新旧动能接续转换的关键时期，全球新一代信息产业处于加速变革期，大数据技术和应用处于创新突破期，国内市场需求处于爆发期，我国大数据产业面临重要的发展机遇。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;硅谷投资人预测2017：VR/AR、基因组大数据将是“下一个房地产”&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;近日，Bloomberg最新公布的美国投资报告应证了2016年的“资本寒冬”一说。数据显示，截止去年12月17日，美国上市科技公司在过去一年的募资金额同比前一年减少了60%，整体投资数额相比于2014年下降了58%。惨淡的数据让进入2017年的硅谷投资者们产生了担忧。在今年早期投资趋于稳定的背景下，近几年崛起的人工智能将会是投资者重点布局的对象。通过大数据+机器学习的模式，人工智能正在潜移默化地颠覆各个行业，包括娱乐、健康、医疗、能源、物联网、社交等。随着人工智能的进一步普及和深度运用，新的移动端操作系统VR/AR（混合现实/增强现实）和能够优化医疗体系的基因组大数据是投资人在2017年应该着重关注的领域。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2017 会成为 PaaS 模式的终结年吗？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;PaaS 的市场份额仅仅从 2013 年的50亿美元上升到110亿美元，而这包括了逾2000家公司的数据，相对于IaaS 或者 SaaS 的市场份额有相当大的差距。而之前大部分分析预计 PaaS能与 IaaS 和 SaaS 三分天下。显然这对于PaaS的预计太过热观，从目前的情况来看，也许这永远不会发生。PaaS 疲软的市场表现是否会在 2017 有所转机，还是真如部分分析指出，2017将是PaaS的终结年呢？ 时间会证明一切。&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjVYtPgy98Blzwbia1rA0M9khQQ28uQpAIaMVmLvH9hud9OcK5AbqFc1r9icDcOMMNAFFhgIT7icQjE8A/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br/&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/p&gt;&lt;/blockquote&gt;</description>
      <pubDate>Thu, 19 Jan 2017 16:53:16 +0800</pubDate>
    </item>
  </channel>
</rss>
