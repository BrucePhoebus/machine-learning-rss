<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>CSDN大数据</title>
    <link>http://www.iwgc.cn/list/1933</link>
    <description>CSDN分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点,提供云计算和大数据技术、平台、实践和产业信息等服务.</description>
    <item>
      <title>容器集群支持数据库实践</title>
      <link>http://www.iwgc.cn/link/4360873</link>
      <description>&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;作者：京东商城-基础平台部-集群技术部副总监，鲍永成。京东IPDCHAT公众号输出京东商城基础平台部内部技术实战，欢迎关注。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;京东容器数据库系统，管理1800台物理计算节点，生产1W+ 多MySQL Docker容器实例。架构简单可靠，Docker容器计算平台与MySQL集群管理平台解耦处理。为描述方便，京东容器化数据库系统命名为CDS，底层京东Docker容器计算平台命名为JDOS。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;本文重点介绍JDOS如何支持CDS。CDS是更大的话题，后续数据库团队会分享相关实践。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;介绍&lt;/h3&gt;&lt;p&gt;CDS依赖京东坚实的JDOS技术，生产运行1W+个MySQL容器实例。CDS借助JDOS技术优势获得主要3个方面的技术收益：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;CDS借助Docker容器资源隔离能力，有效支持同一宿主物理机上多MySQL实例直接资源隔离，极大提高数据库实例部署密度，有效提升资源使用率&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;CDS借助Docker容&lt;span&gt;器&lt;/span&gt;资源平滑升级能力，方便数据库实例平滑扩容需求&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;CDS借助JDOS平台资源池化提供管理容&lt;span&gt;器&lt;/span&gt;生命周期API能力，实现用户自助上下线数据库以及自动化运维。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;本文会从架构设计，性能测试等方面说明京东CDS落地实践过程。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;整体架构&lt;/h3&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJBDwib7LGpTCxVM2Bd5vJjBZ7C7thaRibAwibVnT5LCTA1TIwexZ1WP3Lw/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CDS与JDOS解耦，CDS负责管理MySQL主从等集群方式的生命周期管理；京东JDOS负责单个MySQL容&lt;span&gt;器&lt;/span&gt;实例生命周期管理。京东Docker容器集群分多Region，多POD部署，且不同集群之间网络互通，有效支持每个MySQL实例可被业务系统直接调用，确保极佳的网络延迟性能。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;MySQL集群实例&lt;/h3&gt;&lt;p&gt;&lt;span&gt;优先级 配额&lt;/span&gt;&lt;/p&gt;&lt;p&gt;数据库cluster根据业务重要性划分不同的优先级，京东的划分更加细致，这里我们简化分2种优先级：核心系统，非核心系统。&lt;/p&gt;&lt;p&gt;云数据库管理平台只需要在调用京东JDOS平台API时候，带上priority=0，即可表示创建的是核心系统依赖的数据库。京东JDOS平台会强制把属于该cluster的多MySQL实例调度到不同的机架，且不资源“超配”。&lt;/p&gt;&lt;p&gt;底层资源云化和核算成本需求，会针对按事业部配给一定的配额，所在的创建数据库集群实例成功后，自动从该部门扣除对应的资源值，反之销毁会归还配额到部门。&lt;/p&gt;&lt;p&gt;&lt;span&gt;监控 告警&lt;/span&gt;&lt;/p&gt;&lt;p&gt;数据库cluster自身DB层面的告警由云数据库集群平台提供。涉及到底层计算，网络，存储等资源层面的告警，由底层京东Docker容器平台提供数据给云数据库集群。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;JDOS架构&lt;/h3&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJMJMZvy90HLBleWol5xdQUia1shaFR1ePmuvC2zklzyYXoElBJDCxGDQ/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;JDOS是京东统一数据中心计算，网络，存储管理平台。除支持CDS外，也支持京东全部的业务系统运行环境。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJlluSqczUE6c2IuS7iaGEoOzomdP2XlHPrl4TW6uAWj7MOkicY3ka6APQ/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;JDOS系统基于京东扎实的Openstack，Docker等开源技术的持续研发能力，提供稳定，高性能的计算资源平台。每个组件都是独立服务部署，采用MQ互相交互信息，京东重构了主要的核心组件服务，使JDOS平台可以支持更大的集群规模，目前稳定在6K台物理计算节点。重新设计JDOS升级功能，做到平滑无感知，有效支撑长时间运行容器的稳定性。&lt;/p&gt;&lt;p&gt;&lt;span&gt;JDOS控制节点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJkgFibS69ibedzQnxdz6pS5We9QRKvahEUvTS7MSibBPXhC4liabx5Fj7kw/0?"/&gt;&lt;/p&gt;&lt;p&gt;JDOS控制节点服务组件，借助Haproxy做PooL模式部署，有效避免单点和负载能力问题。&amp;nbsp;&lt;/p&gt;&lt;p&gt;控制节点3台物理机，分别跨在不同的机架上，避免Tor交换机，机架电力，服务器等故障影响。&lt;/p&gt;&lt;p&gt;控制节点服务组件混合部署，进一步提升控制节点每个服务组件的高可用和负载能力。比如计算服务API，镜像服务API，认证服务API，网络服务API，存储服务API进程混部同一台物理机。&lt;/p&gt;&lt;p&gt;&lt;span&gt;JDOS计算节点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;计算节点管理网络与虚拟化数据网络使用不同的网口进行隔离，全万兆网络环境，对数据库的网络环境支持非常好。特别京东在虚拟化网络技术方向的扎实积累，基本可以做到虚拟化网络损耗控制在2%以下。&lt;/p&gt;&lt;p&gt;&lt;span&gt;调度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJ2QSzm53uAnzk3Q05bVXqON2h11aaGnLquxgtslDM6qK6ibjnF6ibcwdg/0?"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;调度架构简单，负载可扩展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJibEXENgxk8ZUawb0wibBH7lichrCHhoAINjW0BbbSZ56Ws2wL8UxrVE4w/0?"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;主要思想是，先一系列filter掉不满足要求的计算节点，然后打分，最后做排序，选择最优并返回调度结果。&lt;/p&gt;&lt;p&gt;&lt;span&gt;资源分区调度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;按Region，POD，Zone，物理机等4个层面划分计算区域，调度算法灵活可配确保业务特点与计算硬件环境特点结合适配。如CDS的机器全部是SSD的硬盘，所以JDOS会在每个数据中心提供CDS SSD Zone的tag，把CDS的创建请求优先调度到具有SSD硬盘的计算Zone。&lt;/p&gt;&lt;p&gt;&lt;span&gt;亲和性和反亲和性调度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;创建全新数据库集群实例如一主一层，JDOS调度器会把这2个MySQL容器实例分布到不同的机架。&lt;/p&gt;&lt;p&gt;业务多从库需求，要求从库是高性能读，JDOS调度器会根据performance_slave=True标记，尽可能把从库创建到网络繁忙度较小的机架，并与主在相同的物理POD，甚至同一个Tor交换机下面的不同物理机上。&lt;/p&gt;&lt;p&gt;业务增加备份性质的从库需求，JDOS调度器会根据DB_Cluster_ID=uuid, backup_slave=True标记，强制把从库创建避免已经有该DB_cluser_ID所在的宿主机，以及机架甚至POD。&lt;/p&gt;&lt;p&gt;&lt;span&gt;可扩展性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;底层JDOS资源池的扩容性，按使用率，有计划进行扩容底层物理计算资源。CDS每个库使用资源的平滑扩容，比如CPU，内存，网络，磁盘空间均支持平滑扩容功能。采用直接重置修改cgroup的配置，即可达到平滑扩容的目的。结合京东设计的cpu set与cpu share并存的资源隔离策略，提升资源使用率。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;性能&lt;/h3&gt;&lt;p&gt;主要关注MySQL运行在Docker容器内的实际DB层面的性能。&lt;/p&gt;&lt;p&gt;&lt;span&gt;MySQL实例性能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;性能测试环境部署图&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJ3iajy7qx5CUlvc1YloKKbQ5M5LZFnjH7sHeiaHVQKu93JhjsnWIwEoFg/0?"/&gt;&lt;br/&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;测试环境硬件配置&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJnVicNIIU5Q0XKmx6khBSg2M688J1LwicaacRDzL5ibckX1nWmR1AsGkzA/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多容器实例基准测试&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;测试模型&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJibUvmOcuflGJgDBVlWj5VuJBianlzRHbEEl3dOgiaT6XLaOUQEpRJSGbA/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;场景描述&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;基础数据为：8个容器，每个容器基础数据量为1000W（532M），单表加压，每个表10W行记录，同时对多个容器发起相同的请求，测试响应情况，并对比同等线程数下物理机的情况。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;容器测试数据&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJ8zosicfa5tS8p4vbvENL7Gic5egKZb42ut3SHpuDnb2jSXgIussnQGVA/0?"/&gt;&lt;br/&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;物理机数据&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJF7vSgmbQvNJb68fgUKyBY0dsGmvF0QSDOKjW0MicsiaSkI2psnz0zyww/0?"/&gt;&lt;br/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;稳定性测试&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;场景描述&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;单容器1000W基础数据，单表请求10W数据，8容器并发运行24小时。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;性能表现&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJdAAGoPWwuf7EPjXUa3PlftE9DVjIMmBZ76I8GhVYyR7nvtGtF9XoAQ/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/em&gt;&lt;/span&gt;&lt;em style="max-width: 100%; box-sizing: border-box; font-weight: 700; line-height: 27.2px; word-wrap: break-word !important;"&gt;CPU表现&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em style="max-width: 100%; box-sizing: border-box; font-weight: 700; line-height: 27.2px; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJ5cGibs1mfwZhzetzD9T1Fkojf1BL9gNv0PSHgQKEY6tLYaZQKgnNRhQ/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/em&gt;&lt;em style="max-width: 100%; box-sizing: border-box; line-height: 27.2px; font-weight: 700; word-wrap: break-word !important;"&gt;磁盘表现&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em style="max-width: 100%; box-sizing: border-box; line-height: 27.2px; font-weight: 700; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJm6NO4n8ia9PTubRFHDe5ciaXPmtnViaVY4L0zwicm4HS1QicVraIcwOfTrg/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/em&gt;&lt;em style="max-width: 100%; box-sizing: border-box; line-height: 27.2px; font-weight: 700; word-wrap: break-word !important;"&gt;网络表现&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em style="max-width: 100%; box-sizing: border-box; line-height: 27.2px; font-weight: 700; word-wrap: break-word !important;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJJicbPGbibMduNfejTMDOib5xkU1ibWSnRTjzTicuSwn8iaP8lPDOJNJTotIw/640?wx_fmt=png"/&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Mon, 16 Jan 2017 16:46:21 +0800</pubDate>
    </item>
    <item>
      <title>Apache Beam：下一代的数据处理标准</title>
      <link>http://www.iwgc.cn/link/4360874</link>
      <description>&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-bottom: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;声明：本文为&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;《程序员》&lt;/a&gt;原创文章，未经允许不得转载，更多精彩文章请&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;订阅2017年《程序员》&lt;/a&gt;。&amp;nbsp;&lt;br/&gt;作者：李呈祥，万达网络科技集团大数据技术专家，Apache Hive Committer，Apache Flink Committer，超过6年的分布式数据处理系统开发经验，有丰富的开源社区工作经验。&amp;nbsp;&lt;br/&gt;责编：郭芮，关注大数据领域，寻求报道或投稿请联系guorui@csdn.net。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Apache Beam（原名Google DataFlow）是Google在2016年2月份贡献给Apache基金会的孵化项目，被认为是继MapReduce、GFS和BigQuery等之后，Google在大数据处理领域对开源社区的又一贡献。Apache Beam的主要目标是统一批处理和流处理的编程范式，为无限、乱序，Web-Scale的数据集处理提供简单灵活、功能丰富以及表达能力十分强大的SDK。Apache Beam项目重点在于数据处理的编程范式和接口定义，并不涉及具体执行引擎的实现。本文主要介绍Apache Beam的编程范式——Beam Model，以及通过Beam SDK如何方便灵活地编写分布式数据处理业务逻辑，希望读者能够通过本文对Apache Beam有初步了解，同时对于分布式数据处理系统如何处理乱序无限数据流的能力有初步认识。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;Apache Beam基本架构&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;随着分布式数据处理不断发展，业界涌现出越来越多的分布式数据处理框架，从最早的Hadoop MapReduce，到Apache Spark、Apache Storm、以及更近的Apache Flink、Apache Apex等。新的分布式处理框架可能带来更高性能，更强大功能，更低延迟等，但用户切换到新分布式处理框架的代价也非常大：需要学习一个新的数据处理框架，并重写所有业务逻辑。解决这个问题的思路包括两部分，首先，需要一个编程范式，能够统一规范分布式数据处理的需求，例如统一批处理和流处理的需求。其次，生成的分布式数据处理任务应该能够在各个分布式引擎上执行，用户可以自由切换执行引擎与执行环境。Apache Beam正是为了解决以上问题而提出的。它主要由Beam SDK和Beam Runner组成，Beam SDK定义了开发分布式数据处理任务业务逻辑的API接口，生成的的分布式数据处理任务Pipeline交给具体的Beam Runner执行引擎。Apache Beam目前支持的API接口由Java语言实现，Python版本的API正在开发之中。它支持的底层执行引擎包括Apache Flink、Apache Spark以及Google Cloud Platform，此外Apache Storm、Apache Hadoop、Apache Gearpump等执行引擎的支持也在讨论或开发中。其基本架构如图1。&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjUVMHMxrKk8sYvZRS5T8krEJc5VByGkzKbZvhvO62hkKzmbrAulUiarD1jzHrH3sufOF6x77P2pCJA/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;图1 Apache Beam架构图&lt;/center&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;br/&gt;&lt;/center&gt;&lt;p&gt;需要注意的是，虽然Apache Beam社区非常希望所有的Beam执行引擎都能够支持Beam SDK定义的功能全集，但在实际实现中可能并不一定。例如，基于MapReduce的Runner显然很难实现和流处理相关的功能特性。目前Google DataFlow Cloud是对Beam SDK功能集支持最全面的执行引擎，在开源执行引擎中，支持最全面的则是Apache Flink。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;Beam Model&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Beam Model指Beam的编程范式，即Beam SDK背后的设计思想。在介绍Beam Model前，先介绍下Beam Model要处理的问题域与基本概念。&lt;/p&gt;&lt;ol style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据&lt;/span&gt;。要处理的数据一般可以分为两类，有限的数据集和无限的数据流。对于前者，比如一个HDFS中的文件，一个HBase表等，特点是数据提前已经存在，一般也已经持久化，不会突然消失。而无限的数据流，比如Kafka中流过来的系统日志流，或是从Twitter API拿到的Twitter流等，这类数据的特点是动态流入，无穷无尽，无法全部持久化。一般来说，批处理框架的设计目标是用来处理有限的数据集，流处理框架的设计目标是用来处理无限的数据流。有限的数据集可以看做无限数据流的一种特例，但是从数据处理逻辑角度，这两者并无不同之处。例如，假设微博数据包含时间戳和转发量，用户希望按照每小时的转发量统计总和，此业务逻辑应该可以同时在有限数据集和无限数据流上执行，并不应该因为数据源的不同而对业务逻辑的实现产生任何影响。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时间&lt;/span&gt;。Process Time是指数据进入分布式处理框架的时间，而Event-Time则是指数据产生的时间。这两个时间通常是不同的，例如，对于一个处理微博数据的流计算任务，一条2016-06-01-12:00:00发表的微博经过网络传输等延迟可能在2016-06-01-12:01:30才进入到流处理系统中。批处理任务通常进行全量的数据计算，较少关注数据的时间属性，但是对于流处理任务来说，由于数据流是无穷无尽的，无法进行全量计算，通常是对某个窗口中的数据进行计算。对于大部分的流处理任务来说，按照时间进行窗口划分，可能是最常见的需求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;乱序&lt;/span&gt;。对于流处理框架的数据流来说，其数据的到达顺序可能并不严格按照Event-Time的时间顺序。如果基于Process Time定义时间窗口，数据到达的顺序就是数据的顺序，因此不存在乱序问题。但对于基于Event Time定义的时间窗口来说，可能存在时间靠前的消息在时间靠后的消息后到达的情况，这在分布式的数据源中可能非常常见。对于这种情况，如何确定迟到数据，以及对于迟到数据如何处理通常是很棘手的问题。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Beam Model处理的目标数据是无限的时间乱序数据流，不考虑时间顺序或是有限的数据集可看做是无限乱序数据流的一个特例。Beam Model从下面四个维度归纳了用户在进行数据处理的时候需要考虑的问题：&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;What。如何对数据进行计算？例如，Sum、Join或是机器学习中训练学习模型等。在Beam SDK中由Pipeline中的操作符指定。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Where。数据在什么范围中计算？例如，基于Process-Time的时间窗口，基于Event-Time的时间窗口、滑动窗口等。在BeamSDK中由Pipeline中的窗口指定。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;When。何时将计算结果输出？例如，在1小时的Event-Time时间窗口中，每隔1分钟，将当前窗口计算结果输出。在Beam SDK中由Pipeline中的Watermark和触发器指定。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;How。迟到数据如何处理？例如，将迟到数据计算增量结果输出，或是将迟到数据计算结果和窗口内数据计算结果合并成全量结果输出。在Beam SDK中由Accumulation指定。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Beam Model将“WWWH”四个维度抽象出来组成了Beam SDK，用户在基于它构建数据处理业务逻辑时，在每一步只需要根据业务需求按照这四个维度调用具体的API即可生成分布式数据处理Pipeline，并提交到具体执行引擎上。“WWWH”四个维度的抽象仅关注业务逻辑本身，和分布式任务如何执行没有任何关系。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;Beam SDK&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;不同于Apache Flink或是Apache Spark，Beam SDK使用同一套API表示数据源、输出目标以及操作符等。下面介绍4个基于Beam SDK的数据处理任务，通过它们，读者可以了解Beam Model是如何统一灵活地描述批处理和流处理任务的，这3个任务用来处理手机游戏领域的统计需求，包括：&lt;/p&gt;&lt;ol style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;用户分数：批处理任务，基于有限数据集统计用户分数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;每小时团队分数：批处理任务，基于有限数据集统计每小时，每个团队的分数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;排行榜：流处理任务，2个统计项，每小时每个团队的分数以及用户实时的历史总得分数。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下面基于Beam Model的“WWWH”四个维度，分析业务逻辑，并通过代码展示如何通过BeamSDK实现“WWWH”四个维度的业务逻辑。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;用户分数&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;统计每个用户的历史总得分数是一个非常简单的任务，在这里我们简单地通过一个批处理任务实现，每次需要新的用户分数数据，重新执行一次这个批处理任务即可。对于用户分数任务，“WWWH”四维度分析结果如下：&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjUVMHMxrKk8sYvZRS5T8krEqrMfL8icPh2zicU0mkgxnJI1ibnUbliceKNtupTszKwqiancN09N5EVGr0Q/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;br/&gt;&lt;/center&gt;&lt;p&gt;通过“WWWH”的分析，对于用户分数这个批处理任务，通过Beam Java SDK实现的代码如下所示：&lt;/p&gt;&lt;p&gt;&lt;code class=" hljs r" style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;gameEvents
[&lt;span&gt;...&lt;/span&gt; input &lt;span&gt;...&lt;/span&gt;]
[&lt;span&gt;...&lt;/span&gt; parse &lt;span&gt;...&lt;/span&gt;]
.apply(&lt;span&gt;"ExtractUserScore"&lt;/span&gt;, new ExtractAndSumScore(&lt;span&gt;"user"&lt;/span&gt;))
[&lt;span&gt;...&lt;/span&gt; output &lt;span&gt;...&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ExtractAndSumScore实现了“What”中描述的逻辑，即按用户分组然后累加分数，其代码如下：&lt;/p&gt;&lt;p&gt;&lt;code class=" hljs coffeescript" style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;gameInfo
.apply(MapElements
. via&lt;span&gt;&lt;span&gt;((GameActionInfo gInfo) -&amp;gt; KV. &lt;span&gt;of&lt;/span&gt;(gInfo.getKey( field ), gInfo.getScore()))&lt;/span&gt;.&lt;span&gt;withOutputType&lt;/span&gt;&lt;span&gt;(
TypeDescriptors. kvs(TypeDescriptors. strings(), TypeDescriptors. integers()))&lt;/span&gt;)
.&lt;span&gt;apply&lt;/span&gt;&lt;span&gt;(Sum.&amp;lt;String&amp;gt; integersPerKey())&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过MapElements确定Key与Value分别是用户与分数，然后Sum定义按key分组，并累加分数。Beam支持将多个对数据的操作合并成一个操作，这样不仅可以支持更清晰的业务逻辑实现，同时也可以在多处重用合并后的操作逻辑。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;每小时团队分数&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;按照小时统计每个团队的分数，获得最高分数的团队可能获得奖励，这个分析任务增加了对窗口的要求，不过我们依然可以通过一个批处理任务实现，该任务的“WWWH”四维度分析如下：&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjUVMHMxrKk8sYvZRS5T8krECFX0qDeNUpZdGnMv9TPRcLWTw3DcGAdmLyu10pryQDpBfkYj9gSe9g/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;br/&gt;&lt;/center&gt;&lt;p&gt;相对于第一个用户分数任务，只是在Where部分回答了“数据在什么范围中计算？”的问题，同时在What部分“如何计算数据？”中，分组的条件由用户改为了团队，这在代码中也会相应体现：&lt;/p&gt;&lt;p&gt;&lt;code class=" hljs r" style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;gameEvents
[&lt;span&gt;...&lt;/span&gt; input &lt;span&gt;...&lt;/span&gt;]
[&lt;span&gt;...&lt;/span&gt; parse &lt;span&gt;...&lt;/span&gt;]
.apply(&lt;span&gt;"AddEventTimestamps"&lt;/span&gt;, WithTimestamps.of((GameActionInfo i)
-&amp;gt; new Instant(i.getTimestamp())))
.apply(&lt;span&gt;"FixedWindowsTeam"&lt;/span&gt;, Window.&amp;lt;GameActionInfo&amp;gt;into(
FixedWindows.of(Duration.standardMinutes(windowDuration))))
.apply(&lt;span&gt;"ExtractTeamScore"&lt;/span&gt;, new ExtractAndSumScore(&lt;span&gt;"team"&lt;/span&gt;))
[&lt;span&gt;...&lt;/span&gt; output &lt;span&gt;...&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;“AddEventTimestamps”定义了如何从原始数据中抽取EventTime数据，“FixedWindowsTeam”则定义了1小时固定窗口，然后重用了ExtractAndSumScore类，只是将分组的列从用户改成了团队。对于每小时团队分数任务，引入了关于“Where”部分窗口定义的新业务逻辑，但是从代码中可以看到，关于“Where”部分的实现和关于“What”部分的实现是完全独立的，用户只需要新加两行关于“Where”的代码，非常简单和清晰。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;排行榜&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;前面两个任务均是基于有限数据集的批处理任务，对于排行榜来说，我们同样需要统计用户分数以及每小时团队分数，但是从业务角度希望得到的是实时数据。对于Apache Beam来说，一个相同处理逻辑的批处理任务和流处理任务的唯一不同就是任务的输入和输出，中间的业务逻辑Pipeline无需任何改变。对于当前示例的排行榜数据分析任务，我们不仅希望他们满足和前两个示例相同的业务逻辑，同时也可以满足更定制化的业务需求，例如：&lt;/p&gt;&lt;ol style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;流处理任务相对于批处理任务，一个非常重要的特性是，流处理任务可以更加实时地返回计算结果，例如计算每小时团队分数时，对于一小时的时间窗口，默认是在一小时的数据全部到达后，把最终的计算结果输出，但是流处理系统应该同时支持在一小时窗口只有部分数据到达时，就将部分计算结果输出，从而使得用户可以得到实时的分析结果。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;保证和批处理任务一致的计算结果正确性。由于乱序数据的存在，对于某一个计算窗口，如何确定所有数据是否到达（Watermark）？迟到数据如何处理？处理结果如何输出、总量、增量、并列？流处理系统应该提供机制保证用户可以在满足低延迟性能的同时达到最终的计算结果正确性。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;上述两个问题正是通过回答“When”和“How”两个问题来定义用户的数据分析需求。“When”取决于用户希望多久得到计算结果，在回答“When”的时候，基本上可以分为四个阶段：&lt;/p&gt;&lt;ol style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;Early。在窗口结束前，确定何时输出中间状态数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;On-Time。在窗口结束时，输出窗口数据计算结果。由于乱序数据的存在，如何判断窗口结束可能是用户根据额外的知识预估的，且允许在用户设定的窗口结束后出现迟到的属于该窗口的数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Late。在窗口结束后，有迟到的数据到达，在这个阶段，何时输出计算结果。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Final。能够容忍迟到的最大限度，例如1小时。到达最后的等待时间后，输出最终的计算结果，同时不再接受之后的迟到数据，清理该窗口的状态数据。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;对于每小时团队得分的流处理任务，本示例希望的业务逻辑为，基于Event Time的1小时时间窗口，按团队计算分数，在一小时窗口内，每5分钟输出一次当前的团队分数，对于迟到的数据，每10分钟输出一次当前的团队分数，在窗口结束2小时后迟到的数据一般不可能会出现，假如出现的话，直接抛弃。“WWWH”表达如下：&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjUVMHMxrKk8sYvZRS5T8krEMePLiaqTf3TqCbJQpibRakSLWnYMHdVUV4cWdameQ2zwLMo90LUwicpYQ/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在基于Beam SDK的实现中，用户基于“WWWH” Beam Model表示的业务逻辑可以独立直接地实现：&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=" hljs r" style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;gameEvents
[&lt;span&gt;...&lt;/span&gt; input &lt;span&gt;...&lt;/span&gt;]
.apply(&lt;span&gt;"LeaderboardTeamFixedWindows"&lt;/span&gt;, Window
.&amp;lt;GameActionInfo&amp;gt;into(FixedWindows.of(
Duration.standardMinutes(Durations.minutes(&lt;span&gt;60&lt;/span&gt;))))
.triggering(AfterWatermark.pastEndOfWindow()
.withEarlyFirings(AfterProcessingTime.pastFirstElementInPane()
.plusDelayOf(Durations.minutes(&lt;span&gt;5&lt;/span&gt;)))
.withLateFirings(AfterProcessingTime.pastFirstElementInPane()
.plusDelayOf(Durations.minutes(&lt;span&gt;10&lt;/span&gt;))))
.withAllowedLateness(Duration.standardMinutes(&lt;span&gt;120&lt;/span&gt;)
.accumulatingFiredPanes())
.apply(&lt;span&gt;"ExtractTeamScore"&lt;/span&gt;, new ExtractAndSumScore(&lt;span&gt;"team"&lt;/span&gt;))
[&lt;span&gt;...&lt;/span&gt; output &lt;span&gt;...&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LeaderboardTeamFixedWindows对应“Where”定义窗口，Trigger对应“Where”定义结果输出条件，Accumulation对应“How”定义输出结果内容，ExtractTeamScore对应“What”定义计算逻辑。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Apache Beam的Beam Model对无限乱序数据流的数据处理进行了非常优雅的抽象，“WWWH”四个维度对数据处理的描述，十分清晰与合理，Beam Model在统一了对无限数据流和有限数据集的处理模式的同时，也明确了对无限数据流的数据处理方式的编程范式，扩大了流处理系统可应用的业务范围。Apache Flink、Apache Spark Streaming等项目的API设计均越来越多地借鉴或参考了Apache Beam Model，且作为Beam Runner的实现，与Beam SDK的兼容度也越来越高。此外，由于Apache Beam已经进入Apache Incubator孵化，读者也可以通过官网或是邮件组了解更多Apache Beam的进展和状态。&lt;/p&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; margin-bottom: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;美国时间1月10日，Apache软件基金会对外宣布，万众期待的 Apache Beam 在经历了近一年的孵化之后终于毕业。这一顶级 Apache开源项目终于成熟。&lt;/p&gt;&lt;/blockquote&gt;&lt;hr style=" box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;想了解更多大数据相关资讯？立即扫码关注吧。&lt;/span&gt;&lt;/p&gt;&lt;center style="box-sizing: border-box; color: rgb(51, 51, 51);"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/center&gt;</description>
      <pubDate>Mon, 16 Jan 2017 16:46:21 +0800</pubDate>
    </item>
    <item>
      <title>机器学习算法线上部署方法</title>
      <link>http://www.iwgc.cn/link/4360875</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;本文由携程技术中心投递，ID：ctriptech。作者：潘鹏举，携程酒店研发BI经理，负责酒店服务相关的业务建模工作，主要研究方向是用机器学习实现业务流程自动化、系统智能化、效率最优化，专注于算法实践和应用。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;我们经常会碰到一个问题：用了复杂的GBDT或者xgboost大大提升了模型效果，可是在上线的时候又犯难了，工程师说这个模型太复杂了，我没法上线，满足不了工程的要求，你帮我转换成LR吧，直接套用一个公式就好了，速度飞速，肯定满足工程要求。这个时候你又屁颠屁颠用回了LR，重新训练了一下模型，心里默骂千百遍：工程能力真弱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这些疑问，我们以前碰到过，通过不断的摸索，试验出了不同的复杂机器学习的上线方法，来满足不同场景的需求。在这里把实践经验整理分享，希望对大家有所帮助。（我们的实践经验更多是倾向于业务模型的上线流程，广告和推荐级别的部署请自行绕道）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先在训练模型的工具上，一般三个模型训练工具，Spark、R、Python。这三种工具各有千秋，以后有时间，我写一下三种工具的使用心得。针对不同的模型使用场景，为了满足不同的线上应用的要求，会用不同的上线方法。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一、总结来说，大体会区分这三种场景，请大家对号入座，酌情使用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;如果是实时的、小数据量的预测应用，则采用的SOA调用Rserve或者python-httpserve来进行应用；这种应用方式有个缺点是需要启用服务来进行预测，也就是需要跨环境，从Java跨到R或者Python环境。对于性能，基本上我们用Rserver方式，针对一次1000条或者更少请求的预测，可以控制95%的结果在100ms内返回结果，100ms可以满足工程上的实践要求。更大的数据量，比如10000/次，100000/次的预测，我们目前评估下来满足不了100ms的要求，建议分批进行调用或者采用多线程请求的方式来实现。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;如果是实时、大数据量的预测应用，则会采用SOA，训练好的模型转换成PMML（关于如何转换，我在下面会详细描述），然后把模型封装成一个类，用Java调用这个类来预测。用这种方式的好处是SOA不依赖于任何环境，任何计算和开销都是在Java内部里面消耗掉了，所以这种工程级别应用速度很快、很稳定。用此种方法也是要提供两个东西，模型文件和预测主类；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;如果是Offline（离线）预测的，D+1天的预测，则可以不用考虑第1、2中方式，可以简单的使用Rscript x.R或者python x.py的方式来进行预测。使用这种方式需要一个调度工具，如果公司没有统一的调度工具，你用shell的crontab做定时调用就可以了。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;以上三种做法，都会用SOA里面进行数据处理和变换，只有部分变换会在提供的Function或者类进行处理，一般性都建议在SOA里面处理好，否则性能会变慢。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;大概场景罗列完毕，简要介绍一下各不同工具的线上应用的实现方式。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;二、如何转换PMML，并封装PMML&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;大部分模型都可以用PMML的方式实现，PMML的使用方法调用范例见：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;jpmml的说明文档：GitHub - jpmml/jpmml-evaluator: Java Evaluator API for PMML；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Java调用PMML的范例（PPJUtils/java/pmml at master · pjpan/PPJUtils · GitHub），此案例是我们的工程师写的范例，大家可以根据此案例进行修改即可；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Jpmml支持的转换语言，主流的机器学习语言都支持了，深度学习类除外；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;从下图可以看到，它支持R、python和spark、xgboost等模型的转换，用起来非常方便。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6lh3R1yQoBlQqM9lPvYYJN0DKjKhwoZOVnJlLFyW0TPFhu5icKJY9E5tMa0u1YAsddepGvCz60Rw/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;三、接下来说一下各个算法工具的工程实践&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1.python模型上线：我们目前使用了模型转换成PMML上线方法。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;python-sklearn里面的模型都支持，也支持xgboost，并且PCA，归一化可以封装成preprocess转换成PMML，所以调用起来很方便；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;特别需要注意的是：缺失值的处理会影响到预测结果，大家可以可以看一下；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用PMML方式预测，模型预测一条记录速度是1ms，可以用这个预测来预估一下根据你的数据量，整体的速度有多少。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2.R模型上线-这块我们用的多，可以用R model转换PMML的方式来实现。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这里我介绍另一种的上线方式：Rserve。具体实现方式是：用SOA调用Rserve的方式去实现，我们会在服务器上部署好R环境和安装好Rserve，然后用JAVA写好SOA接口，调用Rserve来进行预测；&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;Java调用Rserve方式见网页链接：Rserve - Binary R server；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;centos的Rserve搭建方法见：centos -Rserve的搭建，这里详细描述了Rserve的搭建方式。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Rserve方式可以批量预测，跟PMML的单个预测方式相比，在少数据量的时候，PMML速度更快，但是如果是1000一次一批的效率上看，Rserve的方式会更快；用Rserve上线的文件只需要提供两个：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;模型结果文件（XX.Rdata）；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;预测函数（Pred.R）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Rserve_1启动把模型结果(XX.Rdata)常驻内存。预测需要的输入Feature都在Java里定义好不同的变量，然后你用Java访问Rserve_1，调用Pred.R进行预测，获取返回的List应用在线上。最后把相关的输入输出存成log进行数据核对。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;code class="" style=" max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;Pred&lt;/span&gt;.&lt;span&gt;R&lt;/span&gt; &amp;lt;- function(x1,x2,x3){&lt;span&gt;&lt;span&gt;data&lt;/span&gt; &amp;lt;- cbind&lt;span&gt;(&lt;span&gt;x1&lt;/span&gt;,&lt;span&gt;x2&lt;/span&gt;,&lt;span&gt;x3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;# feature engineering&lt;/span&gt;&lt;span&gt;score&lt;/span&gt; &amp;lt;- predict(modelname, &lt;span&gt;&lt;span&gt;data&lt;/span&gt;, &lt;span&gt;type&lt;/span&gt; = 'prob')&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;(list(score))
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;3.Spark模型上线-好处是脱离了环境，速度快。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Spark模型的上线就相对简单一些，我们用scala训练好模型（一般性我们都用xgboost训练模型）然后写一个Java Class，直接在JAVA中先获取数据，数据处理，把处理好的数据存成一个数组，然后调用模型Class进行预测。模型文件也会提前load在内存里面，存在一个进程里面，然后我们去调用这个进程来进行预测。所以速度蛮快的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;Spark模型上线，放在spark集群，不脱离spark环境，方便，需要自己打jar包；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们这里目前还没有尝试过，有一篇博客写到了如果把spark模型导出PMML,然后提交到spark集群上来调用，大家可以参考一下：Spark加载PMML进行预测。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;四、只用Linux的Shell来调度模型的实现方法—简单粗暴&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;因为有些算法工程师想快速迭代，把模型模拟线上线看一下效果，所以针对离线预测的模型形式，还有一种最简单粗暴的方法，这种方法开发快速方便，具体做法如下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;写一下R的预测脚本，比如predict.R，是你的主预测的模型；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;然后用shell封装成xx.sh，比如predict.sh，shell里面调用模型，存储数据；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;predict.sh的写法如下：&lt;/p&gt;&lt;p&gt;&lt;code class="" style=" max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;# 数据导出&lt;/span&gt;data_filename = xxx
file_date = xxx
result = xxx
updatedt = xxx&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; path
hive &lt;span&gt;-e&lt;/span&gt; &lt;span&gt;"USE tmp_xxxdb;SELECT * FROM db.table1;"&lt;/span&gt; &amp;gt; &lt;span&gt;${data_filname}&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;# R脚本预测&lt;br/&gt;&lt;/span&gt;Rscript path/predict.R &amp;nbsp;&lt;span&gt;$file_date&lt;br/&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ $? &lt;span&gt;-ne&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; ]&lt;br/&gt;&lt;span&gt;then&lt;/span&gt; &lt;br/&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;"Running RScript Failure"&lt;br/&gt;&lt;/span&gt;&lt;span&gt;fi&lt;br/&gt;&lt;/span&gt;&lt;span&gt;# R预测的结果导入Hive表&lt;br/&gt;&lt;/span&gt;list1=&lt;span&gt;"use tmp_htlbidb;
load data local inpath 'path/&lt;span&gt;$result&lt;/span&gt;'
overwrite into table table2 partition(dt='&lt;span&gt;${updatedt}&lt;/span&gt;');"&lt;/span&gt;&lt;br/&gt;hive &lt;span&gt;-e&lt;/span&gt; &lt;span&gt;"&lt;span&gt;$list1&lt;/span&gt;"&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;最后用Crontab来进行调度，很简单，如何设置crontab，度娘一下就好了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code class="" style=" max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&amp;gt;crontab -e
-------------------------&lt;/span&gt;### 每天5点进行预测模型；
0 5 * * * sh predict.sh&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;五、说完了部署上线，说一下模型数据流转的注意事项&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;区分offline和realtime数据，不管哪种数据，我们根据key和不同的更新频次，把数据放在redis里面去，设置不同的key和不同的过期时间；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;大部分redis数据都会存放两个批次的数据，用来预防无法取到最新的数据，则用上一批次的数据来进行填充；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;针对offline数据，用调度工具做好依赖，每天跑数据，并生成信号文件让redis来进行读取；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;针对realtime数据，我们区分两种类型，一种是历史+实时，比如最近30天的累计订单量，则我们会做两步，第一部分是D+1之前的数据，存成A表，今天产生的实时数据，存储B表，A和B表表结构相同，时效性不同；我们分别把A表和B表的数据放在Redis上去，然后在SOA里面对这两部分数据实时进行计算；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;模型的输入输出数据进行埋点，进行数据跟踪，一是用来校验数据，二来是用来监控API接口的稳定性，一般性我们会用ES来进行log的查看和性能方面的监控；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;任何接口都需要有容灾机制，如果接口超时，前端需要进行容灾，立即放弃接口调用数据，返回一个默认安全的数值，这点对于工程上非常重要。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;以上就是我们在模型部署的经验分享，欢迎大家来找我一起探讨相关工程上的最佳实践。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Mon, 16 Jan 2017 16:46:21 +0800</pubDate>
    </item>
    <item>
      <title>2017年，你需要GET的9大技术领域</title>
      <link>http://www.iwgc.cn/link/4325086</link>
      <description>&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;文中蓝色字体可点击底部的【阅读原文】获取链接。&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2016年过去了，然而我一点也不怀念它，因为2017年的技术趋势更加吸引人。回顾一年里业界的发展，2017年的技术趋势初现端倪。根据CSDN知识库这一年来大家关注的热门知识图谱，我们来给大家梳理一下2017年值得关注的技术方向。&lt;/p&gt;&lt;h4 style=" margin-top: 20px; margin-bottom: 10px; font-size: 18px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); text-decoration: underline; max-width: 100%; box-sizing: border-box; font-size: 16px; word-wrap: break-word !important; background-color: transparent;"&gt;&lt;strong&gt;&lt;span&gt;人工智能&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;span&gt;与&lt;/span&gt;&lt;/strong&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); text-decoration: underline; max-width: 100%; box-sizing: border-box; font-size: 16px; word-wrap: break-word !important; background-color: transparent;"&gt;&lt;strong&gt;&lt;span&gt;机器学习&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;元旦刚过，阿法狗就以60胜0负1平的成绩一骑绝尘，横扫了围棋界高手。一时间，“AI将取代人类”的惊呼声再次响起。其实，这种悲观想法真的多余。人工智能在未来更多的，还是帮助我们的生活更加便捷轻松。未来，可能一个AI就是一个超级App，可以帮我们专门解决一个类生活问题。&lt;/p&gt;&lt;p&gt;现在很多巨头都在布局AI领域。Google就不必说了，它在人工智能领域的尝试非常广泛，除了阿法狗，还有自动驾驶、语音助理、智能家居等。Facebook已经收购了8个机器人公司和1个机器学习公司，并在许多新的业务中使用了人工智能技术。IBM斥资10亿美元成立的Watson项目包括了语音、语言理解、图像识别和情绪分析等能力，已经与一些汽车企业和医疗机构开始展开合作。而在国内，小米CEO雷军在近期的年会上也宣布人工智能是2017年的重点发展领域。&lt;/p&gt;&lt;p&gt;提到人工智能，就一定离不开机器学习。机器学习中比较火的一个主题——深度学习，已经在人脸识别、图像识别、语音识别，自然语言理解NLP技术、大数据挖掘技术、无人驾驶技术等领域获得了应用。Open AI研究科学家Durk Kingma&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;预测&lt;/a&gt;，未来3年，DNN、反向传播、SGD仍将是主要的技术。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuuJicUzjtQbDkTEhUo4Via0fh1fbwAsFIFbqiaiaTeNyv5jecg0bTUo0SnA/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; line-height: 27.2px; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多人工智能知识点&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; line-height: 27.2px; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多机器学习知识点&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); text-decoration: underline; max-width: 100%; box-sizing: border-box; line-height: 1.1; word-wrap: break-word !important; background-color: transparent;"&gt;&lt;strong&gt;&lt;span&gt;微信开发&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2017年开年，筹备一年的小程序正式发布，引发了行业不小的地震，其带来的应用程序存在方式与现有App模式大有不同，掀起了技术热潮。无需安装用完即走的“触手可及”概念、多种接入方式等便捷的特点可以预见第三方小程序的市场巨大，微信也成为连接PaaS和SaaS的平台。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFunpic7iafiaicDZ6oPWPR2kRT2fhLzsmia9JMvGUF7u7oOibyEiaLmBWKznSdA/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;CSDN社区集合CSDN知识库、CSDN学院、CSDN博客、CSDN下载，从知识图谱、在线公开课，到系列博客与案例源码，全方位为大家梳理了一篇关于微信小程序开发的&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;技术干货&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多微信开发知识点&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; line-height: 1.1; word-wrap: break-word !important; background-color: transparent;"&gt;直播技术&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;直播在去年的热门程度堪比前两年的VR。然而两者面对的竞争点也很相似。最初局限于游戏直播和聊天的直播技术，也在泛娱乐、教育、VR等领域生根开花，直播逐渐从一个独立的产品，慢慢成为各领域产品中的一个标配功能。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuaicqu2gtZoIQOYekQ4kpYAqtl1Z1WicVTYvLSN6bTAgkZkcibRJfPaSDQ/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;VR直播也是一个非常热门的应用场景。年底，王菲的演唱会支持网络直播+VR直播，算过国内第一个吃螃蟹的。而在美国，2016年获得6000万美元B轮融资的NextVR已经开始直播了NBA比赛和美国民主党总统候选人辩论。&lt;/p&gt;&lt;p&gt;另一方面，教育直播由于国内雾霾问题被各个学校提上了日程，很多学生在家通过网络直播来上课。姑且算是应了“天时”吧。在教育领域，有几家直播技术服务商已经耕耘多年，通过自建CDN保证直播质量，通过教学白板、课件分享等功能，不断提升着交互体验。目前很多支持直播课堂的教育机构都采用了他们的服务。&lt;/p&gt;&lt;p&gt;直播行业在今年会出现更加激烈的竞争，不仅仅是在内容层面，更多也会在技术上出现更多提升与创新。&lt;/p&gt;&lt;p&gt;直播看似效果相似，但在不同领域需要解决的问题却不同。根据特邀专家与用户梳理的&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;直播技术知识库&lt;/a&gt;显示，在教育领域的直播，在技术上要求有稳定的内容分发网络，以及符合教育场景的拓展功能；游戏直播对网络要求高，更重要的是解决好编解码。另外，还有一些直播产品需要搞定多视频无缝切换、多人连麦等功能。另外，还有许多值得关注的技术点，比如基础的流媒体协议、开源项目、系统架构、CDN、交互技术等。&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击访问直播技术知识图谱&lt;/a&gt;&lt;/p&gt;&lt;h4 style=" margin-top: 20px; margin-bottom: 10px; font-size: 18px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); text-decoration: underline; max-width: 100%; box-sizing: border-box; font-size: 16px; word-wrap: break-word !important; background-color: transparent;"&gt;&lt;strong&gt;&lt;span&gt;大数据&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;“数据即价值、数据指引未来”，这已经是大家对大数据领域的共识。数据背后蕴藏的力量体现在基于数据驱动精细化运营，数据驱动的Growth Hacking等概念和方法论在国内也越来越普及。从事数据的企业主要主要有两大阵营：数据技术为核心，为企业提供定制化解决方案，如数据分析、云Saas业务等；围绕数据库和数据仓储业务，利用在硬件方面以及传统IT基础建设的优势冲击大数据领域，如数据中心建设，数据存储计算业务等。&lt;/span&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuTxkZRxPHJZq1KdDZVsbD4boDFOULTztAbGNibiadYzOY2laRdqE0uUcA/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;有分析认为， 2017年将会出现更多的基于大数据研究的应用项目，大家关注的焦点也会继续围绕如何将大数据业务化、商用化。&amp;nbsp;&lt;br/&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多云计算大数据技术知识点&lt;/a&gt;&lt;/p&gt;&lt;h4 style=" margin-top: 20px; margin-bottom: 10px; font-size: 18px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;微服务&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;微服务架构作为一种特定的软件应用程序设计方式，被业界公认为云计算时代互联网应用的主要构建方式，可将大型软件拆分为多个独立可部署服务组合而成的套件方案，其中各项服务都拥有自己的进程并利用轻量化机制（通常为HTTP源API）实现通信。“简单就是硬道理”也是微服务能够流行的原因。&amp;nbsp;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuEm4kmKjbeVvhvYsMJm6GvjyyLjuKAIb65g9iaTkC4ybueenINZhfBTw/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;最早从Netflix、Amazon等公司实践，因其高度的弹性、灵活性和效率的巨大提升，快速受到各领域架构师和技术决策者的关注，成为2016年IT领域最受关注的技术潮流之一。在过去一年中，各行各业逐步将微服务这一设计理念应用于核心系统中，也引发更多关于微服务在提高系统效率以及满足业务需求方面的的贡献与冲突的讨论。&amp;nbsp;&lt;br/&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多微服务知识点&lt;/a&gt;&lt;/p&gt;&lt;h4 style=" margin-top: 20px; margin-bottom: 10px; font-size: 18px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;虚拟现实&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;相比2016年初市场对“VR浪潮”的热炒，人们去年下半年对待VR反而“冷静”了许多。根据&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;Superdata&lt;/a&gt;发布的数据报告，尽管在2016年各大VR设备厂商的销量并没有达到年初预期，但整体还是呈增长趋势。在内容方面，Steam上排名前100的VR内容已经累计用友750万用户，用户量最多的是《The Lab》，达到了44万。根据高盛的&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;报告分析&lt;/a&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuh5On9lUVaRKrlkkArGUk7gJcDKh3eeLPOic3NlvMd4nD08fN3BnQS8A/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;在去年10月的Oculus Connect大会上，Oculus首席科学家Michael Abrash表示，未来将实现单眼4K、140度FOV、注视点渲染技术、空间音效，以及更自然的控制交互。在今年的CES上，Intel与Qualcomm均将VR解决方案作为参展的重点之一。在内容开发方面，不仅包括Oculus、Sony、HTC在内的公司在不断优化SDK，Unity、Ureal也在为VR做出相应优化。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击访问虚拟现实知识图谱&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; line-height: 1.1; word-wrap: break-word !important; background-color: transparent;"&gt;区块链&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;2016年FinTech概念愈发火热，而区块链又是其中最火的话题，政策扶持、资本热捧、各巨头纷纷高呼。资本版图数据显示，两年前区块链就是美国创投中融资最高的版块，突破10亿元。投行、金融巨头从最初的观望到逐步拥抱，开始尝试实践落地；BAT等互联网巨头，也纷纷布局金融科技，加大技术团队投入，扩展金融科技实力以求进一步拓展业务疆土。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuChVTkJsxGI8PzJIib0ySUAcVeQxSj2iclFkqpAWrMiaUuhPAA5KLdscEg/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;2016年工信部发布《中国区块链技术和应用发展白皮书》，国务院印发的《“十三五”国家信息化规划》中特别提到国家布局重点，区块链也位列其中，但目前区块链领域技术通用标准还未建立，这方面在2017年也将逐步完善。&amp;nbsp;&lt;br/&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多区块链知识点&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); text-decoration: underline; max-width: 100%; box-sizing: border-box; line-height: 27.2px; word-wrap: break-word !important; background-color: transparent;"&gt;&lt;strong&gt;嵌入式开发&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;以上提到了很多业界热门的趋势，人工智能、虚拟现实、直播，这些热门行业背后除了有软件技术的支撑，也离不开硬件技术的加持。嵌入式开发或许没有VR、直播、自动驾驶、无人机听上去那么炫，但缺少了背后的嵌入式工程师，这些都是纸上谈兵。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuOfbOA6Mibn2pic31E4yWmVPATDh9zibAswu95xMt0GqhZ9F354NndIJ6w/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;2017年我们将会看到更多由各大厂商提供的硬件开发工具和软件包支持。我们已经可以看到的是DeltaOS的Limda编译环境，Vxworks提供了Tonado开发环境，Windows CE也推Embedded VC++。&lt;/p&gt;&lt;p&gt;同时，由于智能设备、联网设备的兴起，嵌入式设计更多地开始考虑网络化和信息化。嵌入式处理器开始增加一些功能接口。新一代的嵌入式处理器已经开始内嵌网络接口，除支持TCP/IP协议，还有的支持IEEE1394、USB、CAN、蓝牙等。&lt;/p&gt;&lt;p&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多嵌入式开发知识点&lt;/a&gt;&lt;/p&gt;&lt;h4 style=" margin-top: 20px; margin-bottom: 10px; font-size: 18px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;敏捷开发&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;敏捷是以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发、管理。它是针对传统的瀑布开发模式的弊端而产生的一种新的模式，目标是提高生产效率和响应能力。敏捷在过去一年中成为软件开发领域热度靠前的一词，其被奉为软件开发制胜之道。当研发团队发展到一定阶段，越来越多的团队以求用敏捷开发模式来实施研发管理，进而能达到高效迭代、保障高质量软件产品等目的，最终实现为企业谋取更大的收益。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFu3PDP8R3jk5Pydtrt3WkUX26LT4CgUSVm9gibtVZVW8BVpgxBXsZib5tQ/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;2016年关于持续集成、DevOps、测试驱动开发等相关讨论越来越多，很多互联网巨头公司在研发团队中设置敏捷教练、Scrum Master。由于直观易用的特性，Scrum和看板逐渐成为软件研发管理两股风潮。&amp;nbsp;&lt;br/&gt;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;点击了解更多敏捷知识点&lt;/a&gt;&lt;/p&gt;&lt;p&gt;配图来源：&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;freepik&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 13 Jan 2017 17:12:34 +0800</pubDate>
    </item>
    <item>
      <title>展望 IoT 市场：机器学习能力定生死</title>
      <link>http://www.iwgc.cn/link/4325087</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;&amp;nbsp;Jacques Touillon，AirBoxLab 首席执行官，智能空气质量监控器 Foobot 的开发者。&amp;nbsp;&lt;br/&gt;&lt;span&gt;译者：&lt;/span&gt;&amp;nbsp;张新慧&amp;nbsp;&lt;br/&gt;&lt;span&gt;审校：&lt;/span&gt;&amp;nbsp;屠敏，关注 IoT 领域，寻求报道或者投稿请发邮件&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;tumin@csdn.net&lt;/a&gt;，技术之路，我们共同进步。&lt;/p&gt;&lt;/blockquote&gt;&lt;hr style=" margin-top: 20px; margin-bottom: 20px; max-width: 100%; box-sizing: content-box; font-size: 16px; white-space: normal; widows: 1; height: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;机器哪怕价值上亿，也无法替代医生来治病救人；但一个25美元的可穿戴设备却知道你什么时候该去看医生。&lt;/p&gt;&lt;p&gt;1996 年，美国芝加哥的库克郡医院急诊室采用了一种算法来判断出现胸痛症状的患者中，哪些面临更高的心脏病发作风险，是否在医院床位紧缺的情况下有住院的充分理由。该算法严格按照流程执行系统的基础测试，被证明不但快速高效，且及其精准。相比单纯依赖医生的判断，该算法判定的低风险患者数量多了 70%，而高风险患者数量则达到实际数量的 95%（医生判断仅为 75-89%）。这真是让人惊叹——要知道那个年代，深度运算还未问世呢。&lt;/p&gt;&lt;p&gt;想象当前，仅今年在使用的&amp;nbsp;&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;IoT 设备就几近 64 亿个&lt;/a&gt;——全球平均每人一台。这么庞大的数量，哪怕只有 1% 能通过脉搏、饮食和睡眠数据来判断用户健康状况的话，那么全球能够及时治疗的患者数量会是之前的 5 倍。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujAS5yDznTdtXEjx1Wib0xFuPAwxtKO3RVhcsicLCRdEJskjNGMJ9rbbtIB7p0U43DGPtV2QxhyuMIQ/640?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;但真正了不起的还是机器学习能力，它不止广泛应用算法那么简单，而是通过收集的大量数据，觉察出拥有几十年从医经验者都难以发现的症状。想象一下， Fitbit（美国健康追踪器品牌）觉察到用户脉搏异常，显示出强烈的心脏发病征兆，于是提醒用户及时就医。机器学习就意味着居家用品也能解决“不可能解决”的问题。&lt;/p&gt;&lt;p&gt;IBM 的“沃森(Watson)”和 Google 的“深度思维(DeepMind)”在诸多领域（如 Jeopardy 智力问答和围棋）表现超过人类后，机器学习就不再是一个愿景了。现在要问的是：如果 Fitbit 能救命，而 Nike+ Fuel Band 运动追踪器不能救命，你会购买哪一个呢？&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;“smart（智慧、智能）”的真正价值&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;“智能”产品层出不穷，也难怪名列前茅的总是那些具备学习能力的。拿 Nest 智能恒温器举例，消费者愿意掏腰包并非因为 Nest 是手机可操控的，而是因为没人在家时可以节能——Nest 以智慧的方式解决了长久存在的问题，既能根据用户所需调整温度，没人在家时又能节能，这比一个简单的定时器高明多了。&lt;/p&gt;&lt;p&gt;遗憾的是，大部分制造商太急功近利。拿 Phillips 的 HUE 无线 LED 灯举例，其外观固然惹人喜爱，但仅仅因为可手机操控开关就贴上“smart（智慧、智能）”的标签难免牵强。开关灯不是个问题，不需要解决——难道你轻易因为一个人会开关灯就称其“smart”吗？那么为什么换做一个灯泡，就心安理得贴上“smart”一词呢？&lt;/p&gt;&lt;p&gt;很多 IoT 产品并不是真正“smart”，这也成了 IoT 市场发展的阻碍。能够远程控制的门锁，还有主人一进家门就自动打开的收音机充其量只是奢侈品，跟米其林大餐和豪华游轮这些只能富人消费的起的东西没什么两样。&lt;/p&gt;&lt;p&gt;机器学习能力将“渴求”转换为“必备”，比如既让你温暖过冬又节省电费的恒温器；比如给予睡眠或健身意见的可穿戴设备；比如在恶果酿成前就察觉污染、追踪来源的环境监视器……&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;机器学习能力：永远的胜者标杆&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;“会学习”的设备总是出类拔萃，更具吸引力。但机器学习能力本身则意味着在众多竞争者之中，长久地保持领先优势。&lt;/p&gt;&lt;p&gt;云技术让设备会“学习”，所以机器学习能力不再是设计问题（只要设备能联网），不再是硬件问题（复杂的数据处理可以远程实现），更像是人才问题——有能力的工程师少之又少，不过只要薪资够高，这也不是问题。可能将其形容为数据问题是最为贴切的。&lt;/p&gt;&lt;p&gt;要让计算机老老实实学习数据模式(patterns)，需提供大量数据集。计算机要考虑用户偏好、使用案例、环境等诸多因素，而很多，甚至绝大多数因素都是时间相关的——使用频率、行为频率、条件发生频率、用户行为逐渐改变、环境的季节变化以及传感器寿命期内的数据精确性等。&lt;/p&gt;&lt;p&gt;人人都在争分夺秒，而时间是公平的。即便拥有上亿台优质的联网设备，数不清的用户和资金也无法缩小与竞争者之间哪怕仅有 6 个月的差距。而坐拥优质数据则是对手无法超越的强大优势，这就要看数据读取的精确度、设备众多功能，包括早先开发并最终稳定下来的功能。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;IoT 市场是大家的市场&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;现在的行情，好像只有 IBM 和 Google 才能时不时拿出像样的，“会学习”的产品来，难道只有大玩家才能玩转，小公司没资本吗？当然不是。&lt;/p&gt;&lt;p&gt;一些创业公司无法处理复杂数据，可以外包啊。正如刚刚所说，云技术已经实现远程处理数据了，创业公司只要按每小时付费，就可“租用”高级设备——这投资有理有据，成本不高，省事省力省心。&lt;/p&gt;&lt;p&gt;更重要的市，“会学习”的设备硬件要求不是很高，不一定开发的第一批设备就要具备机器学习能力，刚起步的公司设计和组装都够忙的，别给自己添太多麻烦。&lt;/p&gt;&lt;p&gt;其实当初 Nest 也饶了很多弯路；可手机操控的恒温器通过简单算法来评估房子升温所需时间。算法并没有去了解住户的需求，但是升级只需要新的数据包，而不是装着新产品的新包裹——添加机器学习能力没必要非得投入重金（当然得赶在竞争者之前，越早开始，成本越小）。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;专业，可以无处不在&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;把机器学习能力看作知足常乐的创业公司的坟墓，想想挺可怕。但我们有更多理由去选择乐观，而不是恐惧。“会学习”能够增加的价值超出想象——手上戴的不仅仅是健康腕带，还是医生；门上装的不仅仅是智能门锁，还是侦探；家里用的不仅仅是环境监控器，还是健康卫士；花钱买的不仅仅是豪华设备，还是男管家。&lt;/p&gt;&lt;p&gt;“会学习”智能设备不再急功近利，而是变得更为强大。一些机器学习能力的早期开拓者，如 Nest 和 Echoes，已脱颖而出，让我们的生活更有价值。其他科技公司纷纷效仿之时，世界将是另一番模样。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 13 Jan 2017 17:12:34 +0800</pubDate>
    </item>
    <item>
      <title>“鲜点”资讯：Doug Cutting寄语2017，AWS和VMware“双赢”联盟</title>
      <link>http://www.iwgc.cn/link/4325088</link>
      <description>&lt;p&gt;&lt;span&gt;“鲜点”资讯网罗新鲜要闻，每日为你呈现&lt;/span&gt;&lt;span&gt;大数据和云计算领域&lt;/span&gt;&lt;span&gt;热点新闻。本次内容播报如下&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;文中所有蓝色字体可点击底部的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;获取详情链接&lt;/span&gt;&lt;span&gt;）：&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;Hadoop创始人Doug Cutting寄语2017：五种让开源项目成功的方法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在未来的几年内，开源生态系统将继续扩大，也会不断地在有实际意义的项目里实施。它汇聚了今天最聪明的头脑，在通力合作下，以十年前不可能的速度推进软件开发。如果你想改善现有技术，或者想支持打破传统的观念，可以加入这里。Doug鼓励每个人都有兴趣参与进来，也鼓励经验丰富的人因为这个原因继续坚持下去。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;阿里云国际化再布局 将为马来西亚学校提供云服务&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;阿里云宣布推出面向教育行业的解决方案EduCloud，并与数字媒体公司Conversant和在线教育服务提供商Prestariang Berhad达成合作，以云计算大数据技术为基础向马来西亚学校提供校园管理、教学、娱乐、移动支付等服务。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;年度盘点 | 2016年中国云计算十大新闻&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;刚刚离去的2016，有太多值得我们思考与感悟，回顾过去的2016，是为了开启更好的2017。为此，中国软件网针对移动办公、CRM、HR、云计算、大数据、信息安全等细分领域以及软件园区2016年的发展状况，整理出了2016年度十大新闻和2016年度十大产品，并对未来发展做了趋势预测。今天我们要盘点的是云计算领域。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2019年云计算市场规模将达5706.4亿 PAAS成为决胜一环&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;云计算服务市场由云计算数据中心基础设施、IaaS、PaaS、SaaS四个细分市场构成。2016年中国云计算市场依然保持增长，预计整体市场规模将达到2797亿元，同比增长41.7％。云计算服务市场由云计算数据中心基础设施、IaaS、PaaS、SaaS四个细分市场构成。2016年中国云计算市场依然保持增长，预计整体市场规模将达到2797亿元，同比增长41.7％。公有云服务市场规模仍然仅占整体云计算市场规模的8％，主要是中国云计算市场规模依然以硬件投资为主，云计算服务市场还未起到主导作用，公有云服务的市场培育之路依然艰巨。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;AWS和VMware“双赢”联盟：用户是否是“第三赢”家？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;AWS和VMware之间的合作伙伴关系虽然可以对他们在企业级云市场中的合作伙伴有所帮助，但是也带来了与定价和支持相关的问题。现在，这两家行业巨头正在着手开展这项工作。供应商们正在开发VMware Cloud on AWS，这是一个基于VMware Cloud Foundation的平台，其中包括了VMware vSphere、VMware Virtual SAN以及NSX。这个软件在裸机AWS基础设施上运行，这意味着它可支持私有云、混合云以及公有云。因而，VMware云服务现在具有一致的接口。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2016年度“中国大数据创新百人榜单”火热出炉&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;2017年1月10日，“2016中国大数据创新百人榜单”隆重发布。2016年入选“中国大数据创新百人榜单”的人物涉及商界、政界、科研、学术、创业、投资等多个领域，在过去的2016年中，他们站在所属行业的前沿，具有开创性与前瞻性地推动大数据产业发展，在当下经济全球化时代，主导或参与了具有深刻影响力和重大突破性的大数据产品与技术研发、应用与服务创新，管理与战略规划，他们是中国大数据产业的杰出代表，是中国企业转型、创新、创业大潮中的引领者和开创者，是中国大数据产业的“标杆”。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2017年数据知识产权第一案：脉脉非法抓取使用微博用户信息 被判不正当竞争&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;日前，有关“脉脉非法抓取使用新浪微博用户信息”的案件在北京知识产权法院终审宣判。法院驳回了脉脉的上诉，维持原判，认定北京淘友天下技术有限公司和北京淘友天下科技发展有限公司(均为脉脉的经营公司)构成不正当竞争，立即停止涉案不正当竞争行为。进入大数据时代后，包括微博在内的平台方均有责任和义务推动数据生态繁荣，建立使用规则，并及对滥用行为加以制止。本案为大数据不正当竞争纠纷案首案，对行业规则的建立以及如何维权具有重要指导意义。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2016年十大云故障事件：数量减少，损害增加&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;随着云提供商不断积累运营经验和技术的日益成熟，云故障的频率和持续时间都在减少。这是个好消息。但另一方面，企业却在面对宕机的时候变得越来越脆弱。随着现代化应用和数据源变得越来越分散，我们对它们来管理日常生活方方面面的依赖性也越来越高，潜在的危害，或者强烈的挫折感，变得比以往任何时候都更大。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;广东省交通运输厅与腾讯云腾讯地图合作，提供春运出行大数据分析&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1月11日消息，广东省春运工作领导小组暨广东省交通运输厅春运办公室昨天正式挂牌运作。为服务好春运，今年广东省交通运输厅积极推进“互联网+”大数据在春运工作中的应用，与腾讯公司共同构建了广东省春运交通大数据预测分析平台，提升春运组织协调和应急预警能力。同时，“广东交通发布”微信公众号也正式上线，及时向公众发布各类春运信息。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;国内首个航旅大数据研究中心在沪成立 倡导开放共享、融合创新、安全规范&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1月11日，国内首个航旅大数据研究中心——工信海威-敬众航旅大数据研究中心在沪成立。该研究中心由上海敬众科技股份有限公司联合工业和信息化部电子科学技术情报研究所相关部门共同成立，通过政企合作的形式致力于共同研究利用航旅大数据提升管理服务能力，促进航旅消费和产业转型，并就航旅大数据的安全保障体系、使用标准规范等问题展开深入研究。&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjXo0TOxQLNpNbkVxQ6f9mciaTia8lriaDbFRDv173l0icFibbZCvlHMsOvMXYWrwaCuY5SCNUPHrVbfib9A/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br/&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/p&gt;&lt;/blockquote&gt;</description>
      <pubDate>Fri, 13 Jan 2017 17:12:34 +0800</pubDate>
    </item>
    <item>
      <title>SIGIR 2016信息检索精选论文</title>
      <link>http://www.iwgc.cn/link/4307421</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;洪亮劼，Etsy数据科学主管，前雅虎研究院高级经理。长期从事推荐系统、机器学习和人工智能的研究工作，在国际顶级会议上发表论文20余篇，长期担任多个国际著名会议及期刊的评审委员会成员和审稿人。&amp;nbsp;&lt;br/&gt;&lt;span&gt;责编：&lt;/span&gt;何永灿，欢迎人工智能领域技术投稿、约稿、给文章纠错，请发送邮件至&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;heyc@csdn.net&lt;/a&gt;&amp;nbsp;&lt;br/&gt;&lt;span&gt;本文为&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;《程序员》&lt;/a&gt;原创文章，未经允许不得转载，更多精彩文章请&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;订阅2017年《程序员》&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;人工智能和机器学习领域的学术论文汗牛充栋。每年的各大顶级会议、研讨班录用好几千篇论文，即便是亲临现场也很难追踪到所有的前沿信息。在时间和精力有限的情况下，选择精读哪些论文、学习哪些热门技术就成为了AI学者和从业人员头痛的问题。本栏目旨在帮助大家筛选出有意思的论文，解读出论文的核心思想，为精读提供阅读指导。&lt;/p&gt;&lt;p&gt;信息检索（IR）界的顶级会议International ACM SIGIR Conference on Research and Development in Information Retrieval（SIGIR 2016）在意大利比萨举行。整整三十年前的1986年，第一届SIGIR大会也在同一个城市举行。尽管与机器学习和数据挖掘领域其他大会的蓬勃发展相比，SIGIR这几年有所收缩，但信息检索界的研究依然对搜索系统以及推荐系统的发展有着重要的指导作用。笔者从SIGIR 2016精选出5篇有意思的文章，为读者解惑。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;A Sequential Decision Formulation of the Interface Card Model for Interactive IR&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这篇论文来自伊利诺伊大学香槟分校信息检索领域权威翟成祥的实验室。推荐这篇文章主要有如下几个目的：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;很多人，特别是比较年轻的读者，在现在常见的有“模型、实验”然后拼“性能”之外，可能没有见识过其他的论文形式。所以，这篇文章至少从构思、写作的角度可以扩宽读者的眼界。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;当下还在做信息检索理论模型研究的人已经寥寥无几。作为信息检索领域权威之一的翟成祥教授能够一直推动这方面的发展，着实不容易。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;这篇文章本身也有一些有意思的扩展（后文详述）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这篇文章的立足点，是如何扩展信息检索领域的经典假设——传统的Probability Ranking Principle到更加复杂的Decision Making的情况下。文章的核心，是用作者自己的语言和框架，把Markov Decision Process的基础重新写了一遍。然后，通过引入用户状态的概念，又推导到Partially Observed Markov Decision Process（POMDP）。之后，文章扩展了State，引入了Stopping State的概念。此外，文章定义了几种特殊的Card。由于提出的框架过于新颖，文章的实验主要是Simulation和小规模的User Study。单独看文章提出的这套理论，有一点希望在POMDP的经典语境下添加一些新东西的意味。同时，由于整个思路和传统的IR又相去甚远，实验也不好做。不过，这篇文章提出了一个不错的研究方向，和笔者之前的预期比较吻合。那就是：如何把最新的Reinforcement Learning的成果应用到信息检索领域？能否提出一个优化Long Term User Utility的办法，同时解决很多中间的问题，比如没法定义Utility怎么办，没法定义用户的中间状态怎么办？&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;Statistical Significance, Power, and Sample Sizes: A Systematic Review of SIGIR and TOIS, 2006-2015&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这篇论文的作者酒井哲来自日本的早稻田大学，也是信息检索界的著名学者。他的这篇文章具有两层实用价值：第一，文章系统地分析了过去十年SIGIR和ACM Transactions on Information Systems（TOIS），信息检索领域的两大顶级发表平台中的绝大多数文章使用Hypothesis Testing的情况；第二，文章总结了不少实用的Hypothesis Testing工具，以及一系列关于这些工具的讨论，特别是针对这些工具在不同论文中的使用。&lt;/p&gt;&lt;p&gt;这里总结一下这篇文章的一些结论：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;在10年的将近862篇论文中，只有35%使用了Paired t-test，而255篇（30%）没有Significance Testing。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在255篇中，167篇使用了“Significant Improvement”和“Significantly outperform”的字眼。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;464篇有两个系统比较的论文中，65%使用了Paired t-test， 21%使用了Wilcoxon Signed Rank Test。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;这10年来，没有Paired t-test或者Wilcoxon signed rank test的文章总体是减少的，使用Paired t-test的论文是增加的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在565篇汇报了Significance Test结果的论文中，65%没有汇报p-values或者没有汇报test statistics。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在133篇能够做Power Analysis的文章中，29%是Extremely overpowered，还有7%是Extremely underpowered。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Extremely overpowered的实验数据通常来自工业界，而Extreme underpowered的则来自于雇佣了Participants。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总体看来，结果不是那么乐观。也就是说，过去10年SIGIR和TOIS的很多结果可能并不是那么站得住脚。当然，实践在慢慢改变。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;Query to Knowledge: Unsupervised Entity Extraction&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这篇文章来自雅虎研究院的Query Understanding组。目的是从Query Logs里面提取和商品有关的Entity，文章专注于品牌名和产品名。总体说来，Query的Entity Extraction是提取Query相关Feature的重要环节。与以前的思路不同的是，这篇文章提出的是彻底的无监督方法，也就是借助所谓的Adaptor Grammars（想深入了解Adaptor Grammars的朋友建议看相关论文，这篇文章里有简单的介绍，但不是很透彻）。&lt;/p&gt;&lt;p&gt;简单说来，Adaptor Grammars就是一个Nonparametric版的Probabilistic Context-free Grammar。用户可以通过定义一组简单的规则或者叫Grammar来启发算法发现类似的规则。当然，较真的朋友，可能会觉得这样的规则也是一部分监督信息。但是，定义这样的规则还是比要给单个数据点标注信息来得容易。&lt;/p&gt;&lt;p&gt;文章里的Adaptor Grammars是通过MCMC来学习的，作者们也提出了使用Variational Inference来加速的可能。从算法部分来看，这篇文章并没有对Adaptor Grammars进行大的改进，亮点是把这个算法应用到这个场景。从实验效果来看，Adaptor Grammars还是不错的，能够识别非常多的品牌和产品名。&lt;/p&gt;&lt;p&gt;另外有两点值得注意：第一，文章中提到的Query Normalization方法也值得参考，这样减少了数据中非常多的Noise；第二，文章的Related Work也很值得关注，看点在于总结了之前的Query Entity Extraction的主要方法，基本上都是基于CRF+Topic Modeling的Semi-Supervised的方法。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;Generalized BROOF-L2R: A General Framework for Learning to Rank Based on Boosting and Random Forests&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这篇文章的作者来自巴西的University Federal of Minas Gerais。文章的核心思想非常直观，就是要把Boosting和Random Forest（RF）结合起来做Learning to Rank。有这样想法的人过去也有不少，已经有了很多类似思路。这篇文章的思路是使用RF来做Weak Learner，然后用Boosting的想法把这些Weak Learner串起来。&lt;/p&gt;&lt;p&gt;当然，文章不是仅仅限于这么一个简单的思路，而是提出了一个叫BROOF的框架，很多算法的变种都可以在这个框架里实现。比如Weak Learner的Weight如何确定，是否选择使用Validation Set等，有兴趣的读者可以去看看文章的细节。&lt;/p&gt;&lt;p&gt;文章比较了提出的框架和很多知名算法的性能，比如AdaRank、LambdaRank、RankSVM等等。选用的数据集是LETOR 2003、2004和Yahoo Learning to Rank数据集。结果还是比较引人注目的，基本上在所有的数据集上，提出的算法性能不是最好，就是和最好的算法持平。&lt;/p&gt;&lt;p&gt;这篇文章的另外一个亮点是Related Work，对于Boosting或者RF在Learning to Rank里的应用有兴趣的读者，建议好好看看Related Work里的文献。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Fast First-Phase Candidate Generation for Cascading Rankers&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;作者中的Torsten Suel研究方向就是Query Processing和Index Construction，是这方面的专家。文章讨论的问题非常具有实际意义。首先，现代的搜索引擎和推荐系统多数采用Cascade Ranker的模式。也就是说，Candidate Set经过多轮的选择、排序、过滤，每一个阶段都比前一个阶段可能更复杂，Model的层次更高。关于Cascade Ranker的详细阐述，这篇文章的Related Work和Reference（惊人的59篇）都是非常不错的资源宝库。&lt;/p&gt;&lt;p&gt;回到文章本身，这篇文章探讨的是在Cascade Ranker的第一阶段如何利用Boolean Filter来达到最佳的选择效果。第一阶段之所以那么重要，是因为这个阶段Evaluate的文档个数是最多的，也是最需要效率的地方。值得注意的是，这篇文章探讨的是所谓Unsafe的方法，也就是第一部分有可能漏掉高质量的文档。具体而言，是建立两层结构的Index，在Offline的情况下就筛选出一些可能是高分的文档。其中第一层的Index有一个Single-Term和Pairwise-Term的结构，这两个结构都保持一定数量的高分文档；第二层Index用来查看剩下的一些分数。这里面要解决的问题是，如何选择第一层的深度，然后究竟在一个Query进来的情况下，如何选择Look-up的路径。需要注意的是，文章提供的还是偏向于Web Search的情况，要想推广到一般意义的Index，可能还需要额外的工作。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Thu, 12 Jan 2017 13:28:26 +0800</pubDate>
    </item>
    <item>
      <title>分布式实时处理系统架构设计与机器学习实践</title>
      <link>http://www.iwgc.cn/link/4307422</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;strong&gt;编者按&lt;/strong&gt;：在2017年的1月11日，CSDN高级架构师金牌授课群为群友们带来了第一次的分享，讲师和主题参见&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;这里&lt;/a&gt;，本文为课程后续的文字整理，第一时间发出来分享给读者，课件下载点击&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;这里&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;大家好，我们今天主要讨论以下几个问题：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;机器学习与实时处理系统应用&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分布式计算拓扑搭建&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;消息算法调优&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Hurricane计算框架与未来展望&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;机器学习与实时处理系统应用&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;现在我们先来看看第一部分：机器学习与实时处理系统应用。我们首先简单了解下机器学习，然后引入分布式实时处理系统的概念以及实时处理系统与机器学的关系。&lt;/p&gt;&lt;p&gt;机器学习在现实世界中的作用越来越重要。&lt;/p&gt;&lt;p&gt;机器学习的方法非常多，比如传统的知识库方法，类比方法，归纳方法，演绎方法等各种方法。&lt;/p&gt;&lt;p&gt;目前在大多数领域中应用最多的当属归纳学习方法。&lt;/p&gt;&lt;p&gt;在通常的归纳型机器学习中，我们的目标是让计算机学习到一个“模型”（这种模型是人类预先组织好的，有固定的数据结构和算法等等），然后我们就可以用这个“模型”来进行“预测”。 预测就是从现实中输入一些数据，通过学习到的模型进行计算，得到的输出。我们希望这个模型可以在很高的概率下输出一个和真实结果差距不大的结果。&lt;/p&gt;&lt;p&gt;一旦我们得到了这个模型，我们可以使用该模型处理输入数据，得到输出数据（即预测结果），而归纳性机器学习的任务就是学习中间的这个模型。&lt;/p&gt;&lt;p&gt;如果我们将这个模型看成一个函数，那么我们可以认为归纳性机器学习的目的就是学习得到一个函数F，如果该函数的参数为x，输出为y。那么我们希望学到的东西就是 y = F(x) 中的F。&lt;/p&gt;&lt;p&gt;我们先用一个最简单的例子来讲一下：&lt;/p&gt;&lt;p&gt;假设我们现在不知道一个物体自由落体速度的计算公式，需要学习如何预测一个物体的自由落体速度，机器学习的第一步就是收集数据，假设我们可以测量出物体下坠的任何时间点的速度，那么我们需要收集的数据就是某个物体的下坠时间和那个时间点的速度。&lt;/p&gt;&lt;p&gt;现在我们收集到一系列数据：&lt;/p&gt;&lt;table width="736"&gt;&lt;thead style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;th style="padding: 2px 9px; word-break: break-all; border-top-width: 1px; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; text-align: left; font-size: 14px; word-wrap: break-word !important;"&gt;时间&lt;/th&gt;&lt;th style="padding: 2px 9px; word-break: break-all; border-top-width: 1px; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; text-align: left; font-size: 14px; word-wrap: break-word !important;"&gt;物体速度&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;1&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;9.7&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;2&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;20.0&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;3&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;29.0&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;4&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;39.9&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;5&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;49.4&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;6&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;58.5&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;7&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;69.0&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;8&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;78.8&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;9&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;89.0&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;我们这里给出两个假设。第一个假设是，一个物体自由落体的速度只和时间有关系 第二个假设是，我们可以使用一个简单的“模型”：一元一次函数得到物体的速度。（即 F(x) = ax + b）&lt;/p&gt;&lt;p&gt;在这个问题中，a、b 这就是这个模型待学习的“参数”。&lt;/p&gt;&lt;p&gt;现在的问题就是——我们需要用什么策略来学习这些参数？因为我们可以遍历的数值空间是无穷大的，因此我们必须采用某种策略指导我们进行学习。我们就用非常朴素的思想来将解决这个问题吧。&lt;/p&gt;&lt;p&gt;在正式学习前，我们先将收集的数据分成两组，一组是“训练数据”，一组是“测试数据” 。&lt;/p&gt;&lt;p&gt;假设训练数据是：&lt;/p&gt;&lt;table width="736"&gt;&lt;thead style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;th style="padding: 2px 9px; word-break: break-all; border-top-width: 1px; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; text-align: left; font-size: 14px; word-wrap: break-word !important;"&gt;1&lt;/th&gt;&lt;th style="padding: 2px 9px; word-break: break-all; border-top-width: 1px; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; text-align: left; font-size: 14px; word-wrap: break-word !important;"&gt;9.7&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;2&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;20.0&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;3&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;29.0&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;4&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;39.9&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;5&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;49.4&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;6&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;58.5&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;测试数据是：&lt;/p&gt;&lt;table width="736"&gt;&lt;thead style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;th style="padding: 2px 9px; word-break: break-all; border-top-width: 1px; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; text-align: left; font-size: 14px; word-wrap: break-word !important;"&gt;7&lt;/th&gt;&lt;th style="padding: 2px 9px; word-break: break-all; border-top-width: 1px; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; text-align: left; font-size: 14px; word-wrap: break-word !important;"&gt;69.0&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;8&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;78.8&lt;/td&gt;&lt;/tr&gt;&lt;tr style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;9&lt;/td&gt;&lt;td style="padding: 2px 9px; word-break: break-all; border-color: rgba(0, 0, 0, 0.0980392); max-width: 100%; box-sizing: border-box; font-size: 14px; word-wrap: break-word !important;"&gt;89.0&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;我们需要根据训练数据计算出我们的参数a和b。 然后使用我们计算出来的a和b预测测试数据，比较F(x)和实际数据的差距，如果误差小到一定程度，说明我们学习到的参数是正确的，比如和实际数据的差距都小于5% 。&lt;/p&gt;&lt;p&gt;如果满足条件说明参数正确，否则说明参数不够精确，需要进一步学习，这个差距，我们称之为误差（Loss）。现在我们来看一下在这个模型（简单的一元一次线性函数）下如何学习这两个参数&lt;/p&gt;&lt;p&gt;比如我们可以采用这种学习策略 1.首先a和b都假定为整数，假定a的范围是[-10, 10]这个区间，b的范围是[-100, 100]这个区间 2.遍历所有的a和b的组合，使用a和b计算ax + b，x取每个训练数据的输入数据，评估计算结果精确性的方法是计算结果和训练数据结果的差的绝对值除以训练数据结果，也就是 Loss = |F(x) - Y| / Y 3.计算每个组合的Loss的平均值，取平均Loss最小的为我们假定的“学习结果” 。&lt;/p&gt;&lt;p&gt;现在我们就得到了a和b，并且这个a和b是在我们给定范围里精度最高的参数，我们用这个a和b去训练数据里面计算平均的 |F(x) - Y| / Y，如果平均Loss小于 5%，说明这个a和b是符合我们精度的。否则我们需要优化我们的学习策略。&lt;/p&gt;&lt;p&gt;这种朴素的基于归纳学习的机器学习方法可以分为以下几步：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;预先定义一个模型&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据模型制定学习策略&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用学习策略使用模型来学习（拟合）训练数据，得到该模型中的所有参数&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用测试数据评估模型是否精确。如果不够精确则根据学习策略继续学习。如果足够精确，我们就认为机器学习结束了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;最后我们可以得到模型和参数，这就是我们学到的结果，也就是那个用来预测的函数。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里我们也要注意，上述步骤的前提是我们的模型是可以收敛的，如果模型本身就是发散的，那么我们就永远得不到我们的结果了。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;机器学习与实时处理系统&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;传统的机器学习是一种批处理式的方法，在这种方法下，我们需要预先准备好所有的训练数据，对训练数据进行精心组织和筛选，很多情况下还需要对数据进行标记（监督式学习），而训练数据的组织会对最后的训练结果产生相当大的影响。&lt;/p&gt;&lt;p&gt;在这种算法中我们要处理完所有数据后才能更新权重和模型。&lt;/p&gt;&lt;p&gt;但现在出现了许多在线学习算法，这种算法可以对实时输入的数据进行计算，马上完成权重和模型更新。&lt;/p&gt;&lt;p&gt;一方面我们可以用于监督式学习（完成数据标记后马上加入训练），也可以用于大量数据的非监督式学习。&lt;/p&gt;&lt;p&gt;而在这种情况下，实时处理系统就可以大展身手了。在线系统和实时处理系统可以确保实时完成对数据的学习，利用实时新系统。&lt;/p&gt;&lt;p&gt;实现思路如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuiaCy0FibpfBj1tJ1SuPeuiaQ6WrNDicj8AxmsKic4KE5v0VuCPSzxfY4b2KChr0VD1oe0ERvGDlFeEGNQ/0?"/&gt;&lt;/p&gt;&lt;p&gt;这里我们可以看到，系统接收来自其他系统的实时输入，然后实时处理系统中使用在线算法快速处理数据，实时地更新模型权重信息。&lt;/p&gt;&lt;p&gt;纯粹的在线算法可能并不适合许多情景，但是如果将部分在线算法和传统的批处理式算法结合，将会起到非常好的效果。而且许多数据分析工作确实可以通过这种方式完成一部分处理，至少是预处理。&lt;/p&gt;&lt;p&gt;目前机器学习的趋势就是对精度和速度的要求越来越高，方法越来越复杂，而数据越来越多，计算量越来越大，如果没有足够的计算资源，不一定能够在有限时间内完成足够的学习，因此现在类似于Tensorflow之类的机器学习解决方案都会提供针对分布式的支持。而大数据场景下的机器学习也变得越来越重要，这也对我们的分布式计算与存储方案提出了严峻的挑战。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分布式计算拓扑搭建&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;现在我们来看一个现实工程中常常会遇到的问题。&lt;/p&gt;&lt;p&gt;我们在开发实际系统时常常会收集大量的用户体验信息，而我们常常需要对这些体验信息进行筛选、处理和分析。那么我们应该如何搭建一个用于实时处理体验信息的分布式系统呢？&lt;/p&gt;&lt;p&gt;我们先来看一下整体流程：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuiaCy0FibpfBj1tJ1SuPeuiaQ67araDAJ7DMwhzFaJp85V46M2hvJAicMNKO0QozbFNohiaN6QCic10j35g/0?"/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;收集体验信息&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;业务系统调用体验信息接口，将体验信息信息异步写入到特定的文件当中。使用永不停息的体验信息检测程序不断将新生成的体验信息发送到数据处理服务器。&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;处理体验信息&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;首先数据处理服务器的体验信息接收负责将体验信息写入本地的Redis数据库中。然后我们使用消息源从Redis中读取数据，再将数据发送到之后的消息处理单元，由不同的数据处理单元对体验信息进行不同处理。&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;存储结果&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;消息处理单元完成体验信息处理之后，将体验信息处理结果写入到Cassandra数据库中，并将体验信息数据写入到Elasticsearch数据库中。&lt;/p&gt;&lt;p&gt;其中关键的部分就是图中用长方形框出来的部分，该部分的作用是完成对数据的筛选、处理和基本分析。这部分我们将其称作计算拓扑，也就是用于完成实际计算的部分。&lt;/p&gt;&lt;p&gt;我们接下来阐述一下每一步具体如何做。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;收集体验信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuiaCy0FibpfBj1tJ1SuPeuiaQ6LciasD2bApvnx5J60LyNL3Cl2aHTAibeQB8j2IMKqhn3PxujhJWBtRQQ/0?"/&gt;&lt;/p&gt;&lt;p&gt;收集体验信息分为以下几步：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;程序通过体验信息接口将体验信息写入体验信息文件中。我们假设程序会使用非阻塞的异步写入接口，体验信息接口的调用方只是将体验信息送入某个队列中，然后继续向下执行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;接着体验信息写入线程从消息队列中读取数据，并将体验信息数据写入到真正的体验信息文件中。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;写入后，某一个体验信息代理程序会不断监视体验信息文件的改动，并将用户新写入的体验信息信息发送到体验信息处理服务器的体验信息收集服务接口上。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;体验信息收集服务接口是整个服务的对外接口，负责将其他节点发送的体验信息信息送入集群内部的Redis节点，并将体验信息数据写入到Redis的列表中。至此为止，体验信息收集过程就完成了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;处理体验信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuiaCy0FibpfBj1tJ1SuPeuiaQ6psZ6x5fiaAfE2hYCSUcibZx0mguiagsZzr5XR5qBfTyPFicMqAbTnEJKvA/0?"/&gt;&lt;/p&gt;&lt;p&gt;接下来是处理体验信息，处理体验信息主要在计算拓扑中完成。分为四步：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;体验信息处理消息源：负责监视Redis列表的改变，从Redis列表中读取体验信息规则，并将体验信息规则文本转换成计算拓扑的内部数据格式，传送到下一个体验信息处理单元。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;体验信息规则引擎：使用体验信息规则引擎对体验信息进行处理和过滤。这一步是可选的，也就是用户可以加入自己的消息处理单元对收集的体验信息进行处理。这将会影响到发送到后续的消息处理单元（索引器和计数器）中的体验信息消息。这一步我们就不做处理了，如果读者感兴趣可以自己加入一个或者多个消息处理单元对体验信息进行处理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;索引：这一步必不可少，用于将体验信息规则引擎输出的体验信息写入到ElasticSearch中，并便于用户日后检索这些体验信息。这里涉及到一步——将体验信息规则元组转换成JSON，并将JSON写入ElasticSearch。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;统计：这一步也非常重要，用于对体验信息进行计数，这一步会将体验信息计数结果写入Cassandra的对应表中。便于用户获取统计信息。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;存储结果&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuiaCy0FibpfBj1tJ1SuPeuiaQ6THORylfGib3p1ibMLLCrt9l5jrkKcSG5z4mDhKwasqEzf3t3mdiaznNbQ/0?"/&gt;&lt;/p&gt;&lt;p&gt;最后就是对计算结果的存储，我们需要使用存储模块将数据写入到不同的数据库中：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;ElasticSearch：该数据库用于存储被转换成JSON的原始体验信息信息。用户可以在ElasticSerach中检索体验信息。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Cassandra：该数据库用于存储体验信息的统计计算结果。因为Cassandra支持原子计数列，因此可以非常胜任这个工作。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我们可以发现，在上面几步中，其他都可以使用现成的系统来完成任务，最关键的部分就是计算拓扑，计算拓扑需要高实时性地完成体验信息处理分析任务，这样才能应付大型系统中以极快速度产生的大量体验信息。&lt;/p&gt;&lt;p&gt;这里我们可以使用一个独立的计算集群来完成这个事情。每个计算节点负责完成一个计算任务，完成之后将数据传送给下一个计算节点完成后续的计算任务。每个计算节点都有一个消息队列用于接收来自上一级的消息，然后处理消息并继续将结果发送给下一级的计算节点。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;消息处理的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这里我们通常关心三个问题：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;如何确保所有数据都得到了处理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何组织消息（数据）的传递，为整个集群高效计算提供一个良好的I/O支持。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何搭建这个计算拓扑并尽量高效地进行完成计算。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;数据完全处理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我们先来看一下如何解决解决数据的完全处理问题。&lt;/p&gt;&lt;p&gt;我们这里讲每一个需要处理的数据（一条体验信息记录）组织成一个Tuple，也就是元组。每个计算节点都以Tuple为单位进行数据处理。每个元组都会有一个ack方法，用于告知上一级计算节点该Tuple已经处理完成。&lt;/p&gt;&lt;p&gt;我们以下面的方式处理Tuple，保证所有数据都会被完全处理：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;首先给每个Tuple一个id（伪随机的64位id）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;由消息源发出的Tuple会有一个Acker，构造Tuple的时候会把新的Tuple加入这个Acker（就是包含这个Acker）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;每个节点处理完一个元组调用元组的ack方法，改变Acker内部的记录值，表示当前Tuple已经完成处理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果某个Acker中的所有Tuple都已经处理完成，那么这个Spout Tuple就已经处理完成。表明该消息源发出的Tuple被完全处理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;由于我们无法在Acker中记录下Tuple树，因此比较好的方式是实现一个基于异或的优化算法，该算法在Storm中得到了应用。其具体实现是：在Acker中设置一个ack id，每创建一个Tuple，将id与其异或，每ack一个Tuple时，将其与id做异或运算。这样当所有Tuple处理完成后，ack id为0，就可以知道所有元组处理完成。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果消息源检测到某个其发出的Tuple没有在特定时间内得到处理，就会重发该元组。后续的计算节点重新开始处理。为了实现一个同时符合CAP的分布式系统，我们这里后续的计算节点并不会缓存计算结果，而是会重新开始计算上一级节点重发的元组，具体为什么这样做请参见How to beat the CAP theorem。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;数据流量控制&lt;/span&gt;&lt;/p&gt;&lt;p&gt;第二个需要解决的问题就是数据流量控制问题。&lt;/p&gt;&lt;p&gt;我们可以设想一下，如果网络状况不好，在特定时间内有许多元组都没有得到处理，那么数据源节点就会重发许多Tuple，然后后续节点继续进行处理，产生更多的Tuple，加上我们需要正常处理的Tuple，使得集群中的Tuple越来越多。而由于网络状况不好，节点计算速度有限，会导致集群中积累的过多数据拖慢整个集群的计算速度，进一步导致更多的Tuple可能计算失败。&lt;/p&gt;&lt;p&gt;为了解决这个问题，我们必须想方设法控制集群中的流量。&lt;/p&gt;&lt;p&gt;这个时候我们就会采用一种流量背压机制。该机制借鉴自Twitter Heron。&amp;nbsp;&lt;br/&gt;这个机制的思想其实很简单，当每个计算节点处理 Tuple过慢，导致消息队列中挤压的Tuple过多时会向其他节点发送消息，那么所有向该节点发送消息的节点都会降低其发送消息的速度。经过逐级传播慢慢将整个集群的流量控制在比较合理的情况下。只不过这个算法具体如何实现有待我们继续研究。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;拓扑结构设计&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;最后就是如何搭建这个拓扑，并尽量高效地完成计算了。&lt;/p&gt;&lt;p&gt;在分布式实时处理系统领域，目前最为成功的例子就是Apache Storm项目，而Apache Storm采用的就是一种流模型。而我们的Hurricane则借鉴了Storm的结构，并进行了简化（主要在任务和线程模型上）。&lt;/p&gt;&lt;p&gt;这种流模型包括以下几个概念：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;拓扑结构：一个拓扑结构代表一个打包好的实时应用程序，相当于Hadoop中的一个MapReduce任务。但是和MapReduce最大的不同就是，MapReduce最后会停止，相当于任务处理结束，而拓扑结构则会持续执行，永不停息，除非你手动停止。因此任何时刻流入的数据流都会被拓扑结构迅速处理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;流：一个流是拓扑结构中由元组组成的无限的序列，通常是由一个元组经过不同的处理单元处理之后产生的。每一个流入拓扑结构中的数据都会产生一个流。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;元组：元组是在流中传输的数据，数据源会将输入的数据转成元组输入到拓扑结构中，而数据处理单元会处理上一级的元组并产生新的元组传给下一级的数据处理单元。元组中支持存储不同类型的数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;消息源：消息源是拓扑结构中数据流的源头。通常其任务是读取外部数据源输入，并产生元组输入拓扑结构中。可靠的数据源可以确保消息完全得到处理，并在合适的时候重发元组。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据处理单元：数据处理单元是拓扑结构中负责处理数据的部分，你可以在其中筛选数据，统计数据，拼接数据等等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据处理单元会接收来自上一级的元组，并经过处理得到下一级的元组。每个数据处理单元会向上一级确认其元组有没有得到正确处理，如果数据源发现固定时间内并不是全部元组都被处理完了，就会重发元组。&amp;nbsp;&lt;br/&gt;为了支撑这套模型，我们设计了Hurricane的架构，该架构如下图所示：&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuiaCy0FibpfBj1tJ1SuPeuiaQ65R0l5h6ZdC3WsjKqQ8BAHIpMH7bHliakIfibumgKVkBZzK30t45Z8NVw/0?"/&gt;&lt;/p&gt;&lt;p&gt;其中有以下几个组件：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;最上方的是President，这是整个集群的管理者，负责存储集群的所有元数据，所有Manager都需要与之通信并受其控制。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;下方的是多个Manager，每个Manager中会包含多个Executor，每个Executor会执行一个任务，可能为Spout和Bolt。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;从任务的抽象角度来讲，每个Executor之间会相互传递数据，只不过都需要通过Manager完成数据的传递，Manager会帮助Executor将数据以元组的形式传递给其他的Executor。&lt;/p&gt;&lt;p&gt;Manager之间可以自己传递数据（如果分组策略是确定的），有些情况下还需要通过President来得知自己应该将数据发送到哪个节点中。&lt;/p&gt;&lt;p&gt;了解整体架构后，我们来具体讲解一下President和Manager的架构。&lt;/p&gt;&lt;p&gt;President的架构如图所示：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuiaCy0FibpfBj1tJ1SuPeuiaQ6kRcGf2W4ULnMicoDia60M6X4bkicBMAHFrPVokffeZU4rQfEJpDVFFmdA/0?"/&gt;&lt;/p&gt;&lt;p&gt;President的底层是一个基于Meshy实现的NetListener，该类负责监听网络，并将请求发送给事件队列，交由事件队列处理。&lt;/p&gt;&lt;p&gt;President的核心是EventQueue。这是一个事件队列，当没有计算任务的时候，会从事件队列中获取事件并进行处理。&lt;/p&gt;&lt;p&gt;用户需要在EventQueue中事先注册每个事件对应的处理函数，President会根据事件类型调用对应的事件处理函数。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuiaCy0FibpfBj1tJ1SuPeuiaQ6rPCyEz6OLjJAiaa2SH7qW4qa5niaegYNqHGibPooRspTxjHpgwmfiaYtGA/0?"/&gt;&lt;/p&gt;&lt;p&gt;接下来是Manager的架构。Manager的架构相对来说较为复杂。考虑到性能优化等问题，这个架构修改了几次。&lt;/p&gt;&lt;p&gt;首先，最顶层和President一样，是一个事件队列，并使用一个基于Meshy的NetListener来完成IO事件的响应（转换成事件放入事件队列）。&lt;/p&gt;&lt;p&gt;接下来有两个模块：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;Metadata Manager，该线程负责监听EventQueue，接收元数据的同步事件，负责和President同步集群的元数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Tuple Dispatcher，该线程负责响应OnTuple事件，接收其他节点发过来的元组，并将元组分发到响应的Bolt Executor的元组队列中。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;再下一层就是Executor。Executor分为SpoutExecutor和BoltExecutor，每个Executor都是一个单独的线程，在系统初始化Topology的时候，Managert会初始化Executor，并设置其中的任务。SpoutExecutor负责执行Spout任务，而BoltExecutor负责执行Bolt任务。&lt;/p&gt;&lt;p&gt;其中BoltExecutor需要接受来自其他Executor的Tuple，因此包含一个Tuple Queue。Tuple Dispatcher会将Tuple投送到这个Tuple Queue中，而Bolt则从Tuple Queue中取出数据并执行任务。&lt;/p&gt;&lt;p&gt;Eexecutor在执行完任务后，可能会将Tuple通过OutputCollector投送到OutputQueue中。我们又设计了一个OutputDispatcher，从OutputQueue中获取Tuple并发送到其他节点。OutputQueue也是一个带锁的阻塞队列，是唯一用于输出的队列。&lt;/p&gt;&lt;p&gt;现在我们来详细介绍一下Hurricane的基本组件。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Task&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Task是对计算任务的统一抽象，规定了计算任务的统一接口。Spout和Bolt都是Task的特殊实现。&lt;/p&gt;&lt;p&gt;Task包含三个接口函数：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;Prepare，用于完成任务对象的初始化。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Cleanup，用于清理任务对象。Executor会在关闭任务时执行该函数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;DeclareFields，该方法用于声明该任务输出的Tuple的字段列表。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;Spout&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Spout是Task的特例，任务用于产生待处理的元组。因此除了Task的接口以外，还增加了两个新接口。&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;Clone，用于生成Spout对象的拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;NextTuple，Executor会反复调用该函数生成元组。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里需要注意一下，Hurricane会有简单的背压机制，当Bolt检测到Tuple流量过大的时候，会向Spout进行反馈，Spout会随之降低其发送元组的速度。&lt;/p&gt;&lt;p&gt;如果Bolt处理速度大于Tuple的生成速度，Bolt又会向Spout反馈增加流量，Spout会放松流量限制。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Bolt&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Bolt是计算单元，负责处理来自其他Spout和Bolt的元组。Bolt同样是特殊的Task，因此除了Task接口外，还有两个新的接口。&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;Clone：用于拷贝生成新的Bolt对象&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Execute：用于处理来自其他任务的元组，Executor每拿到一个元组就会调用该函数进行处理。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Bolt接收元组的方式我们称之为分组方式。目前hurricane支持3种分组方式。&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;Global：在该分组方式中，Executor会在第一次发送元组的时候随机选择一个目标任务，并记录下该任务，之后都使用该目标任务。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Random：在该分组方式中，Executor每次都会重新随机选择一个目标任务。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Field：在改分组方式中，Executor每次都会根据元组的特定字段选择目标任务，如果没有记录则会向President询问其目标节点，如果有记录则直接发送。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;Executor&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Executor负责执行具体的任务。每个Executor是一个独立的线程，可以充分利用多核和多线程的CPU。为了简化模型，每个Executor只负责执行一个任务。&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;SpoutExecutor负责执行Spout任务，会持续不断地执行Spout。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;BoltExecutor负责执行Bolt任务，该Executor会不断从TupleQueue中获取元组，并调用Bolt处理元组。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果TupleQueue中不包含元组，BoltExecutor会被阻塞。超过一定时间没有获取到元组，BoltExecutor会向Spout反馈，解除部分流量限制，加快元组生成速度。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;其他特性&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Squared&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuiaCy0FibpfBj1tJ1SuPeuiaQ6siaQBEacVQqhnIpXPic3LKjCLa3SxaUuL5z8zKkRC26FdBUjDSOxpib2Q/640?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;介绍完Hurricane的基本功能与架构之后，我们来介绍一下Squared。&lt;/p&gt;&lt;p&gt;首先我们解释一下Squared是什么？&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuiaCy0FibpfBj1tJ1SuPeuiaQ64Ada7UxYFS7QibPPL1UAH1yFgYdnUofXsgwJc9h1QOBUU5QQh3QDO2w/640?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;左侧是Hurricane基本的计算模型，在该计算模型中，系统是一个计算任务组成的网络。我们需要考虑每个节点的琐屑实现。&lt;/p&gt;&lt;p&gt;但如果在日常任务中，使用这种模型相对来说会显得比较复杂，尤其当网络非常复杂的时候。&lt;/p&gt;&lt;p&gt;为了解决这个问题，看一下右边这个计算模型，这是对我们完成计算任务的再次抽象。&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;第一步是产生语句的数据源&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;然后每条语句需要使用名为SplitSentence的函数处理将句子划分为单词&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;接下来根据单词分组，使用CountWord这个统计操作完成单词的计数。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里其实是将网络映射成了简单的数据操作流程。这样一来，解决问题和讨论问题都会变得更为简单直观。&lt;/p&gt;&lt;p&gt;这就是Squared所做的事情——将基于网络与数据流的模型转换成这种简单的流模型，让开发者更关注于数据的统计分析，脱离部分繁琐的工作。&lt;/p&gt;&lt;p&gt;&lt;span&gt;保序&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在现实的工作中，我们常常需要一个的特性就是保序。&lt;/p&gt;&lt;p&gt;比如部分银行交易和部分电商订单处理，希望数据按照顺序进行处理，但是传统的数据处理系统往往不支持这个特性。所以我们就实现了保序功能。&lt;/p&gt;&lt;p&gt;保序的实现原理很简单，首先每个Tuple会一个一个orderId字段，orderId是依据顺序生成的，然后所有对Tuple的操作都会检验该orderId之前的Tuple是否已经完成。&lt;/p&gt;&lt;p&gt;如果已经完成则处理该Tuple，否则就将Tuple放在一个队列里，等待前面的Tuple处理完毕为止。&lt;/p&gt;&lt;p&gt;&lt;span&gt;多语言支持&lt;/span&gt;&lt;/p&gt;&lt;p&gt;最后一部分就是多语言支持。&lt;/p&gt;&lt;p&gt;毋庸置疑的是，一个庞大复杂的实际系统不可能整个系统都使用C++编写。&lt;/p&gt;&lt;p&gt;首先就是C++的入门门槛高，平均开发效率无法和其他语言相比。其次，现在大部分的Web应用都是使用Java或者脚本语言开发，因此我们必须考虑Hurricane的多语言接口问题。&lt;/p&gt;&lt;p&gt;为此，Hurricane的思想是以基本的C++为后端，然后在C++上面封装其他语言的接口。此外还提供Bolt和Spout的实现接口，让其他语言可以直接编写计算组件。&amp;nbsp;&lt;br/&gt;当用户希望使用其他语言快速实现部分新的算法和模型的时候，这种特性就会非常有用。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;展望&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;目前该框架已经能够处理日常所需工作。该框架会在之后的时间中继续完善架构，完善并优化我们的系统实现，比如完全实现高层抽象Squared和保序机制等。&lt;/p&gt;&lt;p&gt;除此以外，由于现在有许多计算任务需要使用基于向量和矩阵的浮点计算，因此我们计划开发一个Hurricane的子项目——SewedBLAS。这是一个BLAS库的高层抽象，我们希望整合大量的BLAS库，比如使用CPU的MKL/OpenBLAS，使用GPU的CUDA和ACML，构建一个易于使用、跨平台的高性能线性代数库，并与Hurricane进行深度整合，力求在分布式和科学计算、深度学习找到最好的切合点，并充分吸收整合其他现有的分布式机器学习框架，减少从科研到产品的转换难度。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;蓝色字体可点击阅读原文获取详情。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Thu, 12 Jan 2017 13:28:26 +0800</pubDate>
    </item>
    <item>
      <title>“鲜点”资讯：开源平台Apache Beam正式发布，2016大数据领域大事记全回顾</title>
      <link>http://www.iwgc.cn/link/4307423</link>
      <description>&lt;p&gt;“鲜点”资讯网罗新鲜要闻，每日为你呈现&lt;span&gt;大数据和云计算领域&lt;/span&gt;热点新闻。本次内容播报如下&lt;span&gt;（&lt;/span&gt;&lt;span&gt;文中所有蓝色字体可点击底部的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;获取详情链接&lt;/span&gt;&lt;span&gt;）：&lt;/span&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;Uber 推出数据平台“Uber Movement”，用实时数据帮政府治理交通&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1 月 9 日 Uber 推出了一个“Uber Movement”的数据发布平台，目标是为美国多个城市的市政府提供交通出行详细数据。Uber 方面介绍称，使用该数据平台的地方政府可以更迅速、细致地了解交通状况，甚至乘客出行习惯，能借此优化交通资源调配，改善交通状况。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;Docker 1.12.6 发布，应用容器引擎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Docker 1.12.6 发布了。新版本部分更新内容如下：Docker 1.12 附带了一个 rpm更新的系统单位文件（包括RHEL，Fedora，CentOS和Oracle Linux 7）。从旧版本的docker升级时，升级过程可能不会自动安装更新版本的单元文件，或者无法启动docker服务。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;MongoDB 赎金事件持续发酵，究竟是谁之过？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;数以万计的个人和可能专有的数据库被从网上删除，替换为要求支付赎金才会返还的票据。雪上加霜的是，似乎还几乎没有一个已经支付赎金的受害者的数据，有得到他们丢失的文件。MongoDB 官方团队的回答是，MongoDB 数据库本身是具有企业级安全性的，受攻击 MongoDB 的实例大都是因为没有遵照生产环境部署手册部署的结果，这些攻击其实完全可以通过 MongoDB 中内置的完善的安全机制来预防。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;谷歌布局大数据：开源平台Apache Beam正式发布&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;美国时间1月10日，Apache软件基金会对外宣布，万众期待的 Apache Beam 在经历了近一年的孵化之后终于毕业。这一顶级 Apache开源项目终于成熟。这是大数据处理领域的又一大里程碑事件——仅仅在上个月，腾讯宣布将在2017年一季度开源其大数据计算平台 Angel 。现在看来，生不逢时的Angel可能迎来了它最大的对手。至此，谷歌终于也完成了对其云端大数据平台Cloud Dataflow开源的承诺。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;EasyStack完成5000万美元C轮融资&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;中国IDC圈1月11日报道，OpenStack开源云领导企业EasyStack（北京易捷思达科技发展有限公司）宣布近日完成5000万美元C轮融资，是中国开源领域迄今公布的最大单笔融资。本轮融资由国科嘉和领投，多家人民币基金跟投，资金将主要应用于开源核心技术的研发投入、开源云企业解决方案的生态投入，以及企业云服务的团队建设三大方向。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;绿色和平组织：BAT可再生能源利用率远低于美国科技巨头&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;科技公司向来喜欢宣称自己的数据中心具备很高的能源效率，并融入了很多可持续发展理念。而绿色和平组织则在周二发布的《Clicking Clean》报告中对此进行了评估。这份报告对大型云计算公司和其他科技企业在可再生能源方面的表现进行了评分，同时评估了他们为推广其他环保措施所作的努力。绿色和平组织2016年表示，Facebook、苹果和谷歌仍是行业旗手，整体得分都是A。这两家企业4年前率先承诺将100%使用可再生能源。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;谷歌BigQuery增加了新的公开数据集&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Stack Overflow近日宣布，通过谷歌BigQuery提供它的数据集。开发人员可以使用平常的SQL语句查询完整的Stack Overflow数据集，包括帖子、投票、标签和徽章。使用BigQuery的REST API，开发人员可以根据需要使用他们自选的工具导出数据。BigQuery上的数据集支持联合查询，开发人员使用普通的SQL就可以跨领域获得有用的见解。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;2016年全球关于大数据分析领域的大事记&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;2016年刚刚过去，2017年已经来临。值此辞旧迎新之际，让我们盘点一下2016年大数据分析领域发生的大事件，摸清过去一年的脉搏，展望未来一年的趋势。商业智能(BI)领袖衰落，人工智能(AI)崛起，Hadoop十岁了，Apache Spark大行其道，Flink和Beam诞生，新的数据初创公司……&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;我国大数据产业渐入佳境：2016年窄口径产值达168亿元&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在日前召开的“2016年中国大数据技术与应用年会”上，数据中心联盟大数据发展促进委员会常务副主任魏凯表示，根据信通院发布的白皮书，国内大数据的产业窄口径的产值现在已经达到168亿人民币，虽然基数不大，但增速非常快，可以说大数据产业的发展已经渐入佳境。&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;a target="_blank" style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;"&gt;内容推荐引擎Taboola宣布收购大数据公司Commerce Sciences&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Taboola是一家来自以色列特拉维夫的内容推荐公司，它与数以百计的在线出版商达成合作，推荐后者及其他一些出版商网站上的内容和广告，目的是提高用户参与度和营业收益。近日，该公司宣布收购以色列大数据公司Commerce Sciences，旨在进一步完善为用户提供的各项服务。Commerce Sciences为小型电商企业提供一个平台，让他们为自家网站添加亚马逊式的个性化服务。&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjU5iatw9uhOqS5ddN1zwzR7ljxoJVGKwHWzWlaDGz9YEiamibBJiaIVfEtr4hjrn3GpmZl4JkLfS455vw/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br/&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/p&gt;&lt;/blockquote&gt;</description>
      <pubDate>Thu, 12 Jan 2017 13:28:26 +0800</pubDate>
    </item>
    <item>
      <title>从秘书到程序员：一位德国妹子的艰难转型之路</title>
      <link>http://www.iwgc.cn/link/4294410</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;秘书与程序员，两个没有任何关联的职业，一位德国姑娘是如何实现跳跃的呢？这是&lt;a target="_blank" style="color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;"&gt;她的Twitter&lt;/a&gt;,希望对大家有所启发。以下为译文。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;目前，我在德国SAP担任Swift/SAP UI5/JavaScript开发人员，而曾经我却是一名秘书。大家肯定会感动吃惊，我是如何实现的？为了那些即将进入软件行业的小伙伴们，我决定把转行经历分享给大家。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;少年时期：秘书学徒——&amp;gt;被编码吸引&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;和大多数青少年一样，我非常喜欢玩电脑。在word里面写我和朋友的故事，在excel中进行各种计算，在MS Paint中画画，玩游戏。我订购了一本计算机杂志，它教会了我一切有关电脑的知识。毫无疑问，我想要从事一份与电脑有关的工作，比如卖电脑，安装和配置一些东西，这些都是我梦寐以求的工作。不幸的是，我父母并不如我般兴奋，于是，我做出了妥协。我开始成为一名秘书学徒，可以成天与电脑打交道。&lt;/p&gt;&lt;p&gt;因为工作关系，我接触到了网站创建方面的内容，并且利用这个机会维护了空手道俱乐部主页。在财务部门，我有机会把一些MS DOS程序转换成MS Excel。后来，因为欧元关系，这些软件就不再工作了。我不得不把无聊的任务重复一遍又一遍。如果可以自动化这些该多好？结果真的就实现了——MS VBA for Excel FTW，真是太令人兴奋了。&lt;/p&gt;&lt;p&gt;工作期间，我偶然发现一系列的电脑杂志：Delphi编程。它们开始教我编程和GUI基础开发。我购买了一些这方面的书籍，正式开启了编程之路。我写了几个Delphi小程序——因为在MS Excel中做小型计算真的好无聊。6个月的系列教程结束后，我参加了一个开发者比赛：编写一个多标签编辑器。结果我赢得了比赛，前十名的奖项是一个包括所有CD-ROM的Delphi 7专业许可证，我终于可以得到一份开发工作了。可现实并没那么简单，研究招聘发现，没人要Delphi程序员。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;20岁初期：秘书+一般大学入学资格&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;学徒结束以后，我继续留在公司担任秘书一职。我着迷于我们公司的网络工作，我认识一些很酷的人在家做很多计算机工作，其中一些就是IT工作。我要是有一份正规教育就能从事这方面的工作……&lt;/p&gt;&lt;p&gt;我和好友一起报了一个夜校，选择了MS Access数据库这门课——你可能已经猜到，我用MS VBA来自动化MS Access。其他人则是用框架来构建网站，我已经做过好几次。&lt;/p&gt;&lt;p&gt;我心想：“等到这门课程结束，我获得了正规计算机教育，就可以获得一份新工作了”。后来，我还参加了一些专为女性开设的科技活动，比如访问大学、参加一些讲座，在这个过程中，我能够与正在学习计算机技术的女孩交谈，这些正是我想要的。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;20多岁：兼职学习、获得IT工作&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;最后，我找到了一所可以兼职学习的应用科技大学（University of Applied Sciences）。它并不是100%的纯计算机科学，还包括网络和自动化工程、大量的信号传输、手机等——但也包含了编程方面的基础知识，如OOP、算法与数据结构、数据库、软件工程、模型……关键是，这些课程是可以兼职学习的。我整个星期都在工作，每周二、周五和整个周六来听课。一边担任秘书工作，一边学习技术知识是一件非常酷的想法。但因为基础薄弱和技术空白，我很难吸收所有的知识，也因此不得不投入大量的时间来填补知识空白。&lt;/p&gt;&lt;p&gt;我辞掉工作并搬到了学习所在的城市。因为缺乏IT工作经验，我很难获得一份相关工作。幸运的是，我获得了奖学金——但我仍然想工作！通过同学关系，我了解了SAP，而他也是SAP内部项目的项目经理。&lt;/p&gt;&lt;p&gt;我获得了一份项目助理的工作，但我仍然或多或少的是一个秘书。这是一个非常好的经验积累机会，我学会了整个的ERP和CRM流程协作、培训、创建培训材料、测试E2E流程、做了许多旅程、维护翻译并且帮忙维护各个阶段推广的工作。&lt;/p&gt;&lt;p&gt;两个月以后，我问老板是否可以成为一名开发人员。他回答了是。梦想成真了，一个非常有经验的开发同事担任我的导师。这是一个非常伟大的时刻！在2010年，我真正实现成为一名开发者的目标，两年后，我又完成了硕士研究。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAugYTAYxJHlIsEvsbjOK6v1RGRB6RzPicTJ2q8kdGvD9u9sctHhjHzQEWYukbibHN6oavyABic8xjyAbg/0?"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;2012年取得硕士学位&lt;/center&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;“捷径” vs. “艰辛之路”&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;从秘书到软件开发工程师，我花了好几年时间。因为秘书工作让我很少有时间去学习这方面知识，所以，我不得不花3年时间去上大学，利用业余时间学习，这是非常耗时且需要付出巨大的努力。我的大部分假期都在做项目，学士学位/硕士论文和考试准备等。没有任何技术背景的我，入门是极其困难的，所以，我的学习之路是艰难的。&lt;/p&gt;&lt;p&gt;现在，互联网上有大量的计算机科学和编码教程，每个人都可以成为开发者。还有大量的开发者训练营，只要8到12周即可成为一名开发者。只要你想从事这个职业，这些快速入门都是非常棒的入门方法。它们主要教你如何编写代码，而不是一些理论课程，比如软件工程、算法和数据结构、模式、数据库等计算机方面的理论知识。而大公司一般都要求接受正规教育，爬越高，要求也会越多。大学虽然不会教你如何编码，但是会传授一些永恒客观的基础知识。在整个艰难转行中，我学到了各种各样的知识，因此，我从未感到后悔。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;正如上面所描述的，只要你愿意花时间和精力，切换职业就不是问题。下面是我推荐的一些快速成为开发者的学习网站，不妨试试：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;Codecademy是一个免费的学习平台&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Codeschool和Treehouse是付费的，它们也都很棒&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Github也是非常棒的学习分享&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最后，用这样一句话结束这篇文章：只要我们有勇气追求，所有的梦想都可以成真——Walt Disney。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;原文：SAP社区&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作者：Denise Nepraunig&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;翻译：Daisy&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Wed, 11 Jan 2017 17:16:09 +0800</pubDate>
    </item>
  </channel>
</rss>
