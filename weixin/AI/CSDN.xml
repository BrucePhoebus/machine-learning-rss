<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>CSDN大数据</title>
    <link>http://www.iwgc.cn/list/1933</link>
    <description>CSDN分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点,提供云计算和大数据技术、平台、实践和产业信息等服务.</description>
    <item>
      <title>产品定位的“生死劫”——你的区块链产品能否活过今年</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;blockquote style=""&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;段新星，OKCoin（币行）副总裁兼首席研究员， 金融及技术领域研究者，盖茨基金会奖学金得主。负责公司旗下产品线OKCoin、OKLink的研究和品牌工作。著有《区块链：重塑经济与世界》（中信出版社2016）。&amp;nbsp;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;长久以来，开发者总是有不可思议的致命自负：坚信黑科技中神话力量的存在。凭借它可以迅速打造出一款引爆市场的&amp;ldquo;雷锤&amp;rdquo;，催枯拉朽地颠覆一切，区块链行业也不例外。然而诞生八年，具有全球影响力的区块链产品，目前仍然只有创始人中本聪先生的那一款。不论中国还是美国，初步具备市场和用户规模的也聊聊无几。更多的在潮起潮落中消逝，在滚滚泡沫中覆灭。我们不能否认，技术创业者的产品打造是一个复杂的过程，但更多时候，技术本身的特质也一定程度上决定了产品未来的成败。区块链的确有很大的可能，但绝非万能。正如老生常谈&amp;ldquo;没有银弹&amp;rdquo; 。如果希望商业上获得成功，我们不妨从以下几个角度来对区块链技术做个简单分析，看它适宜于什么场景。&lt;/p&gt;&lt;h3 style=""&gt;区块链技术更适宜于资产网络：（Assets Over IP）&lt;/h3&gt;&lt;p&gt;区块链一开始是作为比特币的底层网络协议出现的，比特币则被设计为一种点对点的数字现金，并希望广泛应用于世。但这种世界互联网货币的梦想并未完全实现，目前更多的国家是将比特币等作为数字资产、数字商品来看待。尽管如此，这种网络设计对后世种种区块链系统的影响极为深远，基本现有所有的区块链网络都参考了比特币代码，例如以太坊、Corda、Hyperledeger、Factom、域名币。这些网络大多有如下特征：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=""&gt;&lt;li&gt;&lt;p&gt;网络上流通的，不再是正确或错误、廉价的、长短不一、格式杂乱的&amp;ldquo;信息&amp;rdquo;，而是需要一定程度加以保护的稀缺&amp;ldquo;资产&amp;rdquo;（这里资产为广义，不论是股权、债券、代币、彩票、还是某种有价值的权益证明）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;整个网络运作的逻辑围绕加密、签名、验证、交易、确认、读、写、执行合约等展开。按照一定规则，有确定时延地运转：包括生成块、链或者其他名称的&amp;ldquo;账本&amp;rdquo;或数据记录、全局状态记录，并不断通过默克尔树剪枝操作摒弃冗余、错误、失效的数据。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们不妨从两个方面看待这个网络：一方面，这是一个总体&amp;ldquo;廉价&amp;rdquo;的网络，网络基础设施的搭建被开源社区和诸多参与者分担。另一方面，这也是一个&amp;ldquo;运行昂贵&amp;rdquo;的网络，不论是达成一致性的时间成本，还是需要为验证者提供代币或&amp;ldquo;燃料币GAS&amp;rdquo;的花费。最初的设计基因决定了这个强规则网络的&amp;ldquo;使用成本&amp;rdquo;较高，而反过来高成本则又进一步加强这一趋势：必须稀缺的，&amp;ldquo;资产&amp;rdquo;属性的操作在这个网络上运作，才能够达到预期的收益率，以维持产品使用者在网络的消耗。&amp;ldquo;不要拿大炮打蚊子&amp;rdquo;，也不要拿区块链做廉价的口水化聊天工具或者一般文件传输系统，最好与有价的资产相关，这一点是产品开发者首要考虑的。&lt;/p&gt;&lt;p&gt;我们在此称该条为定律1。&lt;/p&gt;&lt;h3 style=""&gt;适用于具有多个弱信任、对等的写入权限节点的数据库&lt;/h3&gt;&lt;p&gt;区块链网络不论是联盟链中准入的实名参与机制者，还是公有链中随机的匿名参与者都有一个共同处：在使用区块链之前，一般是不存在信任关系或弱信任关系的。节点间一般进行资产交互的方式是信任第三方，然后通过第三方实体进行&amp;ldquo;资产&amp;rdquo;属性数据或凭证的&amp;ldquo;传递&amp;rdquo;和&amp;ldquo;交换&amp;rdquo;操作。这个过程中，交互的复杂性会增加，第三方机构提供担保，协助达成共识，而收取服务费用。区块链产生后充当的角色有：公共操作记录的数据库、信任的锚定者等。这个数据库需要一群互不信任或缺乏信任的节点共同协作，按照既定规则进行&amp;ldquo;写&amp;rdquo;操作。而&amp;ldquo;读&amp;rdquo;和&amp;ldquo;执行&amp;rdquo;的权限则开放给相应权限的参与者。一个适合传统的C/S模型硬性改造成区块链也是毫无意义的。&lt;/p&gt;&lt;p&gt;此为定律2。&lt;/p&gt;&lt;h3 style=""&gt;适用于去中心化的解决方案&lt;/h3&gt;&lt;p&gt;这是定律3。&lt;/p&gt;&lt;p&gt;这一点无需多言，如果一款区块链产品需要满足的需求，现有的中心化方案可以成熟、完善地解决，则这款产品完全没有必要存在。以下为案例种种：&lt;/p&gt;&lt;p&gt;&lt;span&gt;真伪场景：&amp;ldquo;跨境支付&amp;rdquo;vs&amp;ldquo;支付&amp;rdquo;（参见定律 3 ）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;首先我们考虑跨境的小额汇款（remittance）行业，传统的方式进行汇兑，从马来西亚一家银行到印度的班加罗尔一家小商户，会经过多个中转行，整个过程复杂且不透明，从付款到收款需要2～4天左右，且汇费较高。究其本质：是因为各个国家小的金融机构之间存在不信任，存在区隔。现在，引入公开透明、可查证、溯源的区块链作为协议链接起来，让整个过程透明性更高，降低中转、合规、审计成本。它可以增强信任，解决复杂多边市场中缺乏&amp;ldquo;中心协调者&amp;rdquo;，存在严重对手风险的交易困境。以往的跨境汇款成本是在每笔26美元左右，相当于一百多人民币，如果做外劳、留学、旅游等千元、万元级别的小额汇款，成本就非常高，甚至不现实。但区块链上的跨境汇款产品，例如OKLink，对于小额汇款，每笔费率只有0.3%。这样能给各个国家中小金融机构和小笔量汇款提供更多的选择和可能性。&lt;/p&gt;&lt;p&gt;&lt;span&gt;真伪场景：&amp;ldquo;通用积分&amp;rdquo;VS &amp;ldquo;积分&amp;rdquo;（参见定律2）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;积分是一种企业增加用户忠诚度以及活跃度的营销手段，然而消费者面临的现状是，手上的积分种类太多，管理困难，而且价值不高，想用用不了，积分逐渐演变成&amp;ldquo;鸡肋&amp;rdquo;。但如果多个企业的商户利益形成联盟，大的集团内部不同的子公司之间，制定一定的游戏规则，使用区块链构建一个企业间通用积分平台，进行积分的授予、承兑、结算，则会有探寻的空间。比如利用航空积分兑换通用积分，进行租车消费，那在这个系统里就会出现多个可以&amp;ldquo;写&amp;rdquo;数据的操作者，而非单方的积分授予者，这样才有技术契合的可能。&lt;/p&gt;&lt;p&gt;&lt;span&gt;真伪场景：&amp;ldquo;存证&amp;rdquo;VS&amp;ldquo;存储&amp;rdquo;（参见定律1）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;利用区块链上的哈希时间戳，几乎可以鉴证任何文件和数字资产，证明某个权益文件和数字资产在某个特定时间已经存在，这对法律证据、合同、遗嘱证明带来了革命性的改变，我们称之为存证。&lt;/p&gt;&lt;p&gt;音乐、电影、一般文件文档等资产无关数据可以构建专门的区块链系统进行分布式存储，技术上是可以实现的。然而根据定律1，我们可以发现此种产品的商业逻辑漏洞明显。此前有一系列去中心化的云存储项目，对标Dropbox以及网络云盘服务，曾在风口上获得了百万美元级别的天使轮融资，不出意外的是，近期大多数此类项目都死掉了。&lt;/p&gt;&lt;h3 style=""&gt;结束语&lt;/h3&gt;&lt;p&gt;考虑&amp;ldquo;区块链技术如何应用&amp;rdquo;对开发者而言，无伤大雅，毕竟还在发展的早期，多做技术尝试增加开发能力怎么说都不为过。但对产品经理而言，则是常见的错误思路和不可挽回的噩梦。毕竟区块链不是工具性的技术，而是一个新系统、新网络。也许，我们要考虑的问题并不是：用区块链技术为我们产业做什么，用这样的锤子怎样钉我们的钉子？而是：未来必然会来到，在区块链网络出现后，我们应该怎么融入，以怎样的产品产生怎样新的交互？这样的思路下，重新思索，也许可以使你的区块链产品不仅度过盛夏，也能活过寒冬。&lt;/p&gt;
</description>
      <pubDate>Fri, 24 Feb 2017 17:29:10 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】《工业大数据白皮书》正式发布，智慧医疗产业步入启动期</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;p&gt;Cloudaily网罗新鲜要闻，每日为你呈现大数据和云计算领域热点新闻。本次内容播报如下：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;细分领域龙头初现 智慧医疗产业步入启动期&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;所谓智慧医疗，是融合物联网、云计算与大数据处理技术，以&amp;ldquo;感、知、行&amp;rdquo;为核心，建立智能远程疾病预防与护理平台。业内人士指出，智慧医疗产业现已步入启动期，市场有望高速增长，细分领域龙头初现，但商业模式还有待完善。根据《全国医疗卫生服务体系规划纲要（2015&amp;mdash;2020年）》，到2020年，实现全员人口信息、电子健康档案和电子病历三大数据库基本覆盖全国人口并信息动态更新，全面建成互联互通的国家、省、市、县四级人口健康信息平台，积极推动移动互联网、远程医疗服务等发展。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;通过数据分析帮助销售人员完成交易，Aviso 获 800 万美元 C 轮融资&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Aviso 是一家利用机器学习技术，为企业提供销售预测的大数据分析初创公司，日前该公司宣布获得了一笔 800 万美元的 C 轮融资，投资方包括 Scale Venture Partners、Next World Capital 和 Shasta Ventures 三家风投机构。Aviso 公司成立于 2012 年，主要向企业销售&amp;ldquo;软件即服务（SaaS）&amp;rdquo;类软件，提供大数据预测分析服务，帮助企业提升销售业绩。企业管理者需要数据分析的支持，帮助他们更好做出决策。而另一方面，企业内部销售团队也需要根据人工智能的帮助获取更准确的数据分析结果，继而快速执行交易。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;《工业大数据白皮书》正式发布&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;近日，全国信标委大数据标准工作组工业大数据专题组在北京发布了《工业大数据白皮书》。深入推进工业大数据发展是全球工业企业所面临的共性课题，而工业大数据标准化工作则是支撑工业转型发展，提升我国国际话语权重要的基础，全国信标委大数据标准工作组按照《中国制造2025》、《国务院关于深化制造业与互联网融合发展的指导意见》、《大数据产业发展规划（2016-2020年）》的有关要求，推进工业大数据标准的研制制定。其中，作为专题组组长单位，北京数码大方科技股份有限公司牵头参与了标准的制定。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;云厂商战火烧向海外 三方面衡量海外竞争力&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;云计算全球化竞争开启，却又不限于IT巨头之间，云竞争从单一产品竞争走向生态竞合，意在为2017年的云计算大战谋篇布局。未来格局或如专家所言，&amp;ldquo;颠覆云计算格局的除了资本和规模，还有可能是新的技术和标准。而当国内云计算企业全球化布局加深且圆满的时候，也就意味着中国制造更快更稳地走向了海外市场，并将实现国内外同步的统一管理。&amp;rdquo;中国信通院发布的《云计算白皮书(2016年)》预计，全球云计算市场规模2020年将达1435.3亿美元，年复合增长率为22%。较全球市场而言，中国云计算市场竞争更显激烈。尤其腾讯阿里在云计算领域展开全面竞争，战火烧到海外，目的则在于耕耘更大的全球互联网市场。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;Apache Bahir 2.1.0 发布，分布式分析平台覆盖拓展&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Apache Bahir 2.1.0 发布了，Apache Bahir 提供对分布式分析平台（如 Apache Spark 和 Apache Flink ）的扩展。本次更新如下：准备基于 Apache Spark 2.1.0 发布；在 MQTTWordCount 示例中更新 Scaladoc；在 README.md 文件中修复 Maven 工件 ID。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;密码学大事件！第一例 SHA-1 哈希碰撞实例公布&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;消息报道荷兰阿姆斯特（CWI）研究所和谷歌研究人员发布了世界上第一例公开的SHA-1哈希碰撞实例。CWI 研究所的 Marc Stevens 是此次攻击的关键人物，2016 年找到了SHA-1算法内部的核心组件 internal compression function 的一个碰撞实例，开始攻克 SHA-1 完全实际碰撞攻击。近日在 Google 的强大资源支持下，终将 SHA-1 算法的碰撞实例展示出来。SHA-1 碰撞攻击影响了大量现有的安全应用，目前许多部署的 SSL/TLS 服务连接中均使用了 SHA-1 算法作为消息验证的基本密码学原语，因此受到该攻击的影响；Git 如今依然使用 SHA-1 作为文件的消息&amp;ldquo;指纹&amp;rdquo;；Android 系统中应用 APP、升级包、Bootloader 等模块的签名机制（RSA + SHA-1）也广泛受到影响。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;阿里云若一家独大 中小云厂商该如何生存？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;全球范围内，亚马逊云服务已经称霸IaaS市场，拥有最全面的存储产品，在国内历经三年的水土不服，于去年8月正式落地并开始&amp;ldquo;蚕食&amp;rdquo;国内市场。微软和谷歌的云计算营收都保持了每年超过100％的增速，但AWS在IaaS市场的规模仍然达到这两家公司的两倍，外加IBM。著有&amp;ldquo;国内亚马逊云&amp;rdquo;之称的阿里云显然不甘示弱，即便IaaS市场阿里云的全年增长速度要落后于金山云，但是凭借31％的市场份额占据中国市场第一的位置，2015自然年营收达到了2．59亿美元，其霸主地位尽显。反观国内中小云服务厂商，与行业巨鳄相比存在资源匮乏、技术劣势甚至资金不足等一系列的运作问题，中小云服务商的发展如同四面楚歌。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;百度2016全年财报背后：人工智能全面驱动业务发展&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;美东时间2月23日，百度发布了2016财年Q4及全年财报。财报数据显示百度全年总营收为人民币705.49亿元，移除去哪儿网后，同比增长11.9%。财报背后，人工智能成为百度过去一年的关键词。凭借百度在人工智能领域的渗透和发力，百度移动端搜索、百度金融、百度O2O等现行业务均呈现出高速增长的态势。在竞争白热化的金融领域，百度同样走出了一条技术之路。百度将人工智能、大数据、云计算等核心技术全面注入百度金融的支付、信贷、理财、银行、保险等各业务板块。比如，通过精准度99.7%的人脸识别技术、精准度超过97%的语音识别技术，百度金融可以实时高效地完成用户身份验证；为解决消费金融市场信用下沉、风控线上化、获客成本增加等痛点，百度金融投入了人工智能、用户画像、账号安全及精准建模等先进技术。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;企业日益关注云计算灾难恢复市场&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如今，中小型企业已经看到云灾备的优势，但现在所有人的目光都转向大型企业，在观察他们是否会采用。尽管云灾难恢复的大部分重点是小型客户，但大型企业也对此非常感兴趣。较大的组织通常已经与传统的灾难恢复提供商(如SunGard)达成灾难恢复协议。对于他们来说，迈向云计算灾难恢复的第一步是使用云计算来保护用磁带保护的较低层系统。市场调研机构Forrester Research公司的高级分析师Rachel Dines表示：&amp;ldquo;用户表示已拥有自己的关键业务和关键任务的控制系统，但对于低层系统，希望采用云计算技术。&amp;rdquo;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img05.iwgc.cn/mpimg/684cb0477a5ef5dbe1454227acd12266c44cee73"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/p&gt;&lt;/blockquote&gt;
</description>
      <pubDate>Fri, 24 Feb 2017 17:29:10 +0800</pubDate>
    </item>
    <item>
      <title>掌握 Google 深度学习框架的正确姿势——专访 TensorFlow 贡献者唐源</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;p&gt;&lt;span&gt;自 2015 年底开源到如今更快、更灵活、更方便的 1.0 版本正式发布，由 Google 推出的第二代分布式机器学习系统 TensorFlow 一直在为我们带来惊喜，一方面是技术层面持续的迭代演进，从分布式版本、服务框架 TensorFlow Serving、上层封装 TF.Learn 到 Windows 支持、JIT 编译器 XLA、动态计算图框架 Fold 等，以及 Inception Net、SyntaxNet 等数不胜数的经典模型实现，TensorFlow 已然已经成为深度学习框架的事实标准之一。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而另一方面，在开源一年多的时间里，TensorFlow 已经帮助了包括研究人员、工程师、艺术家、学生等在内的诸多用户在各个领域取得了卓越进展，据 Google 官方统计，目前人们已经在 6000 多个在线开放代码存储区中使用 TensorFlow。那么，&lt;strong&gt;在业务场景及个人摸索实践中，我们可以如何更好地使用 TensorFlow？以及掌握与运用深度学习、机器学习的正确姿势？带着诸多问题，我们特别采访了 TensorFlow 项目贡献者&amp;mdash;&amp;mdash;美国 Uptake 数据科学家唐源，一起聊聊深度学习框架的那些事儿。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="http://img05.iwgc.cn/mpimg/d2b12e7cab1e39921a0263cc6dde4cf446b0a02b"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; margin-bottom: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); background: rgb(247, 247, 247); color: rgb(51, 51, 51) ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;唐源，美国 Uptake 数据科学家，带领团队建立用于多个物联网领域的数据科学引擎进行条件和健康监控，同时建立公司的预测模型引擎，现已被用于航空、能源等大型机械领域。是 TensorFlow 和 DMLC 的成员，TensorFlow、XGBoost、MXNet 等软件的 committer，曾荣获谷歌 Open Source Peer Bonus。在美国宾州州立大学获得荣誉数学学位，曾在本科学习期间成为创业公司 DataNovo 的核心创始成员，研究专利数据挖掘、无关键字现有技术搜索、策略推荐等。GitHub：&lt;/span&gt;&lt;a style="box-sizing: border-box; background-color: transparent; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none;" target="_blank"&gt;&lt;span&gt;https://github.com/terrytangyuan&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;article class="yead_editor yead-selected" data-author="Wxeditor" style="   ; ; ; ; ; ; ; ; ; ; ; ; ; ;  "&gt;&lt;br&gt;&lt;span&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;如何走上深度学习框架的开源贡献之路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/article&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;CSDN：您在大学获得荣誉数学学位，在此期间成为创业公司 DataNovo 核心创始成员，您是怎样开始接触到机器学习和深度学习？有哪些难忘的经历？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;这一切起源于本科与教授做的一个数值分析，接触到了 Matlab 这样的编程语言，由此开始对编程产生了特别浓厚的兴趣，学习各种编程语言，也上过大部分的软件工程的课程，因为在学校读的是宾州州立大学荣誉学院的学位，很多课程都加深了难度，也认识了很多非常聪明和勤奋的同学，在导师 Luen-chau Li 的鼓励下也慢慢开始上了好几门统计、数学、以及计算机研究生的课程，其中第一门就是统计系 Le Bao 老师的研究生难度的数据挖掘课程，开始逐渐接触机器学习，也对这方面产生了浓厚的兴趣，也自己开始跟进了这方面的研究。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DataNovo 是我在上斯坦福公开课的时候和几个小伙伴成立的公司，几个核心成员分布在世界各地，我们有几个经验非常丰富的软件工程师，有着对专利这一块非常有研究的律师，也有拥有沃顿商学院 MBA 的数学家，在凭着我们各自已有的经验基础上，我们通过大量的讨论和调查，一起探索了这个在当时还尚未被挖掘的领域，建立了许多基于机器学习和深度学习比较新颖的应用。比较难忘的是这个摸索的过程，有许多失败也有成功，大家一起用带着各国口音的英语，跨越世界上几个不同的时区，来讨论相关文献和项目进展，一起朝着一个目标努力，是非常有意思的事情，在本科的时候就能够有着这样的创业和合作经验，算是比较有成就感的一件事了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：您在什么时候开始接触到开源社区？什么情况下成为了多个深度学习框架的 committer？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;&amp;nbsp;大四的时候在一家创业公司实习，公司对开源的政策特别开放，我们用到了各种各样的开源软件，用的过程中发现各种问题以及对用户体验度有着各种不满，Github 上面有地方可以提交建议，但是项目的管理者太忙，我就干脆自己对源代码进行研究然后提交修改，这样养成了一种习惯，遇到问题的第一反应是自己研究研究代码，然后自己直接去解决问题，独立阅读代码的能力也就这样慢慢培养出来了。很多时候由于对于某个开源软件特别熟悉，经常在做项目中会想到一些有趣的点子来对项目的性能进行改进和功能进行延伸。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至于成为深度学习框架的 committer，我最先开始参与的是 MXNet，当时只是业余时间做了一些小的深度学习的项目，发现这个开源项目还在初期，有很大的发展空间，然后又刚开始在其他项目中使用 Scala，在刘忆智的邀请和鼓励下，我们一起合作做了 MXNet Scala 语言包。又是机缘巧合，觉得 TensorFlow 的低阶 API 太难学也太难用，于是和谷歌的朋友合作建立了高阶的 API，也就是早期的 Scikit Flow, 类似数据科学领域中很热门的 Scikit-learn, 现在由于在 Google 内部和外部都需求特别大，也成为了 TensorFlow 中重要的一部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;article class="yead_editor yead-selected" data-author="Wxeditor" style="   ; ; ; ; ; ; ; ; ; ; ; ; ; ;  "&gt;&lt;br&gt;&lt;span&gt;&lt;br&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;深度学习、机器学习的正确姿势&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/article&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：机器学习在 Uptake 数据科学引擎的工作流程中扮演什么样的角色？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;数据科学是 Uptake 的核心，我们成功地和大型工业界的巨头，比如说 Catepillar，来合作建立比较有需求的产品，帮助解决传统工业上的一些痛点，比如 24 小时对火车每个重要部件进行条件和健康监控，帮助维修工程师找到问题所在，推荐高效的解决方式，新部件的自动下单订购，等等。机器学习在这个过程中起到非常重要的角色，我们需要用机器学习来建立很多有效的预测模型，由于数据量的庞大，数据性质的特别，以及出于物联网数据在传统大型工业领域还没怎么被深度探索的原因，我们也不能仅仅依赖于现有的技术，我们有着非常优秀的研发团队来支撑这一整个技术链。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：对于数据科学团队来说，您认为他们需要对深度学习了解到什么样的程度？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;深度学习并不是万能钥匙，很多问题往往用传统的机器学习算法就足够了。如果设计到很多图像，语音，文本这样的数据，深度学习的算法当然更加适用，基本上能大概清楚有一些什么样的算法以及他们适用于什么样的问题，就能实现一些简单的应用了。但是往往很多问题不是简单的分类和回归模型就能解决的，这中间可能涉及到多个值得研究和仔细设计的步骤，来让模型更加精确，这时候对深度学习扎实的功底就派上用场了，因为需要自己设计一些特殊的模型架构来解决这些问题，比如说涉及时间序列的应用，更需要仔细推敲和设计出最理想的算法，这涉及到对现有的多种类型的模型进行结合和改动，需要对这些已有模型有非常深的理解才行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：对于数学功底不是很好的程序员，如果想掌握深度学习，甚至成为数据科学家，您有什么好的建议？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;深度学习其实一开始也就是从一个简单的神经网络发展来的。如果想扎扎实实做这一方面的研究，当然数学越好以及知识越广能够带你走的更远。但是如果没有很好的数学功底，走应用的路线也是非常好的，毕竟也不是所有的研究都有很大的影响力或者用到了很高深的数学，很多时候只要能够读懂大概的算法思路，知道这个算法在什么样的应用中适用就行了。现在数据科学家的门槛其实也是越来越低，以前是有 Scikit-learn 的帮助，现在是有着各种深度学习框架，甚至最近 TensorFlow 在机器学习应用方面的侧重，比如说大力研发高阶的 Estimator API，也更是让更多人能够更有效地学习和更快地进入到这个行业当中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：如果没有数学基础的限制，能否给刚入门深度学习的开发者提供一些学习和实践经验？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;可以对这些深度学习的算法和架构都进行了解，要知道每个算法都适用于哪些类型的运用，基础好的话可以直接读一些好的会议以及期刊论文，关注一下前沿的研究。一定要多积累实战经验，可以多参与项目，参与像 Kaggle 这样的竞赛，最近的 Data Science Bowl 就是个很好的切入点，可以多融入到论坛中的讨论，来学习学习大家的思路和方法。如果对模型具体的实现感兴趣的话，可以尝试着读一读源代码，因为这不仅能帮助理解模型，也能了解到对于这个模型的实现，具体有哪些需要注意的地方，比如说性能上为什么这样处理会更好，API 为什么这样设计，等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：在忙碌的工作之余，您把大量的时间都贡献给了开源社区以及图书编写，但您是否有其他兴趣爱好（除了爬山和烧烤:)）？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;没错，爬山和烧烤！我还喜欢 K 歌，认识新的朋友，旅游，以及各种运动，比如说乒乓球，羽毛球，篮球，滑冰，游泳，等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;article class="yead_editor yead-selected" data-author="Wxeditor" style="   ; ; ; ; ; ; ; ; ; ; ; ; ; ;  "&gt;&lt;br&gt;&lt;span&gt;&lt;br&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;业务场景下的深度学习实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/article&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：很多大公司都开源了自己的机器学习平台，侧重的模型可能有所不同，但都会有分布式、编程方面的优化，在您接触过的平台中，您如何推荐从业者在什么情况下采用哪种框架？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;我认为还是得具体看自己的应用、需求、以及团队的背景。如果在语音上面的应用很多的话，需要用到很多类似于 LSTM, RNN，等深度学习模型，那可以在做实验比较的时候会考虑到这些模型在不同框架上的速度。如果团队的背景很多元，比如在做研究的时候可能用的编程语言不统一，那就得考虑一下哪个平台能够对这些语言提供更好的支持。再具体一点，可能要考虑哪个平台使用起来是既能够实现目的又能够灵活地在现有基础上进行必要的拓展来达到各种需求。社区的支持也很重要，不仅仅是开源社区，研究社区对某一平台的支持也是需要考虑进去的，比如说如果对 Facebook 的研究很感兴趣，那可能会更关注 Torch，因为他们的最新研究成果都会首先开源 Torch 的实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;article class="yead_editor yead-selected" data-author="Wxeditor" style="   ; ; ; ; ; ; ; ; ; ; ; ; ; ;  "&gt;&lt;br&gt;&lt;span&gt;&lt;br&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;为什么我们应该使用 TensorFlow&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/article&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：TensorFlow 开发者大会给我们呈现了大量的信息，您最为关注的有哪些？&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;我最关注的是那些高阶一点的 API，比如 Estimator 和 Keras 在 TensorFlow 内部的发展，我最早是和谷歌的 Illia Polosukhin 合作创建了 Scikit Flow 这个项目，然后紧接着被 TensorFlow 接受，放在了 TensorFlow 里面，得到了谷歌内部的大力支持和贡献，不仅仅适用于深度学习，也提供了许多机器学习的 Estimator，比如 KMeans、SVM、随机森林，等等，来帮助更广范围的用户方便地使用像 TensorFlow 这样分布式的系统。TensorFlow 对一般用户来说确实很难学好也很难写得很正确，尤其是一些分布式的逻辑，这样的高阶的 API 是特别有需求的。还有比较关注也是一直在关注的就是 DeepMind 在研究上的一些进展，比如说对皮肤癌的图片分类，对艺术和音乐的自动生成，这些都是非常有意义的事情，我很高兴他们能够不仅仅花时间在研发这个框架，也能够好好利用这个框架来做这一些有意义有影响力的一些研究。这也是各种深度学习框架的意义所在：把先进的技术免费提供给大家，帮助大家更好更有效地做研究和分享研究成果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：XGBoost 最初的优势在于 boosting，不了解 DMLC、MXNet 的人也可能很喜欢 XGBoost，您最开始改进和延伸了 XGBoost 项目，请介绍近期的发展或进展，未来的重要工作是什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;&amp;nbsp;XGBoost 算是我比较早期的时候就开始一直参与的项目，经过了 Kaggle、学术界、以及工业界很多用户的千锤百炼，对于最近比较值得注意的一些进展，大家可以看看新增加的 Callback 功能，可以用来更方便地监控和观察模型的训练，最近也支持了 GPU，以及对 Spark、Flink 等大数据平台的结合使用的支持，未来的很大一部分工作就是更好地帮助用户使用，从他们的使用当中了解需求，尽可能帮助到大家更好地从事数据科学工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：如果用户已经使用 Spark 作为大数据处理平台，也用了 MLlib，有什么理由是他必须使用 TensorFlow 的？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;&amp;nbsp;TensorFlow 提供的不仅仅只是现有的一些比较热门的模型实现，深度学习和机器学习这个领域的发展是非常快的，很多问题往往不是简单的现有模型能够解决的，最重要的是一个框架的灵活性和可拓展性一定是不能丢的，Spark 的 MLlib 很优秀地实现了一些工业界需求比较大的一些算法，但是 TensorFlow 能提供的不仅仅是这些，它提供了很多建立机器学习和深度学习必有的元素，比如，TensorFlow 有着自己的 metrics、losses、optimizers、layers 等模块来帮助建立各种各样的深度学习模型，它也提供了许多高阶的 Estimator API 来帮助用户更好地搭建和定义自己的分布式的模型，FeatureColumn 模块来帮助数据科学工作中很重要的特征工程，DataFrame 和 QueueRunner 等模块来更好地实现数据的预处理，提取批量队列，等等。另外，TensorFlow 省去了在各种不同的设备（比如 CPU、GPU、TPU）上的实现，用户只需要集中精力调用已经实现好的 API 就可以在各种设备上进行自动优化以及资源分配，这些都是 Spark 目前还不能或者是很难做到的。最近雅虎开源的 TensorFlowOnSpark 也挺有意思，可以在现有的 Spark/Hadoop 分布式集群的基础上部署 TensorFlow 的程序，这样可以避免数据在已有 Spark/Hadoop 集群和深度学习集群间移动，HDFS 里面的数据能够更好地输入进 TensorFlow 的程序当中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：您如何与黄文坚老师配合完成《TensorFlow 实战》？怎样实现了工作和写作之间的平衡？写完此书有哪些收获和体会？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;我们一个在国内一个在国外，理论上来说合作起来本应该是相当困难。但由于我们都是 TensorFlow 的贡献者，对 TensorFlow 都是算比较熟悉的了，所以我们写起书来也是比较独立，每人负责几个章节。写的过程中也积极地互相交流，讨论书中的各个例子有没有更好的实现方法，书也不是一天两天就能写完的，所以在写的过程中也都得互相跟进和讨论 TensorFlow 的最近进展。写作基本上都是工作之余完成的，确实需要花很多的时间，因为毕竟是写出来帮助大家的，对很多代码和应用的解释，以及背景知识的介绍也需要反复推敲。写书的过程中也发现和激起了对 TensorFlow 没有贡献到的一些模块的兴趣，通常写着写着发现自己已经打开了无数的代码文件而只写下了一两段话，写书也是一个不断学习，灵感不断涌现的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CSDN：在开发人员读完《TensorFlow 实战》之后，可能需更进一步的提升，您是否有下一步相关著作的计划？或者有其他的学习途径可以推荐？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;唐源：&lt;/span&gt;我们这次虽然大部分的例子都是基于最新的 1.0 版本，但是 TensorFlow 的发展特别快，我们会在下一版介绍更多的新的功能，也会根据读者的反馈意见来更好地帮助大家学习。其他的学习途径，可以参考官方的一些例子，一般都是和代码比较兼容的，然后 Github 上面也有很多值得学习的代码和例子，如果对源代码比较感兴趣，也鼓励大家积极参与贡献。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;article class="yead_editor yead-selected" data-author="Wxeditor" style="   ; ; ; ; ; ; ; ; ; ; ; ; ; ;  "&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;span&gt;本文为CSDN栏目&lt;span&gt;&lt;strong&gt;「2017 AI 创新者」&lt;/strong&gt;&lt;/span&gt;系列专访之一。旨在通过对AI领域杰出学者、资深专家、技术缔造者、顶尖团队的采写与刻画，向业界展现最新行业案例与趋势。寻求报道请发邮件至&lt;span&gt;&lt;strong&gt;wangyi@csdn.net&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/article&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="http://img04.iwgc.cn/mpimg/ae18da4606c5a3cce3eec1e1605e9d128e0bd094"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="http://img04.iwgc.cn/mpimg/bb06c26084c5729f61742661b2895a542796caf4"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 23 Feb 2017 16:47:56 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】Apache Kafka 0.10.1.1 发布，微软数据中心将建到水下</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;p&gt;Cloudaily网罗新鲜要闻，每日为你呈现&lt;span&gt;大数据和云计算领域&lt;/span&gt;热点新闻。本次内容播报如下：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;微软数据中心将建到水下，可降低冷却成本&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;近日，微软研究院的工程师在 IEEE Spectrum 上发表文章描述了公司的水下数据中心计划 Project Natick。今天大多数数据中心都建造在电力廉价，气候适宜和土地费用便宜的地方，这意味着数据中心通常远离人口密集的地区，这限制了它的请求响应速度。将数据中心建在近海能让它更靠近想要服务的客户，同时还可以降低昂贵的冷却成本。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;全球能源互联网建设&amp;ldquo;三步走&amp;rdquo; 可带动超50万亿美元投资&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;2月22日，全球能源互联网发展合作组织在北京发布《全球能源互联网发展战略白皮书》（以下简称《白皮书》），提出分国内互联、洲内互联和洲际互联三个阶段构建全球能源互联网的路线图。会上还发布了《跨国跨洲电网互联技术与展望》和《全球能源互联网发展与展望（2017）》。中国国家电网公司前董事长刘振亚提出，进一步推动全球能源互联网创新发展，需要把握三个关键。首先是以全面合作凝聚发展合力，拓展理念传播的广度和深度，深化各方交流，开展务实合作。其次，以科技攻关引领创新发展，在柔性直流输电、大容量储能、能量路由器、信息物理融合、大数据、物联网、自动驾驶、车联网等方面尽快取得一批创新成果。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;发改委批准360承建大数据协同安全技术国家工程实验室&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;据报道，发改委正式批准360公司领头承建大数据协同安全技术国家工程实验室。该实验室将重点开展数据汇聚隐私保护、数据防泄漏、系统漏洞分析、安全协同分析、大数据系统风险评估与安全监测等技术的研发和工程化工作。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;Google云计算平台终于支持云端GPU加速服务&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Google云计算平台日前推出了支持云端GPU加速服务的公开测试版，第一款支持的GPU型号是NVIDIA 的Tesla K80，使Google云平台的性能获得了巨大提升。现在，用户可以在谷歌云平台的三个地区玩转基于NVIDIA GPU的虚拟机，包括美东1区（us-east1），东亚1区（asia-east1）和西欧1区（europe-west1）。目前只支持使用gcloud的命令行工创建虚拟机，但从下周起就可以在云终端界面来创建虚拟机。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;微软宣布Azure Container Service将全面支持Kubernetes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;微软正在让Kubernetes&amp;ndash;由谷歌开发的容器编排服务&amp;ndash;可以全面用于自己的Azure Container Service之中。微软2016年11月推出Kubernetes on ACS公开预览版。官员们表示，截至今天（2月21日）Kubernetes on ACS已经全面可用。并在21日为那些使用ACS的用户提供了使用Kubernetes的Windows服务器容器（Windows Server Containers）的预览。该公司的官员在2月21日的博客文章中表示，&amp;rdquo;客户现在可以预览Docker Swarm（在去年的预览中推出的）以及通过ACS使用Kubernetes，提供的选择与排名前三的Linux容器编排平台中的两个平台一致。&amp;rdquo;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;Veritas与AWS、Azure建立合作 欲进军混合云领域&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Veritas日前复出，正紧锣密鼓地筹划推出新的产品，同时Veritas还宣布将加强与亚马逊网络服务（AWS）及微软Azure的合作。据悉，Veritas是一家从事数据管理和存储的传统厂商，在2015年被赛门铁克公司卖掉。据称，Veritas宣布与微软建立为期数年的合作伙伴关系，微软将在Azure上使用Veritas的企业库云和管治工具。NetBackup 8.0、Backup Exec 16与Azure的整合及Veritas与微软的合作伙伴关系将为Veritas在混合云领域提供契机。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;大数据公司中润普达完成超过1亿人民币Pre-A轮融资&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;日前，中文大数据公司中润普达集团日前宣布完成Ｐｒｅ－Ａ轮融资。融资金额超过１亿元人民币。此次融资结束后，中润普达大数据及其子公司资本规模达4.3亿元。中润普达集团总经理杜小军表示，此轮融资后，中润普达将加快&amp;ldquo;长江经济带&amp;rdquo;沿线的产业布局，为社会提供更多更好的大数据产品和服务。此前，中润普达已经完成了从数据资产归集、数据预处理、数据可视化、数据流通与交易、数据金融到行业大数据综合应用解决方案的全产业链布局。其中基于大数据的全媒体融合解决方案、基于大数据的产业金融平台解决方案、新一代大数据可视化云服务平台等成为行业应用模式微创新的重要案例。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;Apache Kafka 0.10.1.1 发布，分布式消息发布订阅系统&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Apache Kafka 0.10.1.1 发布了。更新内容：提升1.[KAFKA-4302] - Simplify KTableSource；2. [KAFKA-4331] - Kafka Streams resetter is slow because it joins the same group for each topic；3. [KAFKA-4379] - Remove caching of dirty and removed keys from StoreChangeLogger。&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); background-color: transparent;" target="_blank"&gt;Orange Business Services携手华为推出全球公共云服务&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了进一步加速国际云战略的实施，Orange Business Services日前推出了一项全新的全球公共云服务，其中包含云基础架构与应用的咨询、审计、整合和代管服务。Orange携手华为提供的该项服务很好地补充了现有的 Orange 私有云产品组合，进而有助于企业顺利推进他们的数字化转型方案。Orange此次与华为的合作充分利用了 OpenStack 的技术优势。OpenStack 是针对云计算的开源软件平台。开放式标准和互操作性能够实现规模经济，避免所有权锁定的危险，是满足大型、可扩展型公共云解决方案需求的关键。Orange 之所以选择与华为合作，是因为华为是OpenStack 领域的领军企业，并将在该平台的持续开发过程中发挥核心作用。&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img03.iwgc.cn/mpimg/8d03407d6fef809f9b8a0a009b62fbf6758d65b0"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/p&gt;&lt;/blockquote&gt;
</description>
      <pubDate>Thu, 23 Feb 2017 16:47:56 +0800</pubDate>
    </item>
    <item>
      <title>京东分布式数据库系统演进之路</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;张成远，京东云资深架构师，《Mariadb原理与实现》作者，开源项目speedy作者，2012年加入京东数据库研发团队，负责京东分布式数据库系统的架构与研发工作，主导了京东分布式数据库系统在公司的落地及大规模推广，擅长高性能服务器开发、分布式缓存/数据库/存储等大规模分布式系统架构。&amp;nbsp;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;关于数据库的使用，在京东有几个趋势，早期在京东主要用SqlServer及Oracle也有少量采用MySQL，随着业务发展技术积累及使用成本等因素，很多业务都开始使用MySQL，包括早期使用SqlServer及Oracle的很多核心业务也都渐渐的开始迁移到MySQL，单机的MySQL往往无法支撑这类业务，需要考分布式的解决方案，另外原本使用MySQL的业务随着数据量及访问量的增加也会遇到瓶颈最终也会考虑采用分布式解决的方案，整个京东发展趋势如图1所示。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/a61ec1c2104fa24d1d81bbfad2f2b8aae284ff09"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图1 业务使用数据库演变趋势&lt;/center&gt;&lt;p&gt;分布式的数据库解决方案有很多种，在各个互联网公司使用得也是非常的普遍，本质上就是将数据拆开存储在多个节点上从而缓解单节点的压力，业务层面也可以根据业务特点自行进行拆分，如图2所示，假设有一张user表，以ID为拆分键，假设拆分成两份，最简单的就是奇数ID的数据落到一个存储节点上，偶数ID的数据落到另外一个存储节点上，实际部署示意图如图3所示。&lt;/p&gt;&lt;p&gt;除了业务层面做拆分，也可以考虑采用较为通用的一些解决方案，主要分为两类，一类是客户端解决方案，这种方案是在业务应用中引入特定的客户端包，通过该客户端包完成数据的拆分查询及结果汇总等操作，这种方案对业务有一定侵入性，随着业务应用实例部署的数量比较大，数据库端可能会面临连接数压力比较大的问题，另外版本升级也比较困难，优点是链路较短，从应用实例直接到数据库。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/596dbb2a62171ca8a5fc2b9f1ec45c8ffa4b7098"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图2 数据拆分示意图&lt;/center&gt;&lt;p&gt;另一类是中间件的解决方案，这种方案是提供兼容数据库传输协议及语法规范的代理，业务在连接中间件的时候可以直接使用传统的JDBC等客户端，从而大大减轻了业务开发层面的负担，弊端是中间件的开发难度会比客户端方案稍微高一点，另外网络传输链路上多走了一段，理论上对性能略有影响，实际使用环境中这些系统都是在机房内网访问，这种网络上的影响完全可以忽略不计。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/f555d789e1d319db94dbe239693fbef6940d3b26"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图3 系统部署示意图&lt;/center&gt;&lt;p&gt;根据上述分析，为了更好的支撑京东大量的大规模数据量的业务，我们开发了一套兼容MySQL协议的分布式数据库的中间件解决方案，我们称之为JProxy，这套方案经过了多次的演变最终完成并支撑了京东全集团的去Oracle/Sqlserver任务。&lt;/p&gt;&lt;p&gt;JProxy第一个版本如图4所示，每个JProxy都会有一个配置文件，我们会在配置文件中配置相应业务的库表拆分信息及路由信息， JProxy接收到SQL以后会对SQL进行解析再根据路由信息决定SQL是否需要重写及该发往哪些节点，等各节点结果返回以后再将结果汇总按照MySQL传输协议返回给应用。&lt;/p&gt;&lt;p&gt;结合上文的例子，当用户查询user这张表时假设SQL语句是select * from user where id = 1 or id = 2，当收到这条SQL以后，JProxy会将SQL拆分为select * from user where id=1 及select * from user where id = 2， 再分别把这两条sql语句发往后端的节点上，最后将两个节点上获取到的两条记录一并返回给应用。&lt;/p&gt;&lt;p&gt;这种方案在业务库表比较少的时候是可行的，随着业务的发展库表的数量可能会不断增加，尤其是针对去Oracle的业务在切换数据库的时候可能是一次切换几张表，下一次再切换另外几张表，这就要求经常修改配置文件。另外JProxy在部署的时候至少需要部署两份甚至多份，如图5所示，此时面临一个问题是如何保证所有的配置文件在不断修改的过程中是完全一致的。在早期运维过程中，我们靠人工修改完一份配置文件，再将相应的配置文件拷贝给其他的JProxy，确保JProxy配置文件内容一致，这个过程心智负担较重且容易出错。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/aae7bf6bd2d468f458780fa74b074053ef5910d3"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图4 版本一&lt;/center&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/01cf95b300bc7a851fdad5fc6a980b8f970ed5b4"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图5 配置文件&lt;/center&gt;&lt;p&gt;在之后的版本中我们引入了JManager模块，这个模块负责的工作是管理配置文件中的路由元信息，如图6所示。JProxy的路由元信息都是通过JManager来统一获取，我们只需要通过JManager往元数据库里添加修改路由元数据，操作完成以后通知各个JProxy动态加载路由信息就可以保证每个JProxy的路由信息是完全一致的，从而解决维护路由元信息一致性的痛点。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/dc76973210467185b44800f705f6b9ce3b768e75"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图6 版本二&lt;/center&gt;&lt;p&gt;在提到分布式数据库解决方案时一定会考虑的一个问题是扩容问题，扩容有两种方式，一种我们称之为re-sharding方案，简单的说就是一片拆两片，两片拆为四片，如图7所示，原本只有一个MySQL实例一个shard，之后拆分成shard1和shard2两个分片，之后再添加新的MySQL实例，将shard1拆分成shard11和shard12两个分片，将shard2拆分成shard21和shard22两个分片放到另外新加的MySQL实例上，这种扩容方式是最理想的，但具体实现的时候会略微麻烦一点，我们短期之内选择了另一种偏保守一点在合理预估前提下足以支撑业务发展的扩容模式，我们称之为pre-sharding方案，这种方案是预先拆分在一定时期内足够用的分片数，在前期数据量较少时这些分片可以放在一个或少量的几个MySQL实例上，等后期数据量增大以后可以往集群中加新的MySQL实例，将原本的分片迁移到新添加的MySQL实例上，如图8所示，我们在一开始就拆分成了shard1、shard2、shard3、shard4四个分片，这四个分片最初是在一个MySQL实例上，数据量增大以后我们可以添加新的MySQL实例，将shard3和shard4迁移新的MySQL实例上，整个集群分片数没有发生变化但是容量已经变成了原来的两倍。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/0d7d9296c646f04b522ae36477663177cd2632eb"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图7 re-sharding方案&lt;/center&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/7d062e1997ec1a6289298897faa1b6b179ce6a49"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图8 pre-sharding方案&lt;/center&gt;&lt;p&gt;Pre-sharding方案相当于通过迁移完成达到扩容的目的，分片位置的变动涉及到数据的迁移验证及路由元数据的变更等一系列变动，所以我们引入了JTransfer系统，如图9所示。JTransfer可以做到在线无缝迁移，迁移扩容时只需提交一条迁移计划，指定将某个分片从哪个源实例迁移到哪个目标实例，可以指定在何时开始迁移任务，等到了时间点系统会自动开始做迁移。整个迁移过程中涉及到迁移基础全量数据和迁移过程中业务访问产生的增量数据，一开始会将基础全量数据从源实例中dump出来到目标实例恢复，确认数据正确以后开始追赶增量数据，当增量数据追赶到一定程度系统预估可以快速追赶结束时，我们会做一个短暂的锁定操作，从而确保将最后的增量全部追赶完成，这个锁定时间也是在提交迁移任务时可以指定的一个参数，比如最多只能锁定20s，如果因为此时访问量突然增大等原因最终剩余的增量没能在20s内追赶完成，整个迁移任务将会放弃，确保对线上访问影响达到最小。迁移完成之后会将路由元信息进行修改，同时将路由元信息推送给所有的JProxy，最后再解除锁定，访问将根据路由打到分片所在的新位置。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/f6b3aef2ea8a96e917562b6bf5eeb28cb6e596cb"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图9 版本三&lt;/center&gt;&lt;p&gt;系统在生产环境中使用的时候，除了考虑以上的介绍以外还需要考虑很多部署及运维的事情，首先要考虑的就是系统如何活下来，需要考虑系统的自我保护能力，要确保系统的稳定性，要做到性能能够满足业务需求。&lt;/p&gt;&lt;p&gt;在JProxy内部我们采用了基于事件驱动的网络IO模型同时考虑到多核等特点，将整个系统的性能发挥到极致，在压测时JProxy表现出来的性能随着MySQL实例的增加几乎是呈现线性增长的趋势，而且整个过程中JProxy所在机器毫无压力。&lt;/p&gt;&lt;p&gt;保证性能还不够，还需要考虑控制连接数、控制系统内存等，连接数主要是控制连接的数量这个比较好理解，控制内存主要是指控制系统在使用过程中对内存的需求量，比如在做数据抽数时候，sql语句是类似select * from table这种的全量查询，此时后端所有的MySQL数据会通过多条连接并发地往中间件发送数据，从中间件到应用只有一条连接，如果不对内存进行控制就会造成中间件OOM，在具体实现的时候我们通过将数据压在TCP栈中来控制中间件前后端连接的网络流速从而很好的保证了整个系统的内存是在可控范围内。&lt;/p&gt;&lt;p&gt;另外还需要考虑权限，哪些IP可以访问哪些IP不能访问都需要可以精确的控制，具体到某一张表还需要控制增删改查的权限，我们建议业务在写SQL的时候尽量都带有拆分字段保证SQL都可以落在某个分片上从而保证整个访问是足够的简单可控，我们为之提供了精细的权限控制，可以做到表级别的增删改查权限，包括是否要带有拆分字段，最大程度做到对SQL的控制，保证业务在测试阶段写出不满足期望的SQL都能及时发现，大大降低后期线上运行时的风险。&lt;/p&gt;&lt;p&gt;除了基本的稳定性之外，在整个系统全局上还需要考虑到服务高可用方案。JProxy是无状态的，一个业务在同一个机房内部署至少两个JProxy且必须跨机架的，保证在同一个机房里JProxy是高可用的。在另外的机房会部署再部署两个JProxy，做到跨机房的高可用。除了中间件自身的高可用以外还需要保证数据库层面的高可用，全链路的高可用才是真正的高可用。数据库层面在同一个机房里会按照一主一从部署，在备用机房会再部署一个备，如图10所示。JProxy访问MySQL时通过域名访问，如果MySQL的主出异常数据库会进行相应的主从切换操作，JProxy可以访问到切换以后新的主，如果整个机房的数据库异常可以直接将数据的域名切换到备用机房，保证JProxy可以访问到备用机房的数据库。业务访问JProxy时也是通过域名访问，如果一个机房的JProxy都出现了异常，和数据库类似直接将JProxy前端的域名切换到备用机房，从而保证业务始终都能正常访问JProxy。&lt;/p&gt;&lt;p&gt;数据高可靠也是非常关键的点，我们会这对数据库的数据进行定期备份，将备份数据存储到相应的存储系统中，从而保证数据库中的数据即使被删除依然是可以恢复的。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/05fc85643a2ac1848dc4564415c5bb3bd118f0c9"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图10 部署示意图&lt;/center&gt;&lt;p&gt;系统在线上运行时候监控报警是极其重要的，监控可以分多个层次，如图11所示，从主机和操作系统的信息到应用系统的信息到特定系统内部特定的信息的监控等，针对操作系统及主机的监控京东有MJDOS系统可以把系统的内存/cpu/磁/网卡/机器负载等各种信息都纳入监控系统，这些操作系统的基础信息对系统异常的诊断非常关键，比如因为网络丢包等引起的服务异常都可以在这个监控系统中及时找到根源。&lt;/p&gt;&lt;p&gt;京东还有统一的监控报警系统UMP，这个监控系统主要是给所有的应用系统服务，所有的应用系统按照一定的规则暴露接口，在UMP系统中注册以后，UMP系统就可以提供一整套监控报警服务，最基本的比如系统的存活监控以及是否有慢查询等。&lt;/p&gt;&lt;p&gt;除了这两个基本的监控系统以外，我们还针对整套中间件系统开发了定制的监控系统JMonitor，之所以开发这套监控系统是因为我们需要采集更多的定制的监控信息，在系统发生异常时能够第一时间定位问题，举个例子当业务发现TP99下降时往往伴随着有慢SQL，应用从发送SQL到收到结果这个过程中经过了JProxy到MySQL又从MySQL经过JProxy再回到应用，这条链路上任何一个环节都可能慢，不管是哪个阶段耗时，我们需要将这种慢SQL的记录精细化，精细到各个阶段都花了多少时间，做到出现慢SQL时能快速准确的找到问题根源快速解决问题。&lt;/p&gt;&lt;p&gt;另外在配合业务去Oracle/SqlServer时，我们不建议使用跨库的事务，但是会出现有一种情况，同一个事务里的SQL都是带有拆分字段的，每条SQL都是单节点的，同一个事务里有多条这种SQL，结果却出现这个事务是跨库的，这种事务我们都会有详细的记录，业务方可以直接通过JMonitor找到这种事务从而更好的进一步改进。除了这个以外，在测试环境时候业务系统一开始写的SQL没有考虑太多的优化可能会出现比较多的慢SQL，这些慢SQL我们都会统一采集在JMonitor系统上进行分析处理，帮助业务方快速迭代调整SQL语句。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/87d1ec9feb50c87246d3ff07dd70715a45e910ca"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图11 监控体系&lt;/center&gt;&lt;p&gt;业务在使用这套系统的时候 要尽量出现避免跨库的SQL，有一个很重要的原因是当出现跨库SQL的时候会耗费MySQL较多的连接如图12所示，一条不带拆分字段的SQL将会发送到所有的分片上，如果在一个MySQL实例上有64个分片，那一条这样的SQL就会耗费这个MySQL实例上的64个连接，这个资源消耗是非常可观的，如果可以控制SQL落在单个分片上可以大大降低MySQL实例上的连接压力。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/11f88bba034d09155cd3da11fec4f53661775926"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图12 连接数&lt;/center&gt;&lt;p&gt;跨库的分布式事务要要尽量避免，一个是基于MySQL的分布式数据库中间件的方案无法保证严格的分布式事务语义，另一个即使可以做到严格的分布式事务语义支持依然是要尽量避免垮库事务的，多个跨库的分布式事务在某个分片上发生死锁将会造成其他分片上的事务也无法继续导致直接引起大面积的死锁，即使是单节点上的事务也要尽量控制事务小一点，降低死锁发生的概率。&lt;/p&gt;&lt;p&gt;具体的路由策略不同的业务可以特殊对待，以京东分拣中心为例，各个分拣中心的大小差异很大，北京上海等大城市的分拣中心数据量很大其他城市的分拣中心相对会小一点， 针对这种特点我们会给其定制路由策略，做到将大的分拣中心的数据落在特定的性能较好的MySQL实例上，其他小的分拣中心的数据可以按照普通的拆分方式处理。&lt;/p&gt;&lt;p&gt;在JProxy系统层面我们可以支持多租户模式，但考虑到去Oracle/SqlServer的业务往往都是非常重要且数据量巨大的业务，所以我们的系统都是不同的业务独立部署一套，在部署层面避免各个业务之间的互相影响。考虑到独立部署会造成一些资源浪费，我们引入了容器系统，将操作系统资源通过容器的方式进行隔离，从而保证系统资源的充分利用。很多问题没必要一定要在代码层面解决，代码层面解决起来比较麻烦或者不能做到百分之百把控的事情可以通过架构层面来解决，架构层面不好解决的事情可以通过部署的层面来解决，部署层面不好解决的事情可以通过产品层面来解决，解决问题的方式各式各样，需要从整个系统全局角度来综合考量，引用邓公的一句话&amp;ldquo;不管黑猫白猫，能抓老鼠的就是好猫&amp;rdquo;，同样的道理能支撑住业务发展的系统就是好的系统。&lt;/p&gt;&lt;p&gt;另外再简单讨论一下为什么基于MySQL的分布式数据库中间件系统无法保证严格的分布式事务语义支持。所谓分布式事务语义本质上就是事务的语义，包含了ACID属性，分别是原子性、一致性、持久性、隔离性。&lt;/p&gt;&lt;p&gt;原子性是指一个事务要么成功要么失败，不能存在中间状态。持久性是指一个事务一旦提交成功那么要做到系统崩溃以后再恢复依然是成功的。隔离性是指各个并发事务之间是隔离的，不可见的，在数据库具体实现上可能会分很多个隔离级别。事务的一致性是指要保证系统要处于一个一致的状态，比如从A账户转了500元到B账户，那么从整体系统来看系统的总金额是没有发生变化的，不能出现A的账户已经减去500元但是B账户却没有增加500元的情况。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/6e6fc824d195c88a8bcdca63199f53610b8cac39"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图13 可串行化调度&lt;/center&gt;&lt;p&gt;事务在数据库系统中执行的时候有一个可串行化调度的问题，假设有T1、T2、T3三个事务，那么这三个事务的执行的效果应该和三个事务串行执行效果一样，也就是最终效果效果应该是{T1/T2/T3, T1/T3/T2, T2/T1/T3, T2/T3/T1, T3/T1/T2, T3/T2/T1}集合中的一个，当涉及到分布式事务时，每个子事务之间的调度要和全局的分布式事务的调度顺序一致才能满足可串行化调度的要求，如图13所示，T1/T2/T3的三个分布式事务，在一个库中的调度顺序是T1/T2/T3和全局的调度顺序一致，在另一个库中的调度顺序变成了T3/T2/T1，此时站在全局的角度来看就打破了可串行化调度，可串行化调度保证了隔离性的实现，当可串行化调度被打破时自然隔离性也就随之打破，在基于MySQL的分布式中间件方案实现上，因为同一个分布式事务的各个子事务的事务ID是在各个MySQL上生成的，并没有提供全局的事务ID来保证各个子事务的调度顺序和全局的分布式事务一致，导致隔离性是无法保证的，所以说当前基于MySQL的分布式事务是无法保证严格的分布式事务语义支持的。当然随着MySQL引入GR可以做到CAP理论中的强一致，再加强中间件的相关功能及定制MySQL相关功能也是有可能做到支持严格的分布式事务的。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/13bcabb65529a29ce2bb9d23997abb79319e9040"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src="http://img03.iwgc.cn/mpimg/5cca52de53b86bb96669c080b483289d010266b7"/&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
</description>
      <pubDate>Wed, 22 Feb 2017 16:02:58 +0800</pubDate>
    </item>
    <item>
      <title>大数据时代的结构化存储—HBase在阿里的应用实践</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-bottom: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：天梧，阿里巴巴中间件技术部高级技术专家。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;时间回到2011年，Hadoop作为新生事物，在阿里巴巴已经玩得风生水起，上千台规模的&amp;rdquo;云梯&amp;rdquo;是当时国内名声显赫的计算平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一年，Hadoop的好兄弟HBase由毕玄大师带入淘宝，开启了它的阿里之旅。从最初的淘宝历史交易记录，到去年的支付宝消费记录存储在线历史存储统一；从蚂蚁安全风控的多年存储演进，到HBase、TT、Galaxy的大数据激情迭代；HBase在阿里经历过年轻的苦涩，释放过青春的活力，也付出过成长的代价。几代人的不懈努力下，五年陈的HBase开始表现出更成熟、更完善、更丰富的一面，成为公司内部被广泛使用的存储产品之一。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过阿里集团内部的锤炼，集团将这个技术红利输送给广大阿里云客户。现已推出云数据库HBase产品，支持海量的PB级的大数据存储，适用于高吞吐的随机读写的场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本篇会系统性的阐述HBase的定位、建设思路，其中相关内容可能并未深入展开，后续会有专项介绍，请大家随时关注云栖社区相关文章。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;概述&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HBase是一个开源的非关系型分布式数据库（NoSQL）,基于谷歌的BigTable建模，是一个高可靠性、高性能、高伸缩的分布式存储系统，使用HBase技术可在廉价PC Server上搭建起大规模结构化存储集群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HBase最初是以Hadoop子项目的形式进行开发建设，直到2010年5月才正式成为Apache的顶级项目独立发展。伴随着互联网时代数据的澎湃增长，HBase作为基础存储系统得到了快速发展与应用，大批知名商业公司(Facebook、Yahoo、阿里等)不自主地加入到了HBase生态建设队伍，成为Apache最活跃的社区之一。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HBase的能力特点，可以简单概括为下表，基于这些能力，其被广泛应用于海量结构化数据在线访问、大数据实时计算、大对象存储等领域&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img05.iwgc.cn/mpimg/82c76e554c4586c52c2d55f833a3e24f7e11ef4a"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里从2011年初开始步入HBase的发展、建设之路，是国内最早应用、研究、发展、回馈的团队，也诞生了HBase社区在国内的第一位Committer，成为HBase在中国发展的积极布道者。过去的几年时间，阿里累积向社区回馈了上百个Patch, 在诸多核心模块的功能、稳定性、性能作出积极重大的贡献，拥有多位Committer，成为推动HBase的长远发展的重要力量之一。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里是一家综合生态型公司，内部庞大业务矩阵高速发展，在基础存储方面，需要更好的功能灵活性、基础设施适应性、服务稳定性、效率成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，阿里HBase团队发展维护了HBase的内部分支，其基于阿里巴巴/蚂蚁金服的环境和业务需求，对社区HBase进行深度定制与改进，从软件系统、解决方案、稳定护航、发展支撑等全方位提供一站式大数据基础存储服务。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;HBase在阿里的使用&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Ali-HBase作为阿里巴巴大厦的基础存储设施，全面服务于淘宝、天猫、蚂蚁金服、菜鸟、阿里云、高德、优酷等各个领域，满足业务对于大数据分布式存储的基本需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在刚刚过去的2016年双11，HBase承载访问量达到了上百GB/秒(写入)与上百GB/秒(读取)，相当于全国人民一秒收发一条短信，在业务记录、安全风控、实时计算、日志监控、消息聊天等多个场景发挥重要价值。面对如此规模的业务体量，阿里巴巴团队对于如何基于HBase打造稳定、高效、易用的存储服务，形成了一套完善的产品体系与实践经验，其整体大图如下：&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img05.iwgc.cn/mpimg/b55bda111feba8d98bf73a8cbc4cf3b5315e1769"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总体上，我们以定制的软件内核为中心，建设质量平台、运维平台、业务平台和数据流设施四大内容，以支持业务对于基础数据服务的全方位需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来，本文会围绕可用性、数据流、性能优化等方面介绍最近的一些具体工作，希望能够给相关领域的同学带来一点帮助。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;高可用建设&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务持续可用是互联网系统的显著特征，但由于物理环境、软件Bug的不确定性，要做到系统的高可用往往不是一件容易的事，尤其是对于有状态的存储系统而言。今天，我们统一使用SLA(服务等级协议)去衡量一个分布式系统的可用性，比如SLA达到99.99%的系统，其全年的不可用时间小于52.6分钟；99.999%的系统，其全年的不可用时间小于5.25分钟，达到这个能力的系统一般可以称之为高可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面对断电、断网、硬件故障等物理机房的不可靠性，任何一个高可用系统必须通过双机房，甚至多机房部署的方式进行容灾。对于存储系统，这就要求数据能够在机房间冗余复制，并保证各个机房的数据对上层应用的一致性。所以，高可用建设是我们过去很长时间的重要工作。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;集群异步复制&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Apache HBase从0.92版本开始支持Replication功能，它会实时地、异步地将一个HBase集群中的增量数据复制(推送方式)到另一个HBase集群，当主集群故障不可用时，应用可以切换访问到备集群，从而实现数据与服务的机房容灾。关于HBase Replication的基本原理，读者可以从&lt;/span&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: underline; background-color: transparent;" target="_blank"&gt;&lt;span&gt;社区官方Book&lt;/span&gt;&lt;/a&gt;&lt;span&gt;中获得详细内容，本文便不再阐述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面的篇幅，将主要介绍阿里在使用Replication过程中的经验与改进，期望能和在类似场景工作的同学有所共鸣。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;复制效率&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于在线业务的可用性要求，阿里HBase很早便开始使用Replication功能去部署双机房容灾，迎之而来的第一个大问题是数据复制的效率，尤其异地远距离部署（比如上海与深圳跨城复制）时更加严重，表现为数据复制的吞吐小于客户端写入主集群的吞吐，数据不断积压，延迟逐渐增大，只能等待凌晨低峰期逐渐消化。我们对此进行深入分析，着重优化了以下几点，才得以保障跨城集群复制也能稳定保持在秒级内。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提升源端发送效率&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;HBase Replication的基本数据复制过程是源端串行读取HLog的内容，发送到目标端机器，由目标端解析HLog并写入数据写。我们发现，因为源端的串行读取、发送HLog，当集群写入吞吐大的时候，会存在严重的性能瓶颈，为此，我们重构了这一块逻辑，将HLog的读取与发送解耦，并且发送由单线程优化为多线程，使得整体的源端发送能力大幅提升。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提升目标端Sink效率&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;在Replication的默认实现中，源端会按照HLog的原始写入顺序进行回放。为了提升目标端的写入效率，我们将所有待发送的HLog先进行排序，使得同表同Region的数据都能合并处理，同时将目标端的数据写入尽量并行化。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;热点辅助&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;尽管做了以上两点后，集群间的数据复制能力大大增强，但是个别服务器仍然会由于负载过大，而产生一定的复制延迟。从本质上来说，这是因为HBase的服务器分配了更多的资源服务于来自客户端的写入请求，当某个服务器成为集群中的写入热点并高负载工作时，这个节点的数据复制基本很难再消化庞大的写吞吐。这是一个曾困扰我们很久的问题，你可以用一些运维的方式去解决。比如开启更多的线程数，但这并不能总有效。因为服务于客户端的线程数，要远远大于Replication的线程数。再比如从热点服务器移走Region，降低吞吐与负载，但热点并不保证是恒定的，可能会跳跃在各个服务器，我们也开发了新的基于历史监控的负载均衡算法，以尽可能地让请求均衡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多时候，通过运维管理手段能够控制影响、化解问题，但当你需要维护上百个集群时，一点一滴的运维要求慢慢堆积成很高的壁垒。所以，我们尝试改进系统能力，用自动、一劳永逸地方式去解决热点下的数据复制积压问题。面对热点的基本思路是散列，在这个具体场景上，我们打破原先的自生产自推送的设计，利用整个集群的能力，使得热点服务器上积压的数据(HLog文件)，能够由集群中的其他空闲服务器进行消化。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;配置在线调整&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;配置的在线调整不仅能极大提升运维幸福感，而且对于系统改进可以产生更加敏捷的反馈。这并不新鲜，但这是一项十分重要的能力，我们在系统改进的道路上也对其特别重视。HBase的Replication功能会有很多参数，我们将其全部优化为可在线调整，给日常的服务支撑带来了很大的价值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多链路&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务多地多单元部署是阿里技术架构的一项重要特征，这要求基础存储具备数据链路的灵活流动性。今天，阿里HBase会在多地部署多集群，集群间数据相互流动，以满足单元化业务的需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在支持数据多链路的生产应用上，我们总结了以下几个要点。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;表级别链路&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当一个HBase集群启用多个数据链路后，我们期望自由设置表的数据可以被复制到其中的一个或多个链路，使得整个数据的流动更加灵活。为此，我们增加了一种特性，通过设置表的属性，以决定该表的数据流向哪些链路，使得整个数据流动图可以由业务架构师任意设计，十分灵活。此外，当需要在集群间热迁移数据时，它也能带来十分重大的作用。 整体效果如下，以表为单位数据可以任意流动：&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img03.iwgc.cn/mpimg/275a32ae827115485bee8a926049f6e483cd9d79"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;链路可视&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当数据可以在多个集群任意流动后，一个很迫切的需求是链路拓扑以及复制状况的可视。为此，我们强化了Replication的信息层，不仅源端保留它到多个目标的链路信息，而且每个目标端也会保留多个源端到它的链路信息，从而我们可以从任意一个集群绘制整个链路拓扑图。同时，我们极大丰富Replication的运行状况信息，并将之汇聚到HBase的Master节点，由其统一汇总展现，从中我们可以清晰得到数据是否积压、复制的性能瓶颈、节点间的均衡情况、具体的延迟时间等信息，其中复制的延迟时间是一个十分关键的信息。基本信息如图：&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img05.iwgc.cn/mpimg/06edf27a523b4e93012dfbe6b08118649a2c63e7"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;循环复制&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;在数据多链路下，会产生一些循环复制的场景。比如集群A-&amp;gt;B-&amp;gt;C-&amp;gt;A，这是一个简单的链接式复制，当数据流过某个集群时，HBase Replication会在数据中添加该集群ID的信息，以防止同一条数据被多次流经同一个集群，基于这个设计，即使复制链路存在环，数据也不会产生无限循环流动。但是，仍然有一个效率问题不得不提，对于A&amp;lt;-&amp;gt;B&amp;lt;-&amp;gt;C&amp;lt;-&amp;gt;A这样一个数据链路，我们发现客户端写入到A集群的数据，在B集群和C集群上会被复制写入两次，一次通过A-&amp;gt;B链路写入，另一次通过A-&amp;gt;C-&amp;gt;B链路写入。所以，为了避免这种写入放大，需要在链路部署上防止产生这种环。在过去实践的一些场景，发现这种环状链路不得不存在，所以系统层面，我们也对Replication做了相关优化，以去除这种写入放大。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;链路隔离&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当源集群配置了多个数据链路后，我们总是期望这些链路之间相互隔离，不会因为一个链路的积压影响其他链路。在大多数时候，这一切都如预期工作，但当集群故障时，糟糕的事情发生了，我们发现一个异常链路会阻塞全部链路的复制恢复，究其原因，是因为在数据复制的恢复期间，很多资源是所有链路共享的。所以，这些资源的链路解耦成为我们的工作，同时，也好好对数据复制的宕机恢复速度进行了优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据的一致性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天，大多数生产系统会使用异步方式去实现集群间的数据复制，因为这样效率更高、逻辑更清晰。这意味着，集群间数据是最终一致模型，当流量从主切换到备，从备上无法访问完整的数据，因为复制存在滞后，并且当主集群永久不可恢复，数据也会存在部分丢失。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了满足业务场景的强一致需求，我们采用了两种方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一种，异步复制下的强一致切换。虽然备集群的数据集滞后于主集群，但是在主集群网络健康的情况下，仍然可以保障切换前后数据的强一致。其基本过程如下，首先让主集群禁止数据写入，然后等待主集群的数据全部复制备集群，切换流量到备集群。这里存在两个依赖，一个是集群的写入控制功能(支持禁止来自客户端的数据写入)，另一个是复制延迟的确定性，虽然数据是异步复制的，但是我们将数据的复制时间点明确化，即该时间点之前写入的数据已经完全复制到了备集群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二种，数据复制使用同步的方式。即当数据写入返回客户端成功后，能保证数据在主备集群均已写入，从而即使主集群完全不可恢复，数据在备集群中也能保证完整。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了满足类似场景的需求，阿里HBase研发了同步方式的集群间数据复制，具体内容可参考下一节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;冗余与成本&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据在集群间的冗余复制，给系统的可用性带来了数量级的提高，但同时也意味着更大的成本开销，在保证可用性下如何优化成本是一个需要重点思考的问题，阿里HBase在这方面投入了较大精力的尝试，具体内容将在接下来的&amp;rdquo;性能与成本&amp;rdquo;章节进行介绍。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;集群同步复制&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;上文提到，HBase集群可以使用异步方式的数据复制来构建双机房容灾，当主集群故障不能提供服务时，就会切换请求到备集群，保障系统整体高可用。然而，异步复制模式下存在的问题是：在服务切换后，由于主备集群间的数据并非强一致，存在部分数据无法通过备集群获取或者访问到的内容过旧。也就是说，如果应用对于数据访问具有强一致要求，现有的异步复制设计，无法在主集群故障时，仍然保证系统的高可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为此，阿里HBase团队投入研发集群同步复制功能，使得主集群不可用时，备集群的数据能达到和主集群完全一致，业务可以无感知的切换到备集群。相比于异步复制，同步复制会带来的额外的开销，但整个写入吞吐/性能的影响，在我们的设计中，做到了尽量的相近。其整体功能点如下：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据强一致性保证。数据写入主备集群，主集群不可用后，备集群可以恢复所有在主集群写入成功的数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高性能。主备集群HLog写入采用异步并行的方式写入，对写入性能影响微弱&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;列族级粒度。列族级别的配置，支持同集群下同个表的不同列簇可以使用不同的复制方式，同步或异步。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同异步复制共存。任何情况下，同步复制表的任何操作不会影响异步表的读写。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;灵活切换。备集群不可用，同步复制可以一键切换为异步复制，不阻塞主集群写入。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;关于数据的强一致，我们进行了如下定义：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;返回应用成功，则一定主备都写成功&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;返回应用错误，则未决(主备是否成功不能确定)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据一旦读取成功，则主备永远均可读，不会出现主读成功切换至备后读不到或者备读得到主读不到的情况&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任何情况下，保证主备集群的最终一致性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;我们遵从简单、高效的原则去设计同步复制功能，简单意味着该功能与原核心逻辑保持最大程度的隔离，能够快速达到生产稳定性要求，并能很好地降级成异步复制；高效意味着主备必须并行写，这在错误处理上增加了不少的难度。整体实现方案如下：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;客户端向主集群写入数据的时候，会并行写入两份Log，一份是本地HLog文件，另一份是备集群的HLog文件，我们称之为RemoteLog.两者皆成功，才返回客户端成功。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;RemoteLog仅在故障切换后，用以回放数据。正常运行时，不做任何使用，备集群的数据仍然通过现有的异步复制链路写入。同时，可以通过停写RemoteLog，把同步复制降级成异步复制。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HBase数据的多版本特性，使得基于HLog的操作回放具有幕等性，所以，在故障切换后，RemoteLog中的数据回放会存在一定的重复，但不会影响数据正确性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;主备集群存在Active和Standby状态，只有Active状态的集群才能接受客户端的数据写入&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在备集群切换为Active状态之前，会对RemoteLog全局上锁，从而防止客户端写入数据到主集群返回成功。这也意味着，主备集群在任何时刻，只有一个处于Active状态，不会有脑裂发生。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;RemoteLog会定期由主集群清理，主集群服务器的一个HLog文件对应一个或多个RemoteLog，所以当主集群的HLog文件中的数据被完全复制到备集群后，相应的RemoteLog就可以被删除。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;其基本结构如图：&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img04.iwgc.cn/mpimg/f10f95c4fbde67e8eb5bb36b20fa98c4ab0b5c65"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这里，主备角色是不对等的，我们通过部署进行分配。其中，主-&amp;gt;备使用同步复制模式，一旦流量切换到备后，备-&amp;gt;主使用异步复制模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于主备双Log的并发写入，使得同步复制的性能能够与异步复制接近，在实际使用中，我们观察到客户端写入响应时间增加小于10%。最后，我们列举一些应用同步复制容灾的场景，以供大家参考。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于状态变更数据的场景。HBase中提供了CheckAndMutate接口，用以支持条件写入/更新/删除，其含义是当某一条件达成时，才执行该写操作。这意味着查询到的数据必须是强一致的，不然就会写入错误的数据。比如，对于一笔交易记录，其状态只能从&amp;ldquo;已付款&amp;rdquo;变更为&amp;ldquo;已发货&amp;rdquo;，而不能从其他状态变更为&amp;ldquo;已发货&amp;rdquo;，所以在数据更新时需要做状态的条件判断。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;日志/消息的顺序订阅。对于日志/消息产品而言，订阅数据的完整性是其最核心的保证，也就是说通过HBase进行Scan的时候，必须保证能扫描到范围内的每一行数据。如果切换后，主备数据存在不一致，则会出现scan过程中跳过某些数据，造成订阅少数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;流计算。由于流计算不停地基于中间结果和新的数据流进行迭代处理，作为存储中间结果的数据库，必须时刻具备数据的强一致，才能保证数据计算结果的正确性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;集群间的数据复制是HBase用来构建机房容灾、提供高可用性的重要武器，阿里HBase通常使用异步复制方式部署，着重改进其在复制效率、多链路、一致性等方面的能力。同时，也研发了一种高效的同步复制方式，以满足数据强一致场景的容灾需求。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;数据传输管道设施&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;数据流动的诉求&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在大数据的发展背景下，没有一个系统可以处理所有的场景。因此，打通各个系统之间的数据通道，让数据在在线存储、实时分析、离线计算中高速流动，形成闭环，是打造大数据平台、挖掘数据价值的关键一环。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;HExporter系统&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;HBase作为一款高吞吐的在线数据存储系统，我们希望其能高效、准确地吐出数据，以满足业务对数据计算分析的多元化需求，这是我们建设HExporter系统的出发点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HBase业务的数据规模飞速增长，单个业务数据量达到10T，百T级别非常常见，且越来越多的业务要求同步数据到离线计算系统进行计算。同时大部分离线计算任务是周期型，比如按天为单位进行计算，因此数据要按时间分区进行同步并保证单调性，这需要一个高效的时间分区增量方式的数据导出方案来应对日益增长的需求。这是我们建设HExporter系统的场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于以上出发点和场景，我们期望建设一个实时的、高效的HBase数据管道设施，使得写入到HBase系统的数据可以方便地传输复制到其他异构系统，让数据因为流动、计算、加工而产生新的价值。为此，阿里HBase团队投入研发HExporter系统，其整体上具备以下能力：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实时性。数据可以秒级复制到其他异构系统&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;准确性。保证数据在HBase与其他系统间的最终一致性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高吞吐。支持调整缓冲等级和压缩等级，从而协调数据生产端和数据消费端的能力，达到最大的吞吐量。在实际应用中，HExporter可以有效使用95%的网络带宽并保持稳定运行。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;容灾性。HBase主备容灾模式下，数据能够正常传输。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时间确定性。明确标注同步时刻，该时刻之前写入的数据都已经传输完成。基于此，保证计算系统对某个时间分区的完整数据进行计算。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可降级。支持按表取消数据传输。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;监控告警。支持传输延迟的监控与告警。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;HExporter系统的整体架构如下：&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img03.iwgc.cn/mpimg/eb51377a0ed04a76ec3a0402f2a2a8410f6ecb9a"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HExporter的数据是由HBase系统&amp;ldquo;推送&amp;rdquo;过来的，其利用了HBase系统本身的内部数据复制机制，模拟了备库的角色。HBase的RegionServer将自身的数据打包，随机发送到HExporter的采集节点。每一个数据包随机的选择采集节点，因此采集节点之间是完全对等的，可以动态的增加节点来提高HExporter的接收能力，它是水平可扩展的。为了支持主备模式下的HBase，HExporter需要同时采集主备集群，保证客户端写入HBase的数据不会因为主备间的网络中断而延迟采集。此时需要解决数据去重的问题：HExporter在收到数据包时，会检查数据包的标记，这个标记表示了数据是否来自于最源端（客户端写入的集群），如果不是则直接抛弃这个数据包。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大部分离线计算任务是周期型，比如按天为单位进行计算，数据要按时间分区进行同步，因此消费数据时必须能够获取时间信息。HExporter提供两个维度的时间供消费方使用：业务时间（数据的生成时间）和存储时间（数据写入HBase的时间）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同步时间点指的是一个时刻，在该时刻之前写入HBase的数据都已经被HExporter采集。由于数据的推送是随机的，因此到达采集节点的数据在时间上是乱序的，同步时间点利用HBase在Zookeeper上记录的日志信息计算每个RegionServer的同步时间点，最后选择所有RegionServer同步时间点中的最小值记为集群的同步时间点。由于同步时间点的计算是保障数据有序的关键，必须能够容忍宕机等问题。在HExporter的设计中，每一个采集节点都可以计算同步时间点，所有节点竞争同一个锁（依赖Zookeeper实现），从而获得这一轮计算同步时间点的权利。只要有一个采集节点存活，同步时间点的计算就可以正常工作。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;目前，HExporter作为阿里HBase系统的基础数据传输管道设施，每天有上百TB的数据被传输到离线计算平台、在线分析引擎、搜索引擎等系统，这些系统协力配合满足应用丰富多样的数据需求。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;性能与成本&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;数据冗余的背后&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;前面章节提到，我们使用数据在集群间的冗余复制来提高系统可用性，对于主备容灾，这意味着我们需要花费一倍的额外成本来换取高可用，能不能降低开销成为高可用能力是否可以普及的重要门槛。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;跨集群分区数据复制&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;HBase使用HDFS作为其文件存储系统，底层数据存储默认使用三副本冗余以保障数据的可靠性，这也意味着HBase内部的HLog、Flush、Compaction过程会产生三份数据流量和存储空间，包括网络和磁盘。如果HBase的底层副本数能够从3降低为2，很大程度上可以减少近1/3的成本，但是2个副本在实际运行中的数据丢失率仍然是不小的。所以，对于数据可靠性有要求的环境，三副本是最基本的要求。但是，当我们部署主备容灾后，全局拥有了六个副本，能否降低单个集群的副本为两个，全局从六个副本降低成四个副本，这成为资源优化的重要入口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了容忍单集群在两副本下的数据丢失，我们需要建立跨集群的分区数据复制机制，使得当某一个集群数据文件丢失时，可以快速地从另一个集群进行恢复。为了适用于更多的场景，比如集群迁移、一键建站，我们在设计上会更加通用，支持将某个表的指定范围数据高效、准确地复制到指定集群，整体功能可以概括如下：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;简单。可以通过一个接口或者命令执行复制，并在系统UI上实时显示进度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;快速。整个复制任务会进行拆分，并由不同节点完成，大大提高速度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;容错和灾难恢复。复制过程中任何出错和宕机都能自我恢复。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;在实现上，其类似于分布式任务调度，每一个提交的复制作业，会按照RowKey范围拆成多个子任务，并且子任务的起止范围是Region的子集，由Master派发给集群中的服务器，并保证失败后的重新派发。任务调度中的相关数据，统一存储在zookeeper上，从而保证宕机情况下作业的可恢复性。数据的具体复制根据情况会采用完全拷贝和部分复制两种方式，如果文件内容的RowKey范围是子任务的子集，则将其完全拷贝到指定集群；不然，则使用部分复制的方式，在拷贝期间过滤掉无效的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详细系统架构如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img04.iwgc.cn/mpimg/92b86b61f53b27166bc8a8896617612187deab46"/&gt;&lt;/center&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;br&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图中的部分角色说明：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;DataMigrationManager：DMM,运行于HBase Master，负责接收复制作业、切割作业为多个子任务、派发子任务、监听完成情况等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;DataMigrationWorker：DMW, 运行于HBase Regionserver，负责完成子任务的数据复制到指定集群。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Job：一次数据复制作业，由用户提交，内容包括表名，Rowkey范围以及指定目标集群的地址信息。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Task：Job分割后的子任务，多个子任务的Rowkey范围拼接后组成完整的复制作业的Key范围。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;在拥有跨集群分区数据复制能力后，双集群双副本的运行方式得以应用普及，这能有效降低容灾成本。同时，我们的集群迁移、表迁移能力大大增强，在不限流下单节点可以达到70MB/秒，更重要的是这变成了一项能力、一个接口服务，而不是一堆运维操作，大大提升运维效率。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;多集群多活服务&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;对于通常的双集群容灾部署，同一时间只有单个集群提供服务，使得另一个集群在大部分时间内处于资源闲置。为了改善这一情况，阿里HBase使用了以下几种方式：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务对于数据无强一致要求，同个业务的部分客户端访问主集群，部分客户端访问备集群。这种方式对于业务应用部署存在一定的负担，使其数据库地址管理复杂化。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;交叉部署访问，支持数据的强一致要求。一般我们会把类似场景的多个业务部署在同个集群中，通过交叉部署，在同一时间，使得一些业务访问主集群，另一些业务访问备集群，从而同时发挥两个集群的资源。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;客户端支持同时访问双集群。我们通过改造HBase的客户端，使其支持同时访问双集群，这不仅可以提升集群的资源使用率，还大大降低了访问毛刺，因为任何超过一定时间的请求都会被重发到另一个集群。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;我们经常使用上述一二的方式去优化双集群容灾下的资源使用，并且取得很不错的效果。&amp;nbsp;&lt;br&gt;现阶段，由于业务场景对请求稳定性的更高要求，我们开发了&amp;ldquo;客户端支持同时访问双集群&amp;rdquo;的功能，以规避单节点抖动（如网络、磁盘、GC、锁竞争、热点）的影响，减少应用访问HBase的响应毛刺。从实际测试使用看，开启该功能后，整体毛刺比例下降达到一个数量级以上，有效去除HBase请求服务时间不稳定的影响。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;em&gt;&lt;span&gt;更多性能工作&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在过去的几年，阿里HBase投入了很大的精力去进行系统的性能优化，包括Region级二级索引、Bucket Cache、Small Scan、Reversed Scan等很多重要优化已经反馈给社区，并在开源伙伴的一起努力下，不断更新迭代，读者可以从社区了解具体的原理与实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;刚刚过去的2016年双11，可以说是HBase的一场圣战，面对巨大峰值流量从容应战的背后是我们在性能优化上的很多新型武器。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;异步API&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;一直以来，HBase只能使用同步API方式访问服务，使得吞吐型场景应用端大量线程阻塞在HBase接口，严重影响性能，而异步的思想并不陌生。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在去年双11后，阿里HBase开发实现了一套全新的异步API，使得客户端不需要阻塞等待到服务端返回结果,通过回调函数执行请求成功或失败后的业务逻辑，大大提升请求吞吐。我们将其应用于监控、安全、日志等场景，整体写入吞吐可以提升1至3倍。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;前缀BloomFilter&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;HBase利用BloomFilter过滤不必要的文件来提高HBase数据读的性能，其效果只支持Get不支持Scan；在实际使用场景中，有很多业务Scan操作会扫描具有相同前缀的行，比如物流详情场景，其Rowkey结构是：物流单号+时间戳，一个物流商品会经历多个状态，每有一次状态转移需要写入一行数据，这些状态正常在10个左右，通过Scan的方式可以查询一个物流单号下的所有状态。针对这个场景我们设计了前缀BloomFilter，在业务Scan的起止范围存在公共前缀下，使得Scan操作也可以使用BloomFilter来过滤文件，大大提升了查询效率；菜鸟物流详情开启前缀BloomFilter后，查询性能提升一倍，做到大促不扩容，轻松hold住今年大促6.57亿包裹的物流详情查询。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HLog压缩&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;HLog从0.92版本开始支持字典压缩，但其与Replication复制冲突，使得其一直无法真正地被使用，而大量在线业务使用宽表结构，几十个字段的场景比比皆是，HLog的压缩将有效提升写入能力。为此，阿里HBase重构了HLog的压缩机制，与HBase Replication功能完美兼容运行，在消费记录、数据总线、库存对账等多个业务线获得良好效果，提升写入20%。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;内置计算&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;数据的聚合、校正、清洗是数据库系统常见的计算场景，通过外部客户端进行数据的扫描、计算、更新是我们常用的传统方式。当面对TB级以上规模的时候，这种方式不仅效率低下，而且对本身的数据服务性能影响巨大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里HBase一直在探索一种高效、环保的能力去解决我们对于数据基本计算的需求，几经业务理解与抽象，最终找到一种基于coprocessor的数据库内置计算方案。它不仅可以提供基本的Count、Avg、Sum、PV、UV等分析聚合能力，也可以提供常见的格式转换、内容校正、字段清洗等数据管理能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其基本原理是，我们在HBase的Flush、Compaction、查询返回等路径添加coprocessor的hook，并开发很多通用的coprocessor插件，使得HBase服务端能够在Compaction、Flush期间就完成数据计算工作，这不仅促使计算结果快速输出，也大大减少数据存储IO，大大提升整体性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年，凭借这个能力，多个几百TB规模业务在一周以内完成字段清洗、格式转换，并且全程对业务在线访问无影响。凭借这个能力，很多秒级生产的指标数据，应用可以零成本聚合成小时级、日级等粗粒度指标，并对HBase系统减少50%以上的访问压力。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;未来发展&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着2016天猫双十一的GMV定格在1207亿，HBase的大促目标圆满完成，然而完美的结果只是开始，阿里HBase团队追求卓越的心永远不会变，推陈出新也永远不会停。在未来的日子里，我们将会重点攻破以下难题。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;GC的挑战&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;HBase作为JAVA性存储系统，大容量的内存堆使得YoungGC、FullGC的停顿成为我们一直以来挥之不去的痛苦。探究GC的原理机制，我们明确HBase内部的写缓冲Memstore和读缓存BlockCache是造成GC停顿的最大源头，正在尝试用全新研发的完全自管理内存的Map以替换JDK自带的Map，从而消除GC的影响。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;我们正在尝试提供SQL方式访问HBase。它会增加数据类型，降低用户的开发理解门槛，促进异构系统之间的数据流动效率；它会增加全局二级索引，使得多条件查询更加高效；它会简化查询表达，使得性能优化更加普及；它会增加通用的热点解决方案，帮助用户免去复杂的散列逻辑。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;容器部署&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;我们正在尝试将HBase部署运行于Docker之上，使得整体运维更加敏捷，集群伸缩更加自如，资源使用更加充分。&lt;/span&gt;&lt;/p&gt;&lt;hr style=" box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "/&gt;&lt;p&gt;&lt;span&gt;更多精彩，欢迎关注CSDN大数据公众号！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img03.iwgc.cn/mpimg/a08096f0939c73d9fca2a2450f1b9954bb2bf3e4"/&gt;&lt;/center&gt;
</description>
      <pubDate>Wed, 22 Feb 2017 16:02:58 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】MIT评出全球十大突破性技术，Google Cloud Endpoints正式发布</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;p&gt;&lt;span&gt;Cloudaily网罗新鲜要闻，每日为你呈现&lt;span&gt;大数据和云计算领域&lt;/span&gt;热点新闻。本次内容播报如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;交通部推进智慧交通发展 加快云计算技术应用&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;日前，交通运输部印发《推进智慧交通发展行动计划（2017&amp;mdash;2020年）》。交通运输部将选择重点物流园区、客运枢纽、港口开展智能化示范应用，完善道路运输行政许可&amp;ldquo;一站式&amp;rdquo;服务，推进许可证件（书）数字化，实现跨部门、跨区域政务信息共享。《计划》提出，将加快云计算、大数据等现代信息技术的集成创新与应用，选取部分重点公路开展智能化管理试点，开发基于手持移动终端的智能化养护管理系统；鼓励有条件的交通运输企业，应用大数据、云计算等技术，实现对场站、车辆、人员等运输资源的动态监测、优化配置、精准调度和协同运转；选择重点客运枢纽、港口，开展智能化示范应用。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;MIT评出全球十大突破性技术，阿里巴巴连摘两项&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;近日，《麻省理工科技评论》(MIT Technology Review)发布2017年全球十大突破性技术榜单。在与Google、微软、IBM等科技巨头的较量中，阿里巴巴分别入选&amp;ldquo;强化学习&amp;rdquo;和&amp;ldquo;刷脸支付&amp;rdquo;两大技术榜单。其中，阿里巴巴的&amp;ldquo;刷脸支付&amp;rdquo;技术让MIT的评委们颇为震撼。《MIT科技评论》认为，作为全世界首批上线人脸识别技术的国家，中国的人脸识别技术精度已达到金融交易的级别，刷脸支付进入成熟期，迄今已有近1.2亿用户使用。而&amp;ldquo;强化学习&amp;rdquo;技术在阿里双11推荐场景中的应用，将手机用户点击率提升了10-20%。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;亚太Azure云计算平台与服务新增两个韩国区域上线&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;微软宣布其Azure云计算平台与服务区域新扩展的两个韩国区域（韩国中部和韩国南部）已经上线提供服务，还将有4个其他地区即将公布发布计划。现在亚太地区Azure区域已经扩展至13个地区，包括4个位于法国和美国的新区域，全球将拥有38个Azure区域。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;盖雅工场获5000万B轮融资，继续打造劳动力管理云服务平台&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;据报道，亚太地区劳动力管理软件盖雅工场宣布完成 5000万人民币B轮融资，本轮由元生资本领投，经纬中国跟投。盖雅工场是劳动力管理 SaaS 服务领域唯一通过 ISO 双认证的企业，目前有多语言多时区版本。此轮融资后，盖雅工场将继续打造劳动力管理云服务核心平台，在支持国际化复杂工时管理运算、智能劳动力需求预测及自动排班管理等大数据平台及移动端方面发力。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Docker v17.03.0-ce-rc1 发布，应用容器引擎&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Docker v17.03.0-ce-rc1 发布了，其 GitHub 主页显示将于 2017-03-01 发布 17.03.0-ce。本次更新内容如下：1.Client：Fix panic in docker stats &amp;ndash;format；2.Contrib：Update various bash and zsh completion scripts3.Networking：丢弃传入的普通 vxlan 报文以加密覆盖网络，在分配失败时释放网络附件；4.Runtime：修复 Docker 日志中的死锁，修复 CPU spin 等待日志写入事件。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Seafile v6.0.4 发布，开源文件云存储&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Seafile 是一款国产开源的网盘云存储软件，提供更丰富的文件同步和管理功能，以及更好的数据隐私保护和群组协作功能。Seafile 支持 Mac、Linux、Windows 三个桌面平台，支持 Android 和 iOS 两个移动平台。典型的机构用户包括比利时的皇家自然科学博物馆，德国的 Wuppertal 气候、能源研究所。目前，Seafile v6.0.4 发布了。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Google Cloud Endpoints正式发布&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;经过3个月的Beta测试之后，谷歌正式发布了其基于Open API的API管理系统Cloud Endpoints（GCE）。据谷歌介绍，该系统旨在让开发人员可以构建高效、易于扩展的API平台。GCE可以部署、保护、监控及管理运行在谷歌云平台（GCP）上的API。它包含一套可以生成API和客户端代码的工具和库，其目标是简化开发人员访问后端服务的方式。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;普华永道成立上海创新中心，发起科创联盟&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;近日，普华永道位于上海新天地的创新中心宣告成立，也标志着由普华永道发起的上海科创联盟正式启动。该创新中心是普华永道大中华区发展蓝图的重要组成部分，当中包含创新、教育和战略研究三大核心功能。目前该创新中心有五大功能区：孵化器工作室、新兴技术实验室、催化工坊、数字化体验中心以及视频创意中心。而上海科创联盟是为了打造创新生态系统，实现创新生态圈各环节的共享共赢。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;调查表明30%的云计算支出已被浪费&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;每年这个时候，行业人士期待的一件事就是云计算服务提供商RightScale公司公布的年度云状态报告。这个调查报告基于2017年1月进行的研究，并在日前发布，为人们带来一些新鲜的观点。混合云采用率增长，私有云采用率下降：在85%的受访企业中存在多云战略，而2016年1月的调查为82%。而另一方面：私有云采用率从77%下降到72%。这意味着重心正在向公共云转移。云计算与传统IT一样浪费，这是一个真正的惊人事实：通过调查的受访者估计，30%的云计算支出被浪费。尽管对云成本管理进行了越来越多的审查，但很少有企能够充分利用未使用的资源，或选择低成本云计算或区域。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img04.iwgc.cn/mpimg/82bd22b8e53d041b911a361b6ee90808b9d7d74e"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
      <pubDate>Wed, 22 Feb 2017 16:02:58 +0800</pubDate>
    </item>
    <item>
      <title>Qunar React Native 大规模应用实践</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者简介：&lt;/span&gt;&amp;nbsp;殷文昭，去哪儿 Qunar 移动架构组（YMFE）iOS 研发工程师，负责 Qunar 定制的 React Native 框架 Qunar React Native 框架的 iOS 部分的开发和整体维护，主推了 QRN 框架的一次大升级，主要研究 React Native iOS 部分的底层实现。&amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;导读：Qunar React Native（下文简称 QRN）是去哪儿网（Qunar）基于 React Native（下文简称 RN）定制的一套框架，让 RN 用起来更方便快捷，2016 年 3 月上线后已在公司内部大规模应用。透过 QRN 的大规模实践我们可以看到如何更好地去使用 RN。&lt;/strong&gt;&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;前言&lt;/h2&gt;&lt;p&gt;移动 App 跨平台开发技术因为可以低成本、高效率地完成 App 开发，一直以来都是移动开发的热点。目前常见的跨平台开发技术包括 React Native、Weex 和基于 HTML5 的 Hybrid 框架。Qunar 基于 React Native 定制了一套跨平台移动开发框架&amp;mdash;&amp;mdash;Qunar React Native（QRN），QRN 与已有两年历史的 HY（基于 H5 的 Hybrid 方案）一同构成了当前 Qunar 的跨平台开发框架，这两个框架都是由 Qunar 移动架构组 YMFE 推出。&lt;/p&gt;&lt;p&gt;QRN 解决了使用 RN 中的诸多问题，实现了更少的平台差异、更高的开发效率、更好的用户体验，也非常适合像 Qunar 内部这种多个业务隔离的开发体系。结合成熟的离线资源包框架，QRN 页面可以通过热发快速地完成线上 Bug 的修复甚至发布新页面。目前 Qunar 内部已经有大量的业务上线基于 QRN 的页面，这其中也包括了许多核心的业务流程和日均千万 PV 的页面。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;起源&lt;/h2&gt;&lt;p&gt;Qunar 从 2009 年率先开始无线业务至今，移动客户端一直承担着大量的业务需求。2014、2015 年正是 Qunar 在移动端发力、业务增长凶猛的关键时期，去哪儿旅行 App 的页面也与日俱增，2015 年底 iOS 端 App 大小一度超过 110MB。由于 App Store 的限制，超过 100MB 的 App 只能在 Wi-Fi 下才能下载，这就导致了用户期望定机票、酒店时不能使用 3G/4G 网络随时下载去哪儿旅行客户端，因此当时一个迫切的需求就是减少 App 的大小。&lt;/p&gt;&lt;p&gt;缩减 App 包大小的常见思路是去除冗余的业务、优化图片资源等，但是这样依然很难将 App 的大小减少到 100MB 以下。而从根本上减少 App 大小就需要减少 Native 的页面，删减业务显然不是一个可行的方案，这就要求我们将页面做成可以动态化配置。&lt;/p&gt;&lt;p&gt;在 QRN 之前，Qunar 内部一直存在有我们团队推出的一套可以支持动态化配置的跨平台 App 开发框架&amp;mdash;&amp;mdash;HY。HY 是基于 HTML5 的 Hybrid 开发框架，在 Qunar App 中已经有大量的业务使用该方案开发。但是 HTML5 的解决方案存在体验和性能两方面的问题，表现为基于 HY 开发的页面很难达到一个原生的用户体验，在低端 Android 机上体验差，这在一些复杂的动画场景中尤为明显。这些问题其实是 HTML5 方案的基因所决定，因此为了减少 App 的大小我们迫切需要一个新的支持动态化配置的跨平台 App 开发框架。&lt;/p&gt;&lt;p&gt;经过一系列的调研和讨论后，我们决定尝试使用 Facebook 开源的 React Native 作为新的跨平台移动开发框架，这是因为 RN 具有以下特性：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;支持动态化：RN 的页面逻辑使用 JavaScript（下文简称 JS）来控制，因此我们可以做到动态发布。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;跨平台性：RN 本身是支持 iOS 和 Android 两个平台的开发。同时由于其页面开发方式是完全 Web 化的 JS 和 React，这就让 RN 的 Web 端实现成为可能（React Web 就是 QRN 的 Web 端实现），因此 RN 完全可以做到一套代码三端运行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Native 的用户体验：RN 页面使用的是 Native 的原生组件，具有更强的可定制性，完全可以做到一个 Native 的用户体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;为了验证 RN 的技术细节，2015 年 12 月我们在 Qunar 的一个热门独立客户端&amp;ldquo;去哪儿睡&amp;rdquo;上线了基于 RN 开发的酒店用户点评页，其中包括相册的选取界面都是用 RN 来完成（如图 1 所示），该项目同时上线了 iOS 和 Android，页面的整体效果超过预期，这也让我们坚信 React Native 是完全可以作为一个新的跨平台开发框架。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="http://img05.iwgc.cn/mpimg/a7042f743c72788426d32c378c29cef52f91fe89"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 1 &amp;ldquo;去哪儿睡&amp;rdquo;客户端酒店用户点评页面&lt;/center&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;在上线去哪儿睡的酒店点评页的过程中，我们也发现了很多 RN 存在的问题，比如部分 RN 组件因为使用的是 Native 的组件所以还存在平台差异、打开 RN 页面时需要一个较长的加载时间等。为了解决这些问题，我们花了 3 个月的时间基于 RN 定制了一套更快、更好、更统一的跨平台开发框架 QRN。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;大规模应用现状&lt;/h2&gt;&lt;p&gt;2016 年 3 月我们上线了第一个基于 QRN 的页面：去哪儿旅行 iOS 客户端的酒店首页。在之后的几个月中我们上线了大量基于 QRN 开发的项目，到 2016 年 10 月在去哪儿旅行客户端中已有超过 20 个 QRN 项目，其中有 14 个是同时上线了 iOS 和 Android。平均每个项目有 8 个以上的页面，在此之中，酒店一个 QRN 项目就有多达 20 个页面。&lt;/p&gt;&lt;p&gt;在去哪儿旅行客户端中首页的酒店（仅 iOS）、客栈名宿、金融理财的一级入口均为 QRN 页面。不仅如此，对于核心业务流程，例如订单列表页、订单详情页、用户登录页面也都替换为了 QRN 页面（见图 2），这其中包含了很多日均千万 PV 的页面。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/edd4996e5e70815e739191cc9f88d3354c3d71f8"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 2 QRN 页面替换&lt;/center&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;QRN 的架构特点&lt;/h2&gt;&lt;p&gt;QRN 在去哪儿内部大规模的应用与其架构密不可分，在设计 QRN 框架时我们主要考虑了下面三点：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;业务使用的便利性：部分 RN 组件，比如 Switch、Picker 等并没有做到 iOS、Android 两端的 UI 风格统一，而在 Qunar 移动开发中要求两个平台具有一致的 UI 风格，因此为了保证业务使用的便利性，我们需要进一步抹平平台差异。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;与现有页面的共存：在 Qunar 移动端中不仅仅存在 Native 页面，还存在着大量 HY 页面，怎么和这些现有页面进行共存也是我们设计 QRN 所需考虑的问题。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持热发更新：RN 是一个支持动态化的移动 App 开发框架，因此我们需要考虑设计一个完善的热发更新机制来实现 QRN 页面的 bugfix 甚至提供上线新页面。&amp;nbsp;&lt;br&gt;那么，我们是怎么做的呢？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;进一步抹平平台差异&lt;/h3&gt;&lt;p&gt;RN 的 Switch 使用的是 iOS 和 Android 各自平台的 UI 风格（如图 3 所示），这在使用时极为不便。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/954673109405e6278541f8ac542ffefc8f8aa66a"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 3 React Native 的 Switch 两端 UI 风格对比&lt;/center&gt;&lt;p&gt;&lt;span&gt;在 QRN 中我们提供了 iOS 和 Android 统一的 UI 风格，方便业务使用（如图 4 所示），对于其他不统一的基础 UI 组件，我们都在 Android 上基于 iOS 风格重新实现，保证了两个平台的 UI 统一。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://img04.iwgc.cn/mpimg/61d125ec09717b1a9ec2a375fd48e00181d6496e"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 4 QRN 中统一的 Switch UI 风格&lt;/center&gt;&lt;p&gt;&lt;span&gt;同时，我们也使用 JS 实现了一些常见的外部 UI 组件，例如图 5 中支持侧滑操作的 ListView 和日历等组件。使用 JS 实现的组件具有很强的跨平台性，如果这些 UI 组件出现 Bug，我们也可以通过热发更新快速修复，其成本远低于修复一个 Native 的组件（&lt;/span&gt;&lt;span&gt;从&lt;/span&gt;&lt;a style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; line-height: 27.2px; word-wrap: break-word !important; background-color: transparent;" target="_blank"&gt;http://ued.qunar.com/qrn/extraUI.html&lt;/a&gt;&lt;span&gt;&amp;nbsp;可&lt;/span&gt;&lt;span&gt;查看更多的 QRN 外部 JS UI 组件）。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://img03.iwgc.cn/mpimg/877b0c2183237b55fcfadf8a4ad774f9dc4b04eb"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 5 支持侧滑操作的 ListView 和日历组件演示&lt;/center&gt;&lt;p&gt;&lt;span&gt;除了 UI 上的不同，iOS 和 Android 平台的差异还体现在其他地方，其中一个不同点就是 App 状态栏。在 iOS 上从 iOS 7 开始就支持沉浸式状态栏，且高度均为 20，但是 Android 上由于系统版本和机型的不同，是否支持沉浸式状态栏、状态栏高度这些属性在写 RN 页面时都需要关注，但 RN 并没有提供一个统一的 API 去获取。对于这些差异，在 QRN 中我们都提供了统一的 API 方便业务在写 QRN 页面时可以直接获取，从而无需区分平台。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;通过这些方式我们真正做到了跨平台性，去哪儿旅行客户端首页的客栈名宿页面同时上线了 iOS 和 Android，其 JavaScript 代码只有 6 处 Platform 进行平台的判断，而其源于需要和 iOS、Android 现有的 Native 页面进行交互，本身两个平台的 Native 页面进行数据传递的 Scheme 会存在差异，所以需要进行平台的判断。可以说使用 QRN 进行页面的开发完全可以做到不需要平台代码的判断，一套代码同时运行在两个平台上。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;JS Bundle 的拆分&lt;/h3&gt;&lt;p&gt;RN 中最终 pack 出来的 JS Bundle 文件不仅仅包含了业务的页面 JS 逻辑，还包含了 RN 组件和其框架的 JS。在 QRN 中，我们把 JS Bundle 文件拆分成了 QRN 的框架 JS 和业务 JS（如图 6 所示），在拆分后所有的业务共用一份 QRN 框架 JS，这样每个业务只需提供自己的业务 JS，通过它们的拆分，有效地减少了 JSBundle 的大小，同时也方便了后续的预加载和缓存。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/a5c1e189404ff97b18de4485336e9223ea1e89b5"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 6 拆分 JS Bundle&lt;/center&gt;&lt;p&gt;&lt;span&gt;QRN 的预加载和缓存&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;RN 中创建 RCTRootView（RN 页面渲染的 View）之后会有一个白屏的时间等待 RN 环境的初始化和加载 JS Bundle 文件，这个时间会接近 1s。在 QRN 中，我们提供一个异步获取 RCTRootView 的方法，获取的 RCTRootView 已经完成了 RN 环境的初始化，并已加载完 QRN 的框架 JS 和业务 JS，这时可以直接开始渲染。&lt;/p&gt;&lt;p&gt;为了减少 QRN 中获取 View 的时间，我们进行了 RN 环境的预加载和缓存。所谓预加载就是提前初始化好一个已经加载 QRN 框架 JS 的 RN 环境，这样就只需要去加载业务 JS，可以缩短最少 200ms 的等待时间。缓存指的是我们会缓存一个业务已经加载好的 RN 环境，当下次进入这个业务时就可以直接开始页面的渲染。&lt;/p&gt;&lt;p&gt;在 QRN 中我们给每个业务提供了一个独立的 RN 环境，保证了业务的独立性，当一个业务的 JS 代码出现问题时并不会影响其他业务。这种 QRN 业务完全解耦的方式非常适合类似于 Qunar 这种业务隔离的情况。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;成熟的离线资源包框架&lt;/h3&gt;&lt;p&gt;在 QRN 中，业务 JS 是线上资源，为了减少用户下载时间，我们给 QRN 添加了离线资源包的支持，如果其中有对应网络请求的网络资源，那么请求会直接返回本地离线资源包中的文件，这个时间和读取本地文件一样，因此有效减少了网络请求业务 JS 的时间。同时对于业务使用的图片等资源，我们也会放在离线资源包中加快资源打开速度。离线资源包的使用不仅仅减少了下载业务 JS 的时间，而且让 QRN 页面可以在离线情况下打开，更像一个 Native 的页面。&lt;/p&gt;&lt;p&gt;目前所有的动态化移动开发框架都需要离线资源包的支持来减少资源加载时间，每个公司应该都会有自己的一套实现机制，QRN 使用的离线资源包已经在 HY 中应用多年，其基于 BSDiff 的差分更新机制和智能化的更新策略可以在保证节省用户流量的同时拥有极高的资源包更新率。一个 1.2MB 的资源包，其更新时仅仅需要下载不到 1KB 的补丁。该离线资源包框架适合加速移动开发中的各种网络资源请求，引入框架不需要对已有的网络请求代码做任何修改，整个资源包框架对于资源请求方是无感知的。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;自定义 IconFont（图标字体）的支持&lt;/h3&gt;&lt;p&gt;在 QRN 中我们添加了自定义 IconFont 的支持，可以使用 IconFont 来作为图标。业务只需要在 JS 代码中配置需要加载的 IconFont 就可以自动完成字体的添加，整个过程无需编写任何 Native 代码。与使用图片做图标相比，IconFont 作为矢量图更清晰、更轻量也更灵活。&lt;/p&gt;&lt;p&gt;图 7 所示的去哪儿旅行客栈名宿页面中的住宿类型图标就是基于 IconFont 实现，通过设置字体颜色、阴影等属性就可以控制图标的效果，如果使用图片的话就得为每个不同的大小和效果准备不同的文件。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/b91d25da968533bc7ba8e2abf5767fd47caed95d"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 7 基于 IconFont 实现的住宿类型图标&lt;/center&gt;&lt;p&gt;&lt;span&gt;无埋点统计方案支持&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;QRN 中增加了对 Qunar 无埋点统计方案 QAV 的支持，通过修改 RN 框架，我们做到了 JS 代码无需任何修改就可以统计用户的点击、跳转数据，结合 QAV 提供的用户细查、页面流量分析等多维度的用户分析渠道，让 App 开发者可以洞察用户的行为。而引入这套无埋点方案非常简单，只需将 RN 替换为 QRN 即可，不用对已有的 RN JS 代码做任何的修改。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;全新的 ScrollView 和 ListView&lt;/h3&gt;&lt;p&gt;ScrollView 和 ListView 是业务最常使用的两个组件，但是 RN 的 ScrollView 和 ListView 的性能和内存占用达不到我们的期望。目前网上有很多开源的优化方案，在 QRN 中我们也设计了一套全新的 ScrollView 和 ListView，可以带来更高的灵活性和更小的内存占用。&lt;/p&gt;&lt;p&gt;QRN 的 ScrollView 与 RN ScrollView 最大的不同在于前者的滚动手势是由 JS 控制，而后者使用的是 Native 的 ScrollView，在 Native 处理了滚动手势后通知 JS ScrollView 滚动到哪个位置，详细对比可见图 8。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/984d35679316b401d0e9438792d1a329065b0d4e"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 8 QRN ScrollView 与 RN ScrollView 处理对比&lt;/center&gt;&lt;p&gt;&lt;span&gt;因为 RN 中除了 ScrollView 和 ListView 以外，其他组件的用户手势均由 JS 处理，如果使用 QRN ScrollView 则可以保证 RN 页面所有的组件都使用了统一的手势处理机制，从而带来极大的灵活性，让 ScrollView 嵌套 ScrollView 的效果更加自然。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;QRN 的 ListView 基于 React 的虚拟 DOM Diff 算法实现了真正意义上的 Cell 复用，图 9 显示了在 iPhone 7 上同样 2000 行数据滑动到底时的内存占用情况，可以看到 QRN 的 ListView 内存占用一直维持在 70MB 以内，而 RN 的 ListView 在滑动过程中内存最高达 1.3GB，最终稳定的内存占用也接近 600MB，显然对于大部分的机型，RN ListView 这样的内存占用会导致 App 闪退。&lt;/p&gt;&lt;p&gt;&lt;img src="http://img05.iwgc.cn/mpimg/c5b62e9396160d362046ee0bc7510014bddd9797"/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;图 9 内存占用峰值对比&lt;/center&gt;&lt;p&gt;&lt;span&gt;QRN 的 ListView 与 RN ListView 用法完全一致，一个现有的 RN 项目只需要将&amp;nbsp;&lt;/span&gt;&lt;code style=" padding: 2px 4px; max-width: 100%; box-sizing: border-box; line-height: 27.2px ; ; ; ; ; ; ; ; ; "&gt;import{ListView}from'react-native'&lt;/code&gt;&lt;span&gt;修改为&amp;nbsp;&lt;/span&gt;&lt;code style=" padding: 2px 4px; max-width: 100%; box-sizing: border-box; line-height: 27.2px ; ; ; ; ; ; ; ; ; "&gt;import{ListView}fromqunar-react-native&lt;/code&gt;&lt;span&gt;&amp;nbsp;即可使用 QRN 的 ListView。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;由于 QRN 的 ScrollView 会在 JS 中处理滚动手势，QRN 的 ListView 也会在 JS 中处理 cell 的复用，因此一旦 JS 线程负担过重就会导致页面的卡顿，这也是目前 QRN ScrollView 和 ListView 存在的不足，好在其中大部分都可以通过优化 JS 代码解决。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;遇到的问题&lt;/h2&gt;&lt;p&gt;在大规模应用 QRN 的过程中，我们也遇到了很多问题，主要表现为：&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;node_modules 依赖问题&lt;/h3&gt;&lt;p&gt;npm 并没有很好地解决模块依赖冲突的问题（关于 npm 处理模块依赖冲突的方式可&lt;span&gt;阅读：&lt;/span&gt;&lt;a style="color: rgb(0, 0, 0); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important; background-color: transparent;" target="_blank"&gt;http://www.alloyteam.com/2016/03/master-npm/&lt;/a&gt;&lt;span&gt;）。&lt;/span&gt;但是在 RN 中这个情况会变得更加复杂，RN pack 包的逻辑会默认使用第一级目录下的模块，也就是说如果一个模块 A，在第一级目录下安装了版本 A@1，但是另外一个模块 B 依赖了模块 A@2，那么在模块 B 的&amp;nbsp;&lt;code style=" padding: 2px 4px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; ; "&gt;node_modules&lt;/code&gt;&amp;nbsp;下会安装模块 A@2，但是 RN pack 出来的 JS Bundle 中只会存在 A@1。&lt;/p&gt;&lt;p&gt;因为 QRN 中进行了框架 JS 和业务 JS 的拆分，而同一个模块只会在框架 JS 和业务 JS 中存在一份，这就导致了我们需要保证不同的业务 pack JS Bundle 时一级目录下 QRN 依赖的模块都是指定版本。目前，我们自定义了一套工具来解决这个问题。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;React Native 开发&lt;/h3&gt;&lt;p&gt;RN 的开发使用了大量的前端工具，如 JSX、Redux 等。因此，一个前端开发者来开发 RN 时会更容易上手；但是 RN 的开发又需要了解 Native 的布局，这点 Native 开发者会更加熟悉。&lt;/p&gt;&lt;p&gt;目前在 Qunar 内部，同时有前端团队和 Native 开发团队在进行 QRN 页面的开发。在我们看来，RN 的开发是一个全新的开发方式，其既不是传统的前端开发，也不能简单地当作 iOS、Android 开发。相比于前端几十年的开发历史，RN 从公布到现在还不足 2 年，关于 RN 还缺乏足够多的优化技巧与资料，匮乏的高级 RN 开发者其实也阻碍了 RN 的推广与应用，好在这个问题相信会随着越来越多的人学习 RN 开发得到改善。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;一直变化的官方版本&lt;/h3&gt;&lt;p&gt;RN 目前还处于变化中，每两周会有一个新版本，从 2017 年开始，RN 的发布周期变为每个月一次，逐渐趋于稳定。版本的频繁更新特别是布局 CSS Layout 的改动，会导致现有的 Flex 布局出现问题。想象一下，一个 Web 页面在一年间要依次兼容 IE6 至 IE10，这显然是需要开发者花费大量精力来处理版本升级所带来的兼容问题。&lt;/p&gt;&lt;p&gt;QRN 在 2016 年 10 月做了一次官方版本的同步，将基于的 RN 版本从 0.20.0 升级到了 0.33.0，升级之后需要业务进行所有页面的回归，主要是要业务解决 Flex 布局的变化可能导致页面显示错误的问题。升级的主要目的是为了解决 0.20.0 中 RN 存在的 Bug，这个过程中发现升级 Base 的 RN 版本会给业务造成负担，后续 QRN 会评估同步 RN 新版本的收益和风险来决定是否升级 Base 的 RN 版本。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;写在最后&lt;/h2&gt;&lt;p&gt;Qunar 一直以来就是以技术驱动的公司，敢于尝试各种新的技术，在 RN 开源后我们团队就一直在探讨 App 中引入 RN 的可行性。目前 QRN 已经在 Qunar 内部大规模应用，这也验证了我们对 RN 的看法：RN 完全可以胜任核心业务页面，虽然和 Native 的页面还存在差距，但是由于其很强的可定制性，因此潜力很大。随着越来越多更熟练的 RN 开发者出现，RN 必将在业界成为一个非常核心的移动跨平台开发方案。后续我们将把 QRN 做成一个 SDK，开放给大家使用，让 RN 的开发变得更加快捷、简单，未来也在计划开源 QRN。&lt;/p&gt;
</description>
      <pubDate>Tue, 21 Feb 2017 14:41:00 +0800</pubDate>
    </item>
    <item>
      <title>【Cloudaily】微软与Flipkart达成战略合作，中国公共云市场潜力巨大</title>
      <link>http://www.iwgc.cn/link/</link>
      <description>
&lt;p&gt;&lt;span&gt;Cloudaily网罗新鲜要闻，每日为你呈现&lt;span&gt;大数据和云计算领域&lt;/span&gt;热点新闻。本次内容播报如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;百度在 AI 领域再下一城 领衔&amp;ldquo;国字号&amp;rdquo;人工智能实验室的筹建&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;近日国家发改委正式批复，由百度牵头筹建深度学习技术及应用国家工程实验室。百度集团总裁兼首席运营官陆奇表示，&amp;ldquo;非常荣幸，百度有机会作为牵头者，来筹建中国自己的深度学习国家工程实验室。&amp;rdquo;除此之外，百度还将作为共建单位共同参与大数据系统软件国家工程实验室，及类脑智能技术及应用国家工程实验室的建设工作。据了解，该实验室着重发力于深度学习技术、计算机视觉感知技术、计算机听觉技术、生物特征识别技术、新型人机交互技术、标准化服务、深度学习知识产权七大方向，从研究突破、产业合作、技术成果转让、人才培养等方面提升我国人工智能领域整体竞争力。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;Quadas京纬数据完成数千万元A轮融资，布局企业级数据营销平台&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;近日，国内领先的SaaS企业级营销技术提供商&amp;mdash;&amp;mdash;Quadas京纬数据宣布，完成数千万人民币A轮融资，领投方为浙江赛伯乐资本。据悉，本轮投资将用于Quadas SaaS企业级数据营销平台的技术研发和产品布局。Quadas京纬数据，由原Vpon威朋企业级SaaS事业部分拆成立，致力于为客户提供定制化的程序化营销/数据技术解决方案，为客户搭建更加公开透明的移动DSP(需求方), 移动SSP(供应方)与 DMP(数据管理) 平台。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;阿里新零售战略牵手百联 暂不涉及资本层面&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2月20日，阿里巴巴入股线下零售的绯闻对象终于从大润发正式确定为百联集团。今日，阿里巴巴（NYSE：BABA）与百联股份（600827.SH）宣布战略合作，但暂不涉及资本层面。阿里巴巴CEO张勇表示：&amp;ldquo;我们看到巨大的机会，特别是在今天，全渠道的电商融合。希望整个线上和线下会员、支付都可以打通。&amp;rdquo;在去年杭州&amp;middot;云栖大会上，阿里巴巴集团董事局主席马云提出了&amp;ldquo;新零售&amp;rdquo;的概念。他表示，线下与线上零售将在未来深度结合，再加现代物流，大数据、云计算等技术，构成未来新零售的概念。纯电商的时代很快将结束，纯零售的形式也将被打破，新零售将引领未来全新的商业模式。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;印度欲打造全球最大生物识别数据库&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2月20日消息，印度政府正在打造全球最大的公民生物识别数据库，以供科技公司、医疗保健服务提供商和应用开发商使用。在印度前总理辛格的领导下，生物识别项目（Aadhaar项目）开始于2009年，但真正在全印度大规模实施则要归功于现任的莫迪政府。到目前为止，印度政府几乎已经收集了所有12亿公民的数字识别记录，包括对指纹和眼球的扫描。此外，印度政府还支持了一个名为&amp;ldquo;India Stack&amp;rdquo; 的项目，旨在为数字化交换这些数据制定一个标准规范，以促进数字签名和各种正式文件（人们用来求职、进行财务交易或接入政府服务）的在线流通。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;微软亚太区总裁贺乐赋：中国公共云市场潜力巨大&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;微软亚太区总裁贺乐赋（Ralph Haupter）近日接受采访时表示，希望采用新技术来推动长期增长的企业应当采用云计算技术。贺乐赋表示，亚太区的企业负责人目前都着眼于通过采用人工智能、物联网、混合现实和可穿戴设备等新技术，数字化转型他们的业务。&amp;ldquo;云计算就是解决方案，&amp;rdquo;贺乐赋说。根据微软在周一发布的《亚洲数字转型研究》，78%受调查的亚太区企业负责人均认为，云计算是他们数字转型战略的关键。该研究报告显示，在该地区的1494名受调查者当中，80%认为需要把数字转型作为企业的长期增长战略，但只有29%的企业已制定出完整的计划。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;获千万级人民币A轮融资，外居乐能否通过大数据撬动海外置业市场&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;外居乐2016年底获得来自创新工场领投的千万级人民币A轮融资。外居乐是一家数据驱动型的公司，在中美两国都设有技术团队。外居乐主要瞄准海外二手房市场，并想要帮用户解决以下问题：打破语言局限，让用户比本地人更了解房源信息；简单的需求导向性检索，满足用户投资/留学的置业需求；大量的华人经纪人信息及评级，帮助用户选择决策；海外贷款、房屋出租管理等交易后用户可能遇到的问题。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;微软与印度电商巨头Flipkart达成战略合作 Azure将成后者云计算平台&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;微软昨日宣布，与印度线上零售巨头 Flipkart 达成战略合作协议&amp;mdash;&amp;mdash;Azure 云计算平台将独家为后者服务。作为印度线上零售霸主，Flipkart 常被称为印度的亚马逊。据悉，该项合作中，它的首要目标是把 Azure 应用于其计算基础设施，为现有数据中心加入云计算平台的分析能力，但绝不局限于分析销售趋势和处理付款。Flipkart 会利用 Azure 探索人工智能、机器学习与电子商务的结合，而这会利用 Cortana Intelligence Suite 和 Power BI。后两者还会协助 Flipkart 改进广告、营销和消费者服务。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;阿里云联合英特尔国内首推Skylake版云计算产品&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2月20日，阿里云宣布云服务器ECS实例新成员&amp;mdash;&amp;mdash;N5规格族启动公测。这是一款各行各业都可以采用的通用型实例，基于阿里定制版英特尔Xeon Skylake 处理器，以及阿里云对软硬件的深度优化，新产品单实例性能上限提升了60%。这也是英特尔Xeon Skylake 处理器在中国云计算行业的首发。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;微软在英国的数据中心将受到英国退欧的影响&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;随着英国首相特里莎.梅将确认英国离开欧洲市场，微软公司警告说，它可能在欧洲其他国家建立数据中心。如果贸易关税开始上升，微软公司将放弃在英国扩张数据中心规模的当前计划。然而，微软公司发言人日前却表示，该公司在欧盟公投投票之前和之后将言行一致，对于在英国建设数据中心的承诺并没有改变。目前，英国和欧盟其他国家之间的贸易是免关税的，英国和非欧盟国家之间的贸易关税与任何其他欧盟国家的贸易关税相同。然而，一旦英国正式离开欧盟，这将发生变化。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" box-sizing: border-box; margin-bottom: 20px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; color: rgb(51, 122, 183); font-size: 14px; text-decoration: none; background-color: transparent;" target="_blank"&gt;&lt;span&gt;IBM联合VMware为渠道提供市场就绪的混合云方案&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;去年IBM和VMware建立了战略合作伙伴关系，以促进将VMware环境扩展到SoftLayer共有云中。但是合作伙伴很快失望地发现IBM Cloud for VMware对于渠道来说是个&amp;ldquo;禁区&amp;rdquo;。而本周情况发生了转折，IBM在PartnerWorld Leadership Conference大会上宣布已经授权商业合作伙伴转售此前仅为自己内部服务部门保留的集成混合云方案。Avnet已经提供了自己的工具和白牌服务以帮助合作伙伴在SoftLayer上部署VMware环境，IBM基础设施即服务平台最近被打包到Bluemix品牌下。但是这个过程要比去年IBM专门创建自己的服务部门更繁琐、成本更高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注以下公众号，获取更多精彩内容吧！&lt;/span&gt;&lt;/p&gt;&lt;center style=" box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://img03.iwgc.cn/mpimg/bc0f9789ba49e3199f5b4626da8cf6038a35d3e4"/&gt;&lt;/center&gt;&lt;blockquote style=" box-sizing: border-box; padding: 10px 20px; margin-top: 10px; font-size: 14px; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;CSDN大数据分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点，提供云计算和大数据技术、平台、实践和产业信息等服务。&amp;nbsp;&lt;br&gt;CSDN云计算作为云计算领域权威的自媒体，实时提供国内外云计算、大数据、虚拟化、数据中心、OpenStack、CloudStack、Hadoop、Spark、Container、人工智能、机器学习、智能算法等新闻、观点、技术和实践案例。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
      <pubDate>Tue, 21 Feb 2017 14:41:00 +0800</pubDate>
    </item>
    <item>
      <title>17.5W秒级交易峰值下的混合云弹性架构之路</title>
      <link>http://www.iwgc.cn/link/4743095</link>
      <description>&lt;div class="article-content"&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;每年的双11都是一个全球狂欢的节日，随着每年交易逐年创造奇迹的背后，按照传统的方式，我们的成本也在逐年上升。双11当天的秒级交易峰值平时的近10多倍，我们要用3-4倍的机器去支撑。但大促过后这批机器的资源利用率不高，到次年的双11会形成较长时间的低效运行。试想一下，电商交易有大促峰值，而阿里云有售卖Buffer，如果能充分发挥云计算的弹性能力，让资源可以两边快速腾挪，就可以解决资源浪费的问题了。把我们的交易单元可以部署在云上面，那么大促的时候我们只需要按照压测模型去云上构建一个符合能力的新单元即可，用完马上释放掉，这样无疑是最优雅的。专有云+公共云 的混合云弹性架构成为一种自然而然的选择，不但可以资源合理利用，降低成本，同时也锻炼了阿里人的的技术能力，为用户提供更优质的服务。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;有了架构思路，实现起来似乎也没那么容易。阿里的交易涉及几百个系统，他们之间的依赖错综复杂，如果能够把他们快速的搭建在云上？这次系统之间的依赖如何复杂，如果把他们的容量估算好，快速调整他们的容量水位？这就不得不提到下面的两个秘密武器了：一键建站和弹性容量交付&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 18px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1. 一键建站&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.1 背景&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站是在底层基础设施交付的基础上，快速地在一个空机房部署交易单元，使新机房迅速具备对外提供服务的能力。一键建站的逆过程叫一键下站，即迅速切除单元流量，释放所有单元内应用的物理资源。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;从架构的层面看，一键建站的基础是阿里电商体系的异地多活。从运维的角度看，一键建站是运维产品的升华，更是运维效率的核心体现。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站第一次被提出是在2014年，但由于系统多，依赖复杂，加上中间件的复杂性，当时新建一个单元需要耗时近1个月的时间，更是需要所有单元链路上的运维同学参与。去年，DB实现了一次完整意义上的一键建站，中间件的建站实现了半自动化，但是应用的建站过程仍需要很多运维同学的支持。今年，一键建站进行了重构，并提出一天（8小时）一单元的目标，在几乎不用运维同学参与的情况下，顺利支持了3个云单元的建站工作，最快一次耗时6小时建站。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.2 挑战&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;今年的双11单元架构是三地五单元，一中心四单元，也是第一次遇到同机房两单元。如何控制单元内的链路封闭，单元与单元、单元与中心的同步与可见性，是异地多活的大挑战，也是一键建站的难点。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;首先需要明确单元内部署什么。建站需要维护一份知识库，包括单元的数据库，中间件，统一接入，以及导购、商品、店铺、交易、会员等一百多个应用。需要知道每个产品的服务器配置，软件配件，容量需求，甚至是应用间链路依赖等相关信息。这份知识库会跟随日常运维操作，调用链路日志等不断更新。同时，一个完整单元不仅仅包含线上环境，还需包含预发环境与小流量(测试环境)，每套环境都有自己的一份知识库。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;其次是需要明确部署的每个步骤实现。单元内的每个产品，都需要明确部署的操作细节，以及产品之间的前后依赖。今年，一键建站第一次在云上实施，面对全新的服务器资源(ecs)，全新的网络资源(slb)以及全新的部署方式(docker)等，每个环节都需要技术落地。由此可见，一键建站是一个庞大的系统，几乎涉及所有的运维产品。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;在明确了建站数据与建站步骤的基础上，还需要有一套技术实现能将单元内所有产品相关的近四千个部署步骤串联起来，这就是建站系统。追求建站效率的同时，安全始终要铭记于心。建站的每个步骤，都需要考虑可能出现的突发情况以及应对策略。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.3 技术架构&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站是一个体系的构建，是要在原有运维产品的基础上进行升华，将相关产品的原子性服务联动起来，最终凝聚成一个按钮。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站涉及的单元产品种类繁多，相关操作保罗万象，而且变化极为频繁。如果为每类产品写死操作流程，那建站只会疲于代码，即使完成了代码，也只会是一次性的玩物。因此建站需要更多的考虑灵活性，在最终的技术实现上，将系统架构分为四个层次，原子服务、功能组件、组件编排以及流程调度。系统架构如下图：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321229zsRMec.jpg"/&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.4 原子服务&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;建站平台的能力来源于周边的运维产品，接入相关系统的服务，将最小粒度的一次服务调用称为一个原子操作。服务网关包装一系列原子操作，以提供上层业务调用。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;作为唯一的外部系统调用入口，服务网关还需要做统一的日志记录，业务链路跟踪以及故障告警等。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;对建站平台的效率要求，很大一部分最终会落在外部系统服务上。最具代表性的是服务器资源申请与docker镜像，这两条链路的背后，凝聚着很多人努力的心血。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.5 功能组件&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;功能组件，是将相关的原子服务进行整合，从而形成的一个个有业务含义的独立功能模块。比如创建服务器、添加帐号、创建vip、docker upgrade、应用启动、更新hsf路由等等，将近百个原子服务最终聚合成三四十个功能组件。组件的实现需要能保证幂等。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;功能组件需要遵循一定的规范，从而使得同一组件能被不同的应用，不同的流程复用。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.6 组件编排&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;组件编排是建站灵活性的核心。建站平台支持在web页面动态编排功能组件，从而组装成一个个可以运行的流程。单元内的每类中间件或应用都可能存在部署上的差异，通过服务编排，使每一类产品都能对应到一类流程。&amp;nbsp;&lt;br style="max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;建站需要涉及整套中间件以及一百多个单元应用，这些产品在部署启动上还存在先后链路依赖。去除弱依赖，将单元产品依赖描述成一张无环有向图，每个节点代表一个产品的部署流程。将整张图描述成一个流程，这个流程就是建站流程！&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; box-sizing: border-box; font-weight: 700; font-size: 14px; word-wrap: break-word !important;"&gt;1.7 流程调度&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;流程调度是建站稳定性的有力保障。流程调度负责建站流程的分布式执行，是流程引擎的一个实现，至少需要达到下述几点要求：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;高可用。服务器宕机不能影响流程执行；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;系统容错。下游系统异常诊断，自动重试；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;并发访问控制。流程节点不应该同时在多台服务器被调度；在结构上，流程调度可以分为流程实例管控、任务队列、任务调度、组件执行器与分布式协同组件等。每个节点按照自身的负载情况加载流程实例到本地任务队列，组件执行器负责每个组件的入參注入，出參收集以及反射调用，分布式协同保障同一时刻仅有一个节点在调度流程实例。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站流程是一个包含众多子流程的嵌套流程结构，建站时，流程调度需要同时执行上千个流程。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一键建站只是完成了最小单元的建站工作，如果想让这个单元支撑好大促的流量，还需要对这个单元进行容量评估和扩容，如何快速的评估各个应用的容量并自动扩容呢？这时就需要弹性容量交付出场了。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 18px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2. 弹性容量交付&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;如下图：&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321229rkJE64.jpg"/&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;今年弹性技术在实时容量评估算法上作了一定的改良，期初主要出于提升效率，最大程度地降低实施成本,与保障集群稳定性的目的: 更加智能，使用在线机器学习实时测算应用性能变化，并可作出简单的故障原因分析, 通过算法对各个单元的应用集群进行自然水位拉平.&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;如何用机器在无人介入的情况下，预测应用集群各个单元的性能；需要做很多事情：日常性能变化测量；应用发布性能变化测量；集群中单机的性能变化预测，与目标交易量下会有多少比例机器挂掉的预测，容量问题还是性能问题的判断等等等等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;为支持XX笔交易的业务目标，需要多少资源；或者说，现有XX些资源，最高可以支撑多高的交易量?&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;一个应用集群在什么样的物理资源利用率下稳定性与成本会是一个最佳配比?&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style="max-width: 100%; min-height: 1em; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;资源预算.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;我们先简单以一个在线web服务类应用进行分析，在线电商每天的流量波动与资源利用率是存在一定的关系的(当然也可以换成其它指标进行测算)，我们将两项指标叠加，呈散点图形态&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321229a3soPO.jpg"/&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;现在假设，我们设定资源利用率阀值为70%的cpu利用率，预测该应用集群的服务能力，我们利用上面呈现的散点图做一次拟合，延长趋势线，呈以下形态:&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321229e6vrTR.jpg"/&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;则求出，该应用极限能力在X%的资源利用率下的服务能力大致是Y.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;但实际场景中，情况要复杂得多，在不同压力下，随着物理机的利用率整体饱和度的上升，性能会有一定的损耗，将不同压力下测算的服务能力记录，并作一次回归，预测出目标压力下，大致损耗度，并用刚才计算好的服务能力减去目标压力下的损耗度即可，&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;哪下一个问题来了，应用集群的资源利用率多少为极限值？这里只是一个假定，每个应用集群的极限能力都不相同; 首先前文已经提到，由于各个应用集群布署的物理机坑位不同，有可能超卖，也有可能会与资源占用多的应用布署在同一个物理核内，超线程会带来一定的影响，而一个物理核通常分为两个逻辑核，是否一个物理核的总能力/2则为两项占用该物理核逻辑核上的能力；假定100%的资源利用率为满负荷，则两个逻辑核各分50%的能力相对合理?&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;但实际情况是，占用两个逻辑核的应用集群利用率，在容量层次不齐的宏观情况下，有的偏高，有的偏低，这就会出现资源抢占问题。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;如何识别某项应用集群合理的资源利用率是多少？ 我们需要做一些事情，即除了对整个应用集群作上文中讲到的资源测算，还需要对每台单机作能力测算，这里我们随便拟定一个值，如单机负载如果超过80%是不可承受的，则我们在整体全链路压测时，会对每台单机做实时的负载预测，看在目标交易量下，多少比例的机器会超过最大的承受能力，该集群的总qps会有出现多少比例的损耗。 这里假定我们认为不允许有机器出现这样的情况，则当某台机器预测值达到最大承受能力时，则认为当前集群能力的合理负载应该在多少。&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;根据上文的描述，我们可以直接拿到测算好的各个应用集群的容量配比进行在线备容即可.通过后续每次的压测，对各个应用集群的预期资源利用率进行逐步逼近，最终达到整体备容目标.&lt;/span&gt;&lt;/p&gt;&lt;p style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; min-height: 1em; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;正因为有了以上两个秘密武器，我们在双11之前就快速的做好了容量准备，同时双11一过，我们立刻对云资源进行一键下站，把资源归还到云的Buffer里，对公共云进行售卖。&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p style="max-width: 100%; box-sizing: border-box; min-height: 1em; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;作者简介：唐三、乐竹、锐晟、潇谦，阿里中间件技术团队。（责编／魏伟）&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/p&gt;&lt;hr style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;br style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;[SDCC 2017·上海站] 将于2017年3月17-19日登陆申城，三大技术峰会24位嘉宾，汇聚国内一线的互联网公司大牛，畅谈运维、数据库和架构的热门话题和技术热点，精益运维发起人&amp;amp;优维科技CEO王津银、MongoDB 大中华区首席架构师唐建法和华为软件API开放平台架构师李林锋等亲临现场。3月5日前门票八折优惠中，5人以上团购立减400元，详情点击左下角&amp;nbsp;&lt;span style="max-width: 100%; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;阅读原文 。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span style="max-width: 100%; font-size: 14px; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span style="max-width: 100%; color: rgb(0, 82, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="max-width: 100%; min-height: 1em; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;img src="http://wxrss.b0.upaiyun.com/1487321230SLa5xv.jpg"/&gt;&lt;/p&gt;&lt;/div&gt;</description>
      <pubDate>Fri, 17 Feb 2017 16:43:31 +0800</pubDate>
    </item>
  </channel>
</rss>
