<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>CSDN大数据</title>
    <link>http://www.iwgc.cn/list/1933</link>
    <description>CSDN分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点,提供云计算和大数据技术、平台、实践和产业信息等服务.</description>
    <item>
      <title>微信小程序的编程模式</title>
      <link>http://www.iwgc.cn/link/4278951</link>
      <description>&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;本文为&lt;/span&gt;&lt;span&gt;《程序员》2017年1月期&lt;/span&gt;&lt;span&gt;原创文章，未经允许请勿转载，更多精彩文章请订阅&amp;nbsp;&lt;/span&gt;&lt;span&gt;2017 年《程序员》&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;导读：&lt;/strong&gt;&amp;nbsp;“轻芒小程序+”是由轻芒团队提出的小程序解决方案，它将替内容创业者免费搭建属于自己的微信小程序。在进行“轻芒小程序+”和其他小程序应用开发的过程中，本文作者与其团队对当前正火热的小程序开发有了更为深度的理解与认识，进而有了本文。（这里还有一篇满载真诚的&lt;span&gt;微信小程序开发&lt;/span&gt;干货，点击查阅。）&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;文中蓝色字体均可&lt;span&gt;阅读原文&lt;/span&gt;获取详情。&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;从小程序诞生伊始，就有很多人开始研习其机理与特点，从源代码或整体架构的角度已经有很多不错的文章会令人受益。但理论是一回事，真正理解小程序，还需要实践，才能进一步理解其背后的想法，与已有平台的异同，以及如何去适应它，做出更有趣的小程序。&lt;/p&gt;&lt;p&gt;理解开发平台的特性，一个不错的角度就是从编程模式入手，看在这个平台上开发，需要如何书写和组织自己的代码，进而搞清楚三个问题：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="margin-top: 1.2em; margin-bottom: 1.2em; padding-left: 2em; max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;数据如何获取；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;界面如何呈现；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;交互如何传导。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;换而言之，就是从 MVC（Model-View-Controller）的视角去拆解这个平台的特性，从而理解其开发有何特点。&lt;/p&gt;&lt;h2 style="margin-top: 1.3em; margin-bottom: 1em; font-weight: bold; font-size: 1.4em; max-width: 100%; color: rgb(62, 62, 62); white-space: normal; widows: 1; border-bottom: 1px solid rgb(238, 238, 238); box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;数据如何获取&lt;/h2&gt;&lt;p&gt;程序的本质，可说就是数据的呈现和加工。所以，看一个客户端开发平台的基本能力，首先就要看能把哪些数据放在上面处理，有哪些局限？如果缺少了必要的数据获取方式，那对于开发者而言，巧妇也难为无米之炊。&lt;/p&gt;&lt;p&gt;从这点看，小程序提供的数据获取方式非常丰富，大概涵盖：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-top: 1.2em; margin-bottom: 1.2em; padding-left: 2em; max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;通过 HTTPS 请求去服务端获取数据。&lt;/strong&gt;支持 HTTPS 是最基本的，小程序对 HTTPS 有限制，除了要求通信协议是 HTTPS，出现的域名必须提前预设之外，还将应用层协议限定到了 JSON 格式下。这一点，可能比任何一个已有客户端平台都更为严苛。站在小程序的平台角度来看，通过这样的协议规定，对应用中流动的数据有了更强的管控能力；而对于开发者而言，则需要花些时间去调整自己的服务协议以便适应小程序的要求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;可以在本地文件系统上存取数据。&lt;/strong&gt;小程序提供了丰富的 API 供开发者在手机系统上存取文件。可用本地文件来做缓存、状态记忆等，为开发提供了便利。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;可以读写设备中的一部分信息。&lt;/strong&gt;小程序开放了一些 API，帮助开发者获得设备上的基本信息，比如手机型号、屏幕尺寸、网络状态等。较为有价值的是可以选择获取手机上的图片等多媒体文件，这给做图像应用提供了可能；并且，它还提供了罗盘、重力感应器、地理位置等信息，对开发者理解用户所处的环境大有裨益。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;从上面的介绍不难看出，小程序中的数据获取方式，和一般浏览器提供的相仿（也就是和 HTML5 应用能获取的信息），比原生的客户端更局限一些，但对于绝大多数的应用而言足够用了。&lt;/p&gt;&lt;p&gt;除此之外，小程序提供了微信生态中的一些数据，比如账号信息等。这对于微信庞大的生态而言，只是非常小的一部分数据，但却是开发小程序应用中最值得利用的数据。&lt;/p&gt;&lt;p&gt;举个例子，在其他平台上，如果想要获取微信的账号信息，需要通过一次用户授权。假如用户暂时不想提供，则会使程序呈现“未登录”状态，给整个服务的展开带来困难。而在小程序中，只要用户点开，就意味着完成了授权，开发者可以直接读取到小程序的账号信息，并同步到自己的服务端作为该用户的身份标识，从而实现“始终登录”的状态，使得后续服务可以更好地提供。&lt;/p&gt;&lt;p&gt;一份可行的示例如下：&lt;/p&gt;&lt;p&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(51, 51, 51); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(248, 248, 248);"&gt;&lt;span&gt;// 先调用登录接口，获得请求码&lt;br/&gt;&lt;/span&gt;wx.login({
 &amp;nbsp; &amp;nbsp;success: &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;(res)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;// 获取到请求码，继续请求用户的基本信息&lt;/span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;var&lt;/span&gt; code = res.code
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;wx.getUserInfo({
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;success: &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;(res)&lt;/span&gt; &lt;/span&gt;{ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;// 获取到了加密的用户信息，去服务端解密并存储&lt;/span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;var&lt;/span&gt; userData = res.encryptedData &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;var&lt;/span&gt; iv = res.iv
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;wx.request({
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;url: &lt;span&gt;'https://my_account/...'&lt;/span&gt;,
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;data: {
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;code: code,
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;user_data: userData,
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;iv: iv
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;},
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;success: &lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(res)&lt;/span&gt; &lt;/span&gt;{ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;// 在服务器上，解析并生成自己的账号验证信息&lt;/span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;var&lt;/span&gt; user = res.data.user &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;var&lt;/span&gt; token = res.data.token &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;// 并且还可以存在本地存储上，供下次打开使用&lt;/span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;wx.setStorage({
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;key: &lt;span&gt;'my_token'&lt;/span&gt;,
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;data: token
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;})
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;})
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;})
 &amp;nbsp; &amp;nbsp;}
});&lt;/code&gt;&lt;/pre&gt;&lt;h2 style="margin-top: 1.3em; margin-bottom: 1em; font-weight: bold; font-size: 1.4em; max-width: 100%; color: rgb(62, 62, 62); white-space: normal; widows: 1; border-bottom: 1px solid rgb(238, 238, 238); box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;界面如何呈现&lt;/h2&gt;&lt;p&gt;小程序刚发布的时候，一片人开始惊呼 HTML5 的时代就要到来了，因为小程序在界面层使用了 HTML/CSS/JavaScript 这套 HTML5 的技术栈。但很快，随着聪明的程序员们对小程序的理解进一步加深，就发现小程序所说的 HTML/CSS/JavaScript 和 HTML5 中的完全不是一回事，其差异基本等同于 Java 和 JavaScript。&lt;/p&gt;&lt;p&gt;在小程序中，和 HTML 对应的是 WXML，保留下来的只有 HTML 的概念，而传统的&lt;code style="margin-right: 0.15em; margin-left: 0.15em; padding-right: 0.3em; padding-left: 0.3em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; white-space: pre-wrap; border: 1px solid rgb(234, 234, 234); border-radius: 3px; display: inline; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(248, 248, 248);"&gt;&amp;lt;div&amp;gt;&lt;/code&gt;、&lt;code style="margin-right: 0.15em; margin-left: 0.15em; padding-right: 0.3em; padding-left: 0.3em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; white-space: pre-wrap; border: 1px solid rgb(234, 234, 234); border-radius: 3px; display: inline; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(248, 248, 248);"&gt;&amp;lt;a&amp;gt;&lt;/code&gt;标签都完全被抛弃了。和 Facebook 的 React 类似，小程序引入了自己的 HTML 标签，它和&amp;nbsp;&lt;code style="margin-right: 0.15em; margin-left: 0.15em; padding-right: 0.3em; padding-left: 0.3em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; white-space: pre-wrap; border: 1px solid rgb(234, 234, 234); border-radius: 3px; display: inline; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(248, 248, 248);"&gt;&amp;lt;article〉&lt;/code&gt;、&lt;code style="margin-right: 0.15em; margin-left: 0.15em; padding-right: 0.3em; padding-left: 0.3em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; white-space: pre-wrap; border: 1px solid rgb(234, 234, 234); border-radius: 3px; display: inline; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(248, 248, 248);"&gt;&amp;lt;section&amp;gt;&lt;/code&gt;&amp;nbsp;这样的语义标签不同，小程序中的标签更像是传统客户端开发中的组件（或者叫控件），每个组件都有自己背后的职能和使用方式。比如：如果需要展示图片，就只能用标签，其他的都无法承载。而如果需要提供可选的文本，则只能使用&lt;code style="margin-right: 0.15em; margin-left: 0.15em; padding-right: 0.3em; padding-left: 0.3em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; white-space: pre-wrap; border: 1px solid rgb(234, 234, 234); border-radius: 3px; display: inline; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(248, 248, 248);"&gt;&amp;lt;text&amp;gt;&lt;/code&gt;标签等。&lt;/p&gt;&lt;p&gt;这样的方式带来最大的问题就是传统的 HTML 页面都无法在小程序中呈现（而小程序正好，没提供类似 WebView 的客户端控件）。比如有大量的内容网站，其文章内容都是存储为一个 HTML 片段，无法直接呈现在小程序中。如果需要展示，一个思路是构建中间服务，将 HTML 转译成一种更简单利于渲染的中间格式数据，然后，在小程序端把中间格式的数据转换成小程序的标签进行呈现。我们在做“轻芒生活”的时候，正好设计并实现了一个转义服务，将任意一个 HTML 页面转换成中间格式（内部名是 RAML），解决了内容性 HTML 页在小程序上的呈现问题，如图 1 所示。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/eL7YiacLdzwp5YUIX7M6bEdPCf04AxpicoNlVCpOZeX4zQYpReO9M4SkwMiamMACV1ribNDKNvdic8pzricqUPs8tTtw/640?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;span&gt;图 1 &amp;nbsp; 在小程序中呈现 HTML 内容页&lt;/span&gt;&lt;/p&gt;&lt;p&gt;和 HTML 相比，小程序的 WXSS 算是比较完整地保留了 CSS 的特征，这一点还蛮出乎意料。WXSS 在语义上最大的不同，一是在于它支持了相对尺寸单位 rpx（responsive pixel），每 750rpx 等价于当前设备的屏幕宽度，它的引入，把那种繁复的屏幕尺寸适配变得简单了不少。而和 CSS 的另一个不同是它更像传统控件样式用法，不支持 CSS3 那么多的选择器，使用中更多的是一个控件一个 class。&lt;/p&gt;&lt;p&gt;小程序中虽然支持 ES6 标准的 JavaScript，但窗口级的 JavaScript 却完全被废弃掉了，开发者无法用 JavaScript 去调用 window、document 对象来修改界面元素完成逻辑。小程序中的 JavaScript 其实直接对应 Node.js 的用法，用来完成后台业务逻辑，而不是直接控制交互。小程序的这个设计，使其可以用到 Virtual Dom 的方式来渲染界面，让界面数据更新时的性能优化成为可能，但付出的代价就是少了窗口级 JavaScript 的那层胶水黏合，使得很多功能的开发变得极其呆板和繁复。&lt;/p&gt;&lt;h2 style="margin-top: 1.3em; margin-bottom: 1em; font-weight: bold; font-size: 1.4em; max-width: 100%; color: rgb(62, 62, 62); white-space: normal; widows: 1; border-bottom: 1px solid rgb(238, 238, 238); box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;交互如何传导&lt;/h2&gt;&lt;p&gt;所谓交互的传导，是当用户和界面发生交互时，平台框架通过何种方式告诉业务层，并将处理后的变化呈现回交互界面上。如果把 WXSS + WXML 绘制的页面看成“前端”，把 JavaScript 撰写的业务逻辑看成“后端”，你会发现，小程序的前后端交互特别像 Web 1.0 的模式，前端把交互行为封装成事件（event）发送到后端，后端处理完成后，通过 setData 方法将数据回传到前端，如图 2 所示。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/eL7YiacLdzwp5YUIX7M6bEdPCf04AxpicoicUqckaqTEnnXbLAXOjDxiatvhFkT0WWwzDrxYpFAjWIBRv93yPI3Www/0?"/&gt;&lt;br/&gt;&lt;span&gt;图 2 &amp;nbsp;小程序的交互传导&lt;/span&gt;&lt;/p&gt;&lt;p&gt;小程序提供的 Events，基础的有类似单击、长按、触摸、滑动等，对于视频播放器等控件，还有监听播放、暂停等。这些事件比较基础，没有更高级的手势、多点触控等相关事件，但也还足够让开发者具体了解用户的输入，进而做出响应。 而小程序给界面响应的唯一方式，是通过 Page 中的 setData API 对界面上的数据进行更新，小程序会比较两次调用期间数据的变化，来决策需要更新哪部分的交互界面。&lt;/p&gt;&lt;p&gt;举个实际的例子，假设开发者需要做一个滑动切换页面的效果，在小程序中该如何实现？首先，是将变量数据引入渲染页面：&lt;/p&gt;&lt;p&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(51, 51, 51); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(248, 248, 248);"&gt;&lt;span&gt;&amp;lt;&lt;span&gt;view&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;"page"&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;"current-page"&lt;/span&gt; 
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;style&lt;/span&gt;=&lt;span&gt;"left:{{distance}}rpx;"&lt;/span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;bindtouchstart&lt;/span&gt;=&lt;span&gt;"movePage"&lt;/span&gt; &lt;span&gt;bindtouchcancel&lt;/span&gt;=&lt;span&gt;"movePage"&lt;/span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;bindtouchmove&lt;/span&gt;=&lt;span&gt;"movePage"&lt;/span&gt; &lt;span&gt;bindtouchend&lt;/span&gt;=&lt;span&gt;"movePage"&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，distance 是一个模版参数，它初始值为 0，表示移动的距离。通过 bindtouchstart 等函数绑定上 JavaScript 的方法，将事件回传。&lt;/p&gt;&lt;p&gt;&lt;code class="" style="margin-right: 0.15em; margin-left: 0.15em; padding: 0.5em; max-width: 100%; font-size: 0.85em; font-family: Consolas, Inconsolata, Courier, monospace; overflow: auto; border-radius: 3px; border: 1px solid rgb(204, 204, 204); color: rgb(51, 51, 51); box-sizing: border-box !important; word-wrap: break-word !important; display: block !important; background: rgb(248, 248, 248);"&gt;movePage: &lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &amp;nbsp; &amp;nbsp;&lt;span&gt;var&lt;/span&gt; status = {
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;needUpdate: &lt;span&gt;false&lt;/span&gt;,
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;distance: &lt;span&gt;0&lt;/span&gt;
 &amp;nbsp; &amp;nbsp;} &amp;nbsp; &amp;nbsp;&lt;br/&gt; &amp;nbsp; &amp;nbsp;&lt;span&gt;// 处理各种事件，计算是否需要刷新，和移动方向&lt;/span&gt;
 &amp;nbsp; &amp;nbsp;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;"touchstart"&lt;/span&gt; === event.type) {&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// 开始计算移动&lt;/span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;...
 &amp;nbsp; &amp;nbsp;} &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;"touchend"&lt;/span&gt; === event.type) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// 判定移动的距离是否足够.&lt;/span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;...
 &amp;nbsp; &amp;nbsp;} &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;"touchcancel"&lt;/span&gt; === event.type) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// 被打断就算了.&lt;/span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;...
 &amp;nbsp; &amp;nbsp;} &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;"touchmove"&lt;/span&gt; === event.type) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// 计算移动距离&lt;/span&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;...
 &amp;nbsp; &amp;nbsp;} &amp;nbsp; &amp;nbsp;&lt;br/&gt; &amp;nbsp; &amp;nbsp;&lt;span&gt;// 根据移动的距离，来更新界面&lt;/span&gt;
 &amp;nbsp; &amp;nbsp;&lt;span&gt;if&lt;/span&gt; (status.needUpdate) {&lt;br/&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;this&lt;/span&gt;.setData({
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;distance: status.distance
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;})
 &amp;nbsp; &amp;nbsp;}
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而在 JavaScript 一端，则捕获事件、计算偏移量，然后将新的偏移量送到前端界面。&lt;/p&gt;&lt;p&gt;从这里可以看到，小程序的交互是典型的单向模式，前端回传事件，数据单向地推到前端，而不是通过类似“变量”、“状态”等方式来告知。这样的模式下，开发者对界面变化的控制往往不可能太精准，整个核心都依赖于小程序对两次数据变化的 diff 计算，这将会最终影响整个交互的性能。&lt;/p&gt;&lt;h2 style="margin-top: 1.3em; margin-bottom: 1em; font-weight: bold; font-size: 1.4em; max-width: 100%; color: rgb(62, 62, 62); white-space: normal; widows: 1; border-bottom: 1px solid rgb(238, 238, 238); box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;小程序开发模式的特点&lt;/h2&gt;&lt;p&gt;至此，我们可以来总结一下小程序开发的一些特点了。整体来看，小程序是借了 HTML5 的技术栈，行了传统客户端开发的模式，这一点和 React 等平台会比较相近，可以视为 HTML5 的一个新分支。&lt;/p&gt;&lt;p&gt;从设计思路看，小程序做了大量的“限制”，最大的限制是开发者其实无法通过 JavaScript 这样的编程语言直接对界面进行控制，而是通过数据驱动来间接实现。这对于缺少开发经验的人而言，是有益的事情，因为降低了理解的门槛，但对于复杂的应用来说，这个模式开发起来比较呆板，往往是一个变化多处修改，增加了理解代码的成本。&lt;/p&gt;&lt;h2 style="margin-top: 1.3em; margin-bottom: 1em; font-weight: bold; font-size: 1.4em; max-width: 100%; color: rgb(62, 62, 62); white-space: normal; widows: 1; border-bottom: 1px solid rgb(238, 238, 238); box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;开发小程序的坑&lt;/h2&gt;&lt;p&gt;开发小程序的日子，也是一个踩坑的历程。简单总结，小程序中的坑大概来自这几个方面：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="margin-top: 1.2em; margin-bottom: 1.2em; padding-left: 2em; max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Web 兼容性。&lt;/strong&gt;小程序引入了 HTML/CSS 作为技术栈，并在其基础上进行了定制。很多开发中的问题都来自于“定制”，因为你并不知道哪部分是被定制，哪部分是被继承了。比如，你用了一个 CSS 语法，发现并不生效，或者效果和浏览器中的不一样，于是，只能换一个写法，结果很有可能又会继续发现，这个新的写法可能效果也不对，于是只能继续尝试，如此反复，可能会消耗大量的时间。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;开发环境不稳定。&lt;/strong&gt;小程序的开发，是基于微信自制的 IDE，但当下，IDE 的稳定性、易用性都非常差，时常出现 Bug，你以为是程序写错了，但其实，是 IDE 的 Bug，重启一下 IDE，一切都迎刃而解了。于是，当你日后开发小程序时出现某种异样，先重启 IDE，再看问题还在不在，也许是种更节省时间的方式。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;缺少真机调试环境。&lt;/strong&gt;小程序的运行时其实就是微信，微信几乎没提供任何真机上的调试工具（也不能说完全没有，有一个只能在真机上瞪着眼睛看的日志框）。在模拟器中调试好的程序，可能在真机上运行起来并不如预期。比如，我们碰到过真机上白屏、位置错乱、动画效果不对，以及 Android 上至今还不能运行等问题。这对于稍微复杂的程序而言，颇为梦魇，想做一些细粒度的调整和优化，基本只能靠猜。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;闭源且缺少学习资料。&lt;/strong&gt;小程序整体上是闭源状态（虽然模拟器和 IDE 部分可以通过反编译来看），且缺少足够的学习资料。如果一旦碰到控件如何使用、为什么这么用不对之类的问题，就只能靠不停地试来解决，也需要耗费大量时间。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;简而言之，作为一个新的开发平台，微信小程序从本身的稳定性，以及配套的工具链上都不算完善。对于早期开发者而言，需要耗费额外的精力去尝试和探索，但这也许就是一个新平台的价值和代价吧。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;作者简介： 范怀宇，轻芒联合创始人，毕业于清华大学，前豌豆荚技术负责人，专注于移动开发十余年，曾出版《Android 开发精要》。爱研习好代码和设计，相信好的产品能改变生活，好阅读乐分享。&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;责编：唐小引，技术之路，共同进步。欢迎技术投稿、给文章纠错，请发送邮件至tangxy@csdn.net。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Tue, 10 Jan 2017 17:22:52 +0800</pubDate>
    </item>
    <item>
      <title>2016年12月全球浏览器市场份额并年终总结：IE狂跌，Chrome出彩</title>
      <link>http://www.iwgc.cn/link/4278952</link>
      <description>&lt;p&gt;摘要： 根据市场研究公司Net Applications的最新数据显示：截止2016年12月，Chrome浏览器已经获得56.43%的市场份额，而IE系列则仅有20.84%。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;市场研究公司Net Applications每月都会对外公布操作系统与浏览器的市场份额统计，方便我们了解当前的PC操作系统市场分布情况以及相关趋势。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjU5eSrLgI17xjCTYg5h9A1c833HzSTevqStTSkUTk3elicfqibTxdFKqygYnaD5jrZ9iccicfnic1qcZkQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Chrome浏览器在2016年间涨势良好，猛涨了接近20个百分点，目前已奠定其领导地位不可动摇；IE浏览器则一路下滑，跌幅也是20多个百分点。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjU5eSrLgI17xjCTYg5h9A1clEx8qk8N5ZITeU91IGzzOqIdBic18QALA3Lh01l4eZRxEhaFdraNZXA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;想当年作为微软捆绑的浏览器，IE也曾笑傲群雄，并一度达到90%以上的市场份额。但IE的用户体验和安全问题一直为人诟病，再加上屡屡涉及内核更改的更新让人烦不胜烦，有越来越多的用户转投向其竞争对手Chrome和Firefox，最终凭着出色表现，Chrome一举拿下霸主地位，IE的衰落也终成定局。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjU5eSrLgI17xjCTYg5h9A1ccOxG48cHCjFJBvaY6Bq8kI3drpttk0NqBLNibuDVN3sZhy9zdaFLD6Q/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;虽然微软仍在进行新的尝试，并用Edge试图拉回市场份额，但短期内效果并不明显。再加上习惯的强大惯性，目前Edge浏览器的市场前景并不乐观。不过，就算现在已经成了明日黄花，由于金融业和政府机构需要相对稳定的环境，IE（甚至低版本的IE）在中国仍有不少的用户量。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjU5eSrLgI17xjCTYg5h9A1cHGq76HBPdIOAf5616cuagKCL7icWZOJ81CzK1sD4h9GL9IekXqTTMqA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;前十名中，Chrome有4个版本上榜，分别位居第一、第二、第五和第九；Firefox有一个版本上榜，位列第四；Safari有一个版本上榜，位列第十吊在榜尾；IE虽有3个版本上榜，但总份额仅为18.98%；另外，微软的Edge 14总份额为4.12%。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjU5eSrLgI17xjCTYg5h9A1cB1GeZyaAcTicMmELeZDIhdW3FV3DwVBgtxUOvbSYQjXUNUxqOkOWTrQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;（文/孙薇 责编/钱曙光）&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Tue, 10 Jan 2017 17:22:52 +0800</pubDate>
    </item>
    <item>
      <title>南京大数据技术Meetup第七次活动</title>
      <link>http://www.iwgc.cn/link/4278953</link>
      <description>&lt;p&gt;2016年1月14日下午13:30-17:30，&lt;strong&gt;&lt;span&gt;南京大数据技术Meetup第七次活动&lt;/span&gt;&lt;/strong&gt;将在&lt;span&gt;南京市栖霞区仙林大道163号南京大学（仙林校区）计算机科学技术楼221多功能报告厅举办，乘车指南：南京地铁2号线&lt;strong&gt;&lt;span&gt;南大仙林校区站&lt;/span&gt;&lt;/strong&gt;下车直达。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;活动内容&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;杨俊——星环信息科技(上海)有限公司，资深机器学习研发工程师&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;通用机器学习平台Midas的技术架构介绍&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;吕骏——深圳纳实大数据技术有限公司，总经理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;大数据技术下的供给侧库存优化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: square;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;中场茶歇&amp;amp;参展海报自由交流(30分钟，请有意参展的单位与我们联系，联系邮箱gurongwalker@gmail.com)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;顾荣——南京大学计算机系助理研究员，Alluxio项目PMC;member&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;基于Alluxio的Spark;DataFrame/RDD性能调优技术&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;陈奎——北京瀚思安信科技有限公司，高级研发工程师&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;大数据安全分析引擎的设计与实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;本活动免费参加。请提前在线报名并后台审核，活动采用扫码入场，凭借通知短信或邮件入场（报名前一天统一通知）；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据会场要求, 请务必认真填写报名问题，主办方有权取消恶意填写者的报名资格；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果希望分享相关话题或赞助后续活动, 请发送邮件到 gurongwalker@gmail.com。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;报名方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;扫描以下&lt;strong&gt;二维码&lt;/strong&gt;或者点击底部&lt;strong&gt;阅读原文&lt;/strong&gt;进行报名。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjU5eSrLgI17xjCTYg5h9A1cgkHBQ0m4svicibj3jNIUEQXtWoBHFvmpv9TBib96nMbmzNPb2sBXAic7Pw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;br/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;【阅读原文】立即报名！&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 10 Jan 2017 17:22:52 +0800</pubDate>
    </item>
    <item>
      <title>链家网大数据平台枢纽——工具链</title>
      <link>http://www.iwgc.cn/link/4263562</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt;&lt;span&gt;本文为&lt;/span&gt;&lt;a target="_blank" style="line-height: 27.2px; color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;《程序员》&lt;/a&gt;&lt;span&gt;原创文章，未经允许不得转载，更多精彩文章请订阅&lt;/span&gt;&lt;a target="_blank" style="line-height: 27.2px; color: rgb(51, 122, 183); max-width: 100%; box-sizing: border-box; word-wrap: break-word !important;"&gt;2017年《程序员》&lt;/a&gt;&lt;span&gt;。&amp;nbsp;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;作者：&lt;/strong&gt;&lt;span&gt;吕毅，链家网平台架构师。目前负责链家网大数据平台，之前曾负责链家网基础服务平台建设。&amp;nbsp;&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;责编：&lt;/strong&gt;&lt;span&gt;郭芮，关注大数据领域，寻求报道或投稿请联系guorui@csdn.net。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;链家网于2015年成立大数据部门，开始构建基于Hadoop的技术体系，初期大数据部门以运营数据报表需求、公司核心指标需求为主。随着2015年链家网发力线上业务，toB与toC业务齐头并进，数据需求量激增的情况也随之在2016年突显，数据量增至PB级。我们开始思考如何改变现状，如何高效支撑未来可预见的众多数据需求。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;基于ROLAP技术的报表平台&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;链家网大数据部门成立之初，面对着零散的数据需求，最早期的办法是配置定时任务跑脚本，将结果通过邮件方式发送给需求方。2015年期间，随着运营数据需求的增加、希望查阅数据的人员增多，邮件的方式不方便人员间信息传递，并且查找历史数据也不方便，在技术上也因数据相关人太多导致邮件发送阻塞。因此，考虑到运营数据需求、公司核心指标需求相对固定，并且维度可枚举，特在2015年基于ROLAP技术方案，搭建了早期的报表系统。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhn2FyqBxuEpgnic0a5roFA9uwiate8safTwOWbAmyfCKffDCsia7obRp03EV5fccTiajL6ErToQ4szqQ/640?wx_fmt=png"/&gt;图1 链家网早期的报表系统&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;早期的报表系统，由数据开发工程师提交数据任务，通过配置Oozie定时任务，定时的基于Hive数据做ETL过程，将报表系统所需的数据推入关系型数据库（MySQL）中。该系统从接收需求到报表系统里看到数据，需要比较长的一段时间过程，涵盖过程如下：&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;沟通需求，由数据开发工程师理解数据需求；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对接数据，将数据源对接入HDFS；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;构造数据，将数据加工处理到Hive中，逐层由STG到ODG，再到DW层；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据任务，数据开发工程师根据需求方需求、DW层数据，编写基于Oozie的调度任务；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;发布任务，将Oozie调度任务发布到线上，定时执行，数据运行结果将被推送到MySQL；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据展示，由自研的报表系统，根据需求方展示需求，添加维度筛选能力，开发一些对结果数据的再加工程序，部署上线。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;流程过程较长，角色间传递信息较多，前后依赖太强，都是制约当时报表系统快速产出数据的根本问题。该系统在之后的迭代中，通过增加选取MySQL数据、自助勾选维度，实现了自助报表系统，命名为“地动仪”并服务至今。然而，流程长、传递信息多、依赖强的问题依旧没有根本解决，对于逐渐增多的数据分析需求，更不能及时响应。&amp;nbsp;&lt;/p&gt;&lt;p&gt;地动仪在一定程度上解决了邮件方式的弊端，提供Web界面化的查询，支持历史查询和多人使用。但对于非订制化需求、数据探索需求、数据分析需求支持的力度并不好。我们开始规划更好的数据分析平台服务。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;链家网大数据平台的诞生&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;大数据工作划分，通常分为大数据应用、大数据平台两大部分。常见的大数据应用形态有数据挖掘、数据分析、个性化推荐、数据报表等，大数据应用形式相对更多样，可以根据业务不同而有具体的大数据应用产品。大数据平台，在一家公司中则应相对统一，以方便做好公司统一的数据接入规范、统一的数据管理机制、统一的数据处理能力等，做好数据管控。&amp;nbsp;&lt;/p&gt;&lt;p&gt;因此，在对历史大数据架构进行梳理后，链家网将原有大数据部门工作细化，将大数据应用交由业务线团队或其他技术团队承担，便于业务线开展多样化的数据工作，同时将大数据部门聚焦于构建公司统一的大数据平台，负责公司内各部门数据相关需求的统一规划与实现，建设公司统一的数据仓库与数据服务。至此，链家网大数据平台团队诞生，我们开始着手建立平台，支持好未来公司内对数据使用上的各类需求。&lt;/p&gt;&lt;p&gt;在2016年中期，通过梳理各部门数据需求，将数据需求分类为：数据探索需求、报表需求、数据分析需求、数据API需求这四类。为满足这些数据需求，我们相应规划了下面这些数据产品：&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;AdHoc系统：解决数据探索性需求，基于SQL查询，查询速度要求高；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;地动仪：解决报表需求，承接较固化报表需求、公司级报表需求；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;BI产品：解决数据分析需求，支持多维查询，支持数据分析中常用的下钻、上卷等功能；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据API：解决数据API需求，大数据API统一出口，支持各部门的格式化数据获取。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;结合数据产品层面的规划，大数据平台在技术工作上做了重新规划，技术工作上划分出了四个部分：平台服务、数据管理、工具链与集群。其中平台服务包含报表系统、BI系统与大数据API；大数据工具链包括OLAP引擎、即席查询AdHoc系统、调度系统三部分；大数据集群层面除集群性能、稳定性工作外，还包括集群安全、集群资源隔离两部分；贯穿服务、工具链、集群三层的数据管理部分，更加关注数据治理，内含元数据管理、指标管理、数据权限管理三大数据管理工作。技术工作划分情况如图2：&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhn2FyqBxuEpgnic0a5roFA9QSC5bbibjfmxsyMSzF63SiaWx1AMibwF2oToTYhd4XdrURHxibOYvsoyWg/0?"/&gt;图2 链家网大数据平台&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;大数据平台的建设过程，是由下而上逐步完成的。首先要有Hadoop集群，在有HDFS与Hive后，才能开展数据接入工作，才能基于集群建设工具链；当工具链部分的OLAP引擎构建好，才有上层BI、报表系统和数据API，只有AdHoc能力构建好，才能提供基于SQL的数据探索平台，工具链中特别需要建设好调度系统，才能在实现好数据ETL任务的同时，管控数据流向与数据关系。最后则是服务层面的建设，重心在于迎合需求的同时，服务做得更加易用。数据管理系统会穿插于整个大数据平台中。&lt;/p&gt;&lt;p&gt;大数据平台中衔接服务与集群的枢纽——工具链，正是整个平台能力的传送带，它肩负着将大数据能力输送到上层服务层的重任，也承担着上层多项服务被使用时的数据能力支持。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;建设大数据平台枢纽——工具链&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;大数据平台内部工作，完全可以简单划分为集群与服务两部分，为何要在它们之间构建一层工具链层呢？由图1可以看到，原大数据架构中，因产品层面单一，数据从收集入HDFS后，数据流向单一，均由Oozie调度任务从Hive获取数据，并向上推送。考虑到平台服务层面的多个产品形态，数据流向也需扩展才能满足产品所需能力，而数据流的管理与集群工作强制规划在一起，太过生硬。故全新开辟一层工具链层，通过借助集群能力，通过或使用开源或自研，来扩展数据转换与输出的能力，提供更多种的数据流形式，以满足上层数据服务需求。&lt;/p&gt;&lt;p&gt;对于工具链层面的设计，我们按照数据流向设计了下图中的工具链结构：&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhn2FyqBxuEpgnic0a5roFA9tl2MUiceNiafXNAl0BKicFIYOsVFpChMHh82VP4blffsxaS9LqnxKIMeQ/0?"/&gt;图3 大数据工具链数据流向规划&lt;/center&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据探索类需求&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;数据探索类需求，即数据查询需求，若都基于Hive采用MapReduce运算，速度上会大大影响用户的使用体验，然而即席查询AdHoc技术方面，Facebook开源的基于内存计算的Presto进入了我们的视野，考虑到Presto与Hive均为Facebook开源技术，在SQL兼容性方面通用性更强，特对Hive、Presto、Spark在SQL on Hadoop方面进行测试对比：&lt;/p&gt;&lt;blockquote style=" margin-top: 10px; margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;数据样本：2000万行数据集、7000万行数据集；&amp;nbsp;&lt;br/&gt;SQL样例：简单SQL（select count）、复杂SQL（线上真实SQL）；&amp;nbsp;&lt;br/&gt;机器资源：&amp;nbsp;&lt;br/&gt;Hive：3台机器；&amp;nbsp;&lt;br/&gt;Spark：4个节点；&amp;nbsp;&lt;br/&gt;Presto：3个节点，每节点最大内存4G。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;通过多次测试结果显示，在处理速度方面，Presto &amp;lt; Spark SQL &amp;lt; Hive，大部分情况下，Presto时间开销上远少于Hive SQL，速度优势稍微好于Spark SQL。考虑到公司内探索性数据查询需求由人发起，数量可控，Presto技术选型完全满足我们对响应速度的要求。故采用Presto引擎搭建AdHoc平台，AdHoc的Web界面我们通过自研，除基础的数据查询功能外，实现了数据导出、转发、生成报表等功能，其中生成报表功能与调度系统打通，将数据探索工作成果进一步延伸，由AdHoc发起的调度任务，则是使用MapReduce离线运算。关于Presto UI部分，Airbnb开源的Airpal界面简洁清晰，也是不错的选择。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhn2FyqBxuEpgnic0a5roFA9iciaj9N1L0E7D6Bic9b9rL7A0iaHFdqtN06S4VQwROJCVsqva8Ikic0LQMg/0?"/&gt;&lt;br/&gt;图4 Airbnb开源的基于Presto的UI界面&lt;/center&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据分析类需求&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;数据分析性需求按照工作方式细分，还可以分为非技术人员使用Web工具分析数据、技术型人员直连Hadoop集群提交分析任务两种类型。前者更多是运营、研究院、产品线数据PM等角色使用，后者则是做数据挖掘、推荐的工程师们在使用，对于工程师们，我们内网开放集群运算能力，供工程师们提交任务，通过集群中的资源隔离保障大家的任务高效运行。工具链中，则更关注前者的分析类场景，如何方便地满足。&lt;/p&gt;&lt;p&gt;非技术人员的数据分析需求，相对于比较固话的数据报表型需求，指标、维度的组合上希望灵活性更高，并且有着下钻、上卷分析数据的需求，更多维的查询数据。因为分析工作一般是连续查询数据，所以对于查询速度也有一定的期望。&lt;/p&gt;&lt;p&gt;鉴于此，我们考虑通过预置数据的方式，通过空间换时间，来解决查询速度问题。对于多维查询需求，我们考虑通过构建多维Cube方案解决。这正是MOLAP解决数据查询问题的方式，而MOLAP方案的有限技术选型中，我们更看好Apache Kylin项目。&lt;/p&gt;&lt;p&gt;Apache Kylin项目的一些特性，匹配我们的数据需求以及我们当时的现状。数据需求已经梳理清晰，要快、要多维查询，Kylin项目对于已创建了Cube并构建好数据的数据集上，提供亚秒级的快速查询。并且Kylin还提供工具方便构建Cube、提供API方便对接上游BI产品。另一方面我们当时的现状是，海量数据库方面我们拥有稳定且调优过的HBase集群，这恰巧是Apache Kylin所依赖的数据库选型。综合这些情况，我们通过调研Kylin系统自身能力、Kylin与Sarku的对接情况，以及有Apache Kylin研发团队成员现场交流，逐步启动了基于Kylin的MOLAP引擎构建。预计不久我们将以Kylin为基础，为BI产品、数据API两项数据平台服务提供数据查询能力，以满足公司内的多维数据分析需求。&lt;/p&gt;&lt;p&gt;通过MOLAP建设，与原有地动仪ROLAP相辅相成，面向公司内有数据分析诉求的同事，提供更全面的数据分析平台。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;调度系统&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;调度系统，是大数据工具链的核心环节，乃至是大数据平台化的基础。数据ETL任务完全基于任务调度在有计划地执行，数据任务的关系、数据血缘也需要基于调度系统的能力来自动化构建。&lt;/p&gt;&lt;p&gt;在链家网大数据平台建设之初，最先对原有的Oozie调度系统进行调研分析，发现Oozie与Hadoop集群绑定太过紧密，任务间的状态传递必须依赖HDFS中的文件状态来传递任务状态，这导致一些数据任务需要我们用Hack的手段处理，例如我们的任务是定时“先将Hive数据导到MySQL，再运行一个远程服务器脚本对MySQL统计数据，再将脚本统计的结果发送到xxx@lianjia.com邮箱”，这样的需求，整个过程没有产生HDFS文件的必要，但在使用Oozie时，我们不得不在每一步执行完后在HDFS中创建文件以便传递信息。&lt;/p&gt;&lt;p&gt;我们已经可预见未来数据任务需求会有所增加，随之而来的数据任务种类也将会扩充，若不做调度系统上的改变，大数据平台的数据任务能力，将会受限于Oozie的使用场景，这与平台设计理念不符，工具应当更好的支持平台建设，而非阻碍平台发展。所以在那时，我们决定自研大数据调度系统，在参考了行业内一些调度系统解决方案的同时，我们梳理了现有的任务种类与可能的未来需求，逐步排期的实现调度系统必须的两大环节：调度环节、执行环节，并且抽象的设计了他们之间的传输协议，为未来扩展新型执行单元提供了可能。&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhn2FyqBxuEpgnic0a5roFA9aicJDGFhIk2mm2D7AHXgFHqW5AB3EyIXzF0TNwI0KicQyGHGybv8NSHA/0?"/&gt;图5 调度系统前端功能&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style=" max-width: 100%; box-sizing: border-box; color: rgb(51, 51, 51) ; ; ; ; ; ; "&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhn2FyqBxuEpgnic0a5roFA9AsGhYvzW11YtHiaPILiadibur8YB8wTj8wMJ43x8B8Id9wduVfibmv7cibQ/0?"/&gt;图6 调度系统后端能力&lt;/center&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;工具链作为数据驱动纽带，工具化的为上层平台服务提供各类能力，上层平台服务包装大数据平台能力，开放给用户使用。围绕着工具链的建设，大数据平台较改造前的数据加工模式，提供了更丰富的上层数据服务。通过Apache Kylin技术构建MOLAP引擎，与原有的ROLAP引擎相辅相成，搭配基于Presto的AdHoc服务，提供了一站式的快速数据查询、分析平台，并且提供了统一的大数据API，为公司各业务线、数据分析团队、数据应用方提供高可用稳定的数据格式化出口。随着调度系统的逐渐成熟，工具链层面的建设逐渐完善，平台化的大数据服务，整体较从前有全面的改善。链家网的大数据工作逐渐从报表阶段，步入了平台化自助服务的阶段。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;技术挑战&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;当然，在建设大数据工具链的过程中，依然还有不少技术问题需要攻坚。例如Presto中还未完全兼容Hive SQL语法，需要涉及到Presto SQL解析器部分的调整工作，又例如Kylin如何能够根据指标系统中的指标自动构建Cube，需要考虑打通指标系统与Kylin系统，或通过自动化的程序来避免数据开发人员的重复操作。工具链中的技术挑战还有不少，但我们清晰的发展路线，让我们有坚定的信心去逐个攻克，也欢迎有志之士加入，一同建设链家网大数据平台。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;大数据平台的规划&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;目前大数据工具链的技术问题，在陆续解决的同时，我们的平台服务、集群、数据管理相关的工作也都在紧锣密鼓的进行中。整体大数据平台长线的一些工作，也在逐渐规划着，例如自动化构建数据血缘、调度系统中任务DAG实时关系图、MOLAP与ROLAP的融合、数据API的全自助服务等技术问题。相信未来半年到一年的大数据平台发展过程中，在将平台服务包装的更为优秀的同时，将会积累更多实用的技术沉淀，促成公司、团队、个人共同成长与进步。&lt;/p&gt;&lt;p&gt;在建设链家网大数据平台期间，我们与百度、美团、滴滴和Kyligence有着良好的沟通交流，他们在大数据平台上的沉淀与经验在平台设计规划阶段，对我们的帮助很大，我们也将会在建设链家网大数据平台的同时，通过技术分享的方式与行业内大数据相关的朋友分享交流，帮助营造行业内大数据领域共同进步的良好氛围。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Mon, 09 Jan 2017 17:14:34 +0800</pubDate>
    </item>
    <item>
      <title>2016年开源方面的热门趋势</title>
      <link>http://www.iwgc.cn/link/4263563</link>
      <description>&lt;blockquote style=" margin-bottom: 10px; padding: 10px 20px; max-width: 100%; box-sizing: border-box; border-left-width: 5px; border-left-color: rgba(128, 128, 128, 0.0745098); white-space: normal; widows: 1; font-size: 14px; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;&amp;nbsp;Rachel Roumeliotis，O’Reilly Media的战略性内容总监&amp;nbsp;&lt;br/&gt;&lt;span&gt;译者：&lt;/span&gt;&amp;nbsp;孙薇&amp;nbsp;&lt;br/&gt;&lt;span&gt;责编：&lt;/span&gt;&amp;nbsp;钱曙光&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;题记：&lt;/span&gt;本文将对人工智能项目与容器方面最为热门和最新的语言进行简单的介绍，并讨论开源编程方面的热门趋势。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhn2FyqBxuEpgnic0a5roFA9ibRHmJd1jaWDM1UDdYh9OgviajvibTgF3eypqaoM4x8iaBYVuepBe5qejQ/640?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;技术总是不断发展的，就算中间或有曲折，整体方向还是向前的。但要论具体的驶向，就算是对于整体趋势和影响特别关注的人来说，这项任务也很有挑战性，下面我们将尝试总结2016年开源方面的热门趋势。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;语言推动人工智能发展&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;经历过20世纪90年代的“人工智能寒冬”之后，如今伴随着计算能力的提升，人工智能又获新生，并且正在影响着我们构建软件的方式。机器学习、深度学习、自然语言处理与自动语音识别功能随处可见，就算OSCON开源大会这样的盛事上也充斥着关于人工智能的讨论。尽管计算能力的提升已经做了铺垫，但将人工智能开源才是将这个行业推向创新和竞争的关键一步。竞争者除了TensorFlow、OpenAI和Apache Spark这些众多周知的强大框架之外，还有类似Neon和Theano这样规模小一些的。&lt;/p&gt;&lt;p&gt;人工智能的发展对软件开发者有什么影响呢？Python因其敏捷性深受数据工程师和科学家们的欢迎，被定位成人工智能的编程语言，类似的语言还有R语言、Java和Scala。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;容器和Go语言密不可分&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Go语言1.0版本是在2012年3月发布的，之后第二年Docker便出现了，再之后是Kubernetes。简单来讲，Go并非专为其而生，但却刚好吻合其用途，因此容器也就成了它的主要用途之一。Go语言所编写的方式是Java或C++从未达到过的，适用于高度网络化、有着一流的并发性的世界。我们至少要对Go语言做以了解——这种语言正在蓬勃发展，在未来若干年中会作为许多应用的根基出现。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Swift超越了苹果的生态系统&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;2015年就在这门语言出现后不久，苹果开源了Swift，它在iOS和Mac OS X开发者之中风靡一时，这种语言不但很容易让开发者快速喜欢上，而且比Objective-C和C++更加安全。在这个满是JavaScript框架和其它新语言的世界中，Swift能有多成功仍有待观察，不过若能继续保持现在的势头，Swift定有机会借着苹果的东风，在这个宏大的网络世界中分一杯羹。&lt;/p&gt;&lt;h3 style=" margin-top: 20px; margin-bottom: 10px; font-size: 24px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;Java 8 vs JVM语言&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;随着Java 8的发布，Lambdas表达式作为一项重要的特性随之而来，类似Scala和Clojure之类的JVM语言也渐入人眼。近来，随着Apache Spark的良好发展，Scala也获得了井喷式的增长。不过至少目前，由于开发者对Java 8新特性的认真审视，Scala和Clojure似乎略有停滞。Java目前已经可以解决并发和大数据问题了，这些都是其它编程语言多年来一直在尝试解决的需求。在2017年的OSCON大会上，Scala和Clojure可能会缺席，这一点并非我们刻意为之，而是因为目前提案的演讲者都对其兴味索然。&lt;/p&gt;&lt;h2 style=" margin-top: 20px; margin-bottom: 10px; font-size: 30px; max-width: 100%; box-sizing: border-box; white-space: normal; widows: 1 ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;前景大有希望的语言&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;一如既往，总有些后起之秀正蓄势待发，它们或能满足新生需求，或只是源于疯狂的想法，最终却改变了我们对编程的思考方式。2016年之后有五种语言即将大兴，它们分别是：Rust、Elixir、Elm、Kotlin和Perl 6。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;它们为这个行业带来了什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style=" margin-bottom: 20px; max-width: 100%; box-sizing: border-box; font-size: 16px; white-space: normal; widows: 1; color: rgb(51, 51, 51) ; ; ; ; ; ; ; "&gt;&lt;li&gt;&lt;p&gt;Rust：以更高一些的安全性进行快速的系统编程。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Elixir：针对较大规模的应用，支持分布式、高容错、功能性和动态的开发。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Elm：很特别的函数式编程语言，最终会编译成JavaScript，非常有趣，而且会愈来愈让人上瘾。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Kotlin：针对Java和JVM系列，特性包括静态类型、安全性、Java兼容。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Perl 6：重获新生！Perl 6成为了一门新语言，在表达式和功能方面都很丰富，这些奠定了它的未来胜利基础。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;大浪淘沙，时间会告诉我们真相，让我们静待它们的表现，也希望对开源有兴趣的开发者们多多尝试，在作出贡献的同时成为历史的参与者。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Mon, 09 Jan 2017 17:14:34 +0800</pubDate>
    </item>
    <item>
      <title>TIOBE 2017年1月语言排行榜：Go语言荣获2016年度编程语言</title>
      <link>http://www.iwgc.cn/link/4263564</link>
      <description>&lt;p&gt;TIOBE每年会将年度编程语言的桂冠颁发给当年最受欢迎的编程语言，而今年几乎无需竞争，谷歌的Go语言便以大比分轻松拿下了这项荣誉。2016年度Go语言获得了2.16%的用户增长，其后远远缀着它的竞争者——用户增长占比分别为0.95%和0.91%的Dart和Perl语言。Go语言的成功主要源于其易学和务实的本质，这种语言并非理论概念相关的，而是扎根于实践动手经验。除此之外，Go语言源生便支持并发编程。TIOBE公司有越来越多的客户纷纷采用Go语言。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;那么，2016年中其它颇有前景的编程语言都怎么样了呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Dart从第26名猛冲到了第17名；Rust保住了前50名的位置，从第47升至第41名；Hack和Julia目前也即将闯入前50名，分别从第61和第73名升到了第51和52名。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2016年还有两门语言初次出现在TIOBE排行榜上，分别是排名第86名的Crystal和排名第87名的Kotlin。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;TypeScript在金融业十分受欢迎，不过在TIOBE排行榜的排名还在100名开外，在2016年一整年的时间里从第169上升到了137名。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;那么2017年的年度编程语言将花落谁家呢？ &lt;/strong&gt;我们预测：C++、Swift、Julia和TypeScript都会是这个位置的有力竞争者。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;所有图片均可点击查看。&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;编程语言排行榜 TOP20 榜单&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjV9iaM8aQ2mpchNUEiaBnHYeHWKUKeEIlxU3RVY3wgUVCDbdUXKibG8jQW02npq1xelTpbYZLGj09k4g/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;下面是第 21-50 位的编程语言，排名如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjV9iaM8aQ2mpchNUEiaBnHYeHeLl2iamLpxaD3Wufn326CIJnZu09icFabWkFUs0pEkDVhyVoc3ku1m5Q/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Top 10编程语言TIOBE指数走势（2002-2016）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjV9iaM8aQ2mpchNUEiaBnHYeH3wJC1uCKZ0WicOw4hX2NTZRB84JTRUvc2TrK0eQqTEdRib85fZbgNRWg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;下面是50-100名：由于差异较小，仅将名称列在下面（按照首字母排序）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;(Visual) FoxPro, ABC, ActionScript, APL, AutoLISP, bc, Bourne shell, C shell, CFML, cg, CL (OS/400), Common Lisp, Crystal, DiBOL, Eiffel, Elixir, Elm, Emacs Lisp, Factor, Forth, Hack, Icon, IDL, Inform, Io, J, Julia, Korn shell, Kotlin, Maple, ML, NATURAL, NXT-G, OpenCL, OpenEdge ABL, Oz, PL/I, PowerShell, Pure Data, REXX, S, Smalltalk, SPARK, SPSS, Standard ML, Stata, Tcl, VBScript, Verilog, Wolfram&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Top 10编程语言排行榜更长期走势（1987-2017）&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjV9iaM8aQ2mpchNUEiaBnHYeHibibLtic5Y7XmCXhzsm2GDJfFSjdnHRicRv0dHTkhx3iajTtYCXia3USowOw/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（注：该位次取自12个月的平均值）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;年度编程语言（2003-2015）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjV9iaM8aQ2mpchNUEiaBnHYeH6LtV0jCxUjBCLTbQzwO2HdfIuaia12ENaHTDibI8ibc81bUQhW8aEGoGw/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;必须声明这个榜单本身采集的是英文世界的数据，虽然在反映趋势上有一些参考意义，但与中国的实际情况不完全符合，而且，这张采样本身也有相当大的局限性。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【说明】&lt;/strong&gt;TIOBE 编程语言社区排行榜是编程语言流行趋势的一个指标，每月更新。这份排行榜排名基于互联网上有经验的程序员、课程和第三方厂商的数量。排名使用著名的搜索引擎（诸如Google、MSN、Yahoo!、Wikipedia、YouTube以及Baidu等）进行计算。请注意这个排行榜只是反映某个编程语言的热门程度，并不能说明一门编程语言好不好，或者一门语言所编写的代码数量多少。这个排行榜可以用来考查你的编程技能是否与时俱进，也可以在开发新系统时作为一个语言选择依据。具体解释可以点击这里查看。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;原文链接： TIOBE Index for January 2017 （文/孙薇 责编/钱曙光）&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Mon, 09 Jan 2017 17:14:34 +0800</pubDate>
    </item>
    <item>
      <title>游戏与算法的必经之路</title>
      <link>http://www.iwgc.cn/link/4228197</link>
      <description>&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;本文为姜雪伟原创文章，未经允许不得转载。注：文中所有标蓝部分均可阅读原文获取详情。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为一个在IT行业工作十五年的老兵，笔者在这里将自己多年的学习游戏算法经验分享给读者，希望能够帮助那些想学习算法提升自己的读者。算法是IT产品研发的核心，在IT的任何领域都离不开算法，目前比较流行的IT领域有：大数据，人工智能，深度学习，游戏开发，虚拟现实，增强现实等，这些领域的核心都是算法，可见算法在IT领域的重要性。本文主要聚焦游戏算法，游戏开发不外乎3D引擎接口调用和游戏逻辑编写，3D游戏引擎的主要功能是渲染，渲染使用的是图形学算法针对GPU编程的。客户端逻辑的编写也会用到一些算法，比如抛物线算法，曲线插值算法，A＊寻路算法等等。算法的优势主要体现在游戏核心功能和效率优化上面，作为IT程序员来说，如果对算法不精通，或者不知道如何在程序中使用算法，随着时间的推移会逐步被行业淘汰。当然大家也不必为此担心，笔者在此总结了学习算法必经之路的三个主要阶段。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;第一阶段 基础篇&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于初始学习&lt;/span&gt;&lt;span&gt;算法&lt;/span&gt;&lt;span&gt;的读者，首先要把基础算法学好，也就是把大厦的地基要打牢，毛泽东说过“理论联系实际”，学习算法先要把理论知识学好，给读者推荐的学习资料是大学的经典课程《数据结构与算法》，涉及到的主要知识点有：快速排序，二叉树排序，二分查找，哈希表，二叉树等。掌握这些数据结构并能运用它们解决实际问题，千万不要死记硬背，亲自动手将算法书写一遍，编程的过程就是要反复的练习。另外，还要学习一些关于矩阵、向量运算的知识点，这些知识点也是游戏开发必备的。给读者推荐的资料是大学课程《线性代数》。掌握这些知识的方法就是读者都要动手将它们逐行代码敲一遍并且用脑子反复琢磨领会贯通。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以二叉树为例，介绍其在游戏开发中使用的案例，二叉树在图论中是这样定义的：二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根结点的度不大于2。有了根结点之后，每个顶点定义了唯一的父结点，和最多2个子结点。它在游戏中应用案例给读者介绍一下，在游戏开发中经常使用图集，就是把多张小图片合成一张大的图片一次性加载到内存中，优化了内存加载效率，生成图集的算法就是用二叉树算法实现的，算法流程就是首先生成一块内存用于存储大图片，然后新建一个空的二叉树，把小图片看作是二叉树的子节点，依次去挂载到二叉树的叶子节点上，挂接的顺序采用的是先序遍历的思想，这样一张图集就生成了。如果本阶段的知识点读者已经掌握了可以直接略过，接下来进入第二阶段进阶篇。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;第二阶段 进阶篇&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在进阶篇阶段是学习一些相对基础篇比较复杂的算法，进阶篇的算法主要包括：A*算法，八叉树算法，Perlin噪音等，笔者建议学习的资料是关于游戏编程方面的书籍《游戏编程大师技巧》（上下册）这两本书非常经典，虽然其接口有些旧，但里面的编程理论非常适用游戏开发，笔者利用它的编程思想编写了一本适合初学者学习的《手把手教你架构3D游戏引擎》一书。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面以八叉树算法为例给读者介绍其应用，八叉树（octree）是三维空间划分的数据结构之一，它用于加速空间查询， Octree的实现原理主要分为六步：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第一步、设定最大递归深度；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第二步、找出场景的最大尺寸，并以此尺寸建立第一个立方体；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第三步、依序将单位元素丢入能被包含且没有子节点的立方体&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第四步、若没有达到最大递归深度，就进行细分八等份，再将该立方体所装的单位元元素全部分担给八个子立方体；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第五步、若发现子立方体所分配到的单位元元素数量不为零且跟父立方体是一样的，则该子立方体停止细分，因为跟据空间分割理论，细分的空间所得到的分配必定较少，若是一样数目，则再怎么切数目还是一样，会造成无穷切割的情形；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第六步、重复3步骤，直到达到最大递归深度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;给读者举个游戏案例，假设：我们有一个大的房间，房间里某个角落站了一只小动物，我们想很快的把小动物找出来，该如何做？我们可以把房间当成一个立方体，先切成八个小立方体，然后排除掉没有放任何东西的小立方体，再把有可能藏小动物的小立方体继续切八等份….如此下去，平均在Log8(房间内的所有物品数)的时间内就可找到小动物。因此，八叉树就是用在3D空间中的场景管理，可以很快地知道物体在3D场景中的位置，或侦测与其它物体是否有碰撞以及是否在可视范围内。进而八叉树的应用场景可以推广到解决如下技术问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一、用其加速用于可见性判断的视锥裁剪；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;二、加速射线投射，如用作视线判断或枪击判定；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;三、邻近查询，如查询玩家角色某半径范围内的敌方NPC；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;四、碰撞检测的粗略阶段，找出潜在可能碰撞的物体对。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;实现的八叉树效果图展示如下所示：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpDbVpWiaWKMN0VlIGQlJUC584ibMcA4icBtvX95T52EMqZ5nuoV73GrveQaqe9IY9oRJlEdsPTHjJw/640?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;第三阶段 提高篇&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;掌握了第二阶段的学习后，接下来到了真正的提高篇，也就是“武林秘籍”的最高境界。提高篇主要是学习图形学算法编程，推荐给读者学习的书籍是：&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;p&gt;&lt;span&gt;《Mathematics for 3D Game Programming and Computer Graphics》和《Real-Time&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Rendering》这两本书相对来说比较难。但是写的非常好，有助于提升技术水平。市面上比较知名的引擎都使用了GPU编程技术，这些技术算法主要包含：PSSM算法、SSAO算法、Bloom算法、Blur算法、HDR算法、Deferred算法等，它们也是引擎的核心算法。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点此&lt;span&gt;查看&lt;/span&gt;作者有关《&lt;span&gt;【系列直播】算法与游戏实战技术&lt;/span&gt;》经验分享。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以PSSM算法为例，给读者分享一下应用案例，如何在游戏中使用，首先要了解其原理：PSSM全称 Parallel-Split Shadow Map&amp;nbsp;&lt;/span&gt;&lt;span&gt;PSSM算法的核心就是把视椎体进行分割，然后分别渲染组合。语言讲解不如看图直观，先通过视锥体分割说起。效果如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;视锥体分割效果图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpDbVpWiaWKMN0VlIGQlJUCga40W2XR7OUiaOu0SpVe6PRFV8hkyE6qibHiaNsKaaM1VRrA3EB89ovXg/640?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PSSM实时阴影的绘制首先需要灯光，在现实生活中，白天只有太阳出来了才可以看到影子。在虚拟世界中也是一样的，场景使用的是Directional（平行光）相当于现实世界的太阳光。上图左边部分显示的是视景体的投影，利用PSSM算法将其平行的分割成多个部分，然后对每个部分进行渲染，分割成的块数是可以自己设置的。右半部分是顶视角观看的分割效果，把物体分成三块进行实时阴影的渲染。渲染的计算是GPU中执行的，在GPU中执行的流程如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;渲染分解效果图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpDbVpWiaWKMN0VlIGQlJUCHeaokyos0zXyrjYiaOLIDs4BYIANsPBH1lXwQLLXRezl2iby0SwpzZNg/640?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图的处理流程首先是场景中的灯光照射到需要投影的物体上，接下来程序对投影的物体顶点进行矩阵变换将其转换到投影空间中，再转换到裁剪空间进行视口的平行分割，最后将其分别渲染出来。原理清楚了代码编写就很简单了，具体代码读者可以查看《手把手教你架构3D游戏引擎》一书，下面给读者展示效果图如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpDbVpWiaWKMN0VlIGQlJUCeZWnic1icthdPdkpKdn7GIrzfLGAOO5TPBmb8iczWuBTS633lXAVS7q3Q/640?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面笔者分享一下学习算法的感受，刚踏入IT行业时也不会算法编程，对算法有一种恐惧感，总感觉算法很神秘，更不知道如何使用，自己为此也苦恼过。刚入职公司的时候跟大多数程序员一样写写逻辑，两年后，自己感觉水平也比较牛了。为此，自己申请加入到公司核心部门引擎部，初衷就是看看引擎组都做些什么事情，当然也是想学习一些知识为了跳槽涨工资。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加入引擎组后，经历了一件事情彻底改变了我，更让我认识到算法的重要性。事情是这样的，端游中实现的刀光拖尾算法，功能包括：取样插值并且实现材质的扭曲效果，当时接到任务一下子就懵了，在网上不停的翻资料，那时网上没有这方面的技术实现，最后只能硬着头皮自己动手写了，经过一周的折腾，选择了B样条曲线插值算法，再经过一周将其实现了出来，最后一周的时间，度日如年，晚上基本上都没睡好，做梦都想着如何实现算法。有时自己都想离职走人了，感觉压力太大了，但是最终还是实现出来了。经历过这段刻骨宁心的经历，让我明白了算法是如何与游戏开发相结合的，也让我明白了自己算法知识的薄弱，需要从头开始把算法学好，最终我也是按照上面这三个阶段学习的。在学习算法的过程中痛并快乐着，学习算法首先要明白其原理，然后再用代码敲一遍实现出来，切记眼高手低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后来笔者独立写过几款3D引擎包括：3D渲染引擎，海水渲染引擎，物理引擎等。现将实现的效果给读者展示如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;海水渲染反射折射效果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpDbVpWiaWKMN0VlIGQlJUCsIicDuR3fwemQibQRcy6oNdROhCvyg68Te8CHQOuKuTiaQDxwhhs7m9EQ/640?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;实时航行轨迹模果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpDbVpWiaWKMN0VlIGQlJUC20PBiaByZyNQQia6mrE50KhY5iciadBWicCahJfI7gKKTcNEHyTtxAXUQ3g/640?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后给读者一个建议：学习算法关键是我们要有一个正确的学习方法再结合着实战项目就可以快速的提升自己的技战水平。算法的学习不是一朝一夕的，只要找对学习方法，分阶段学习，持之以恒，相信随着经验的积累将来在IT“武林“真的可以独步天下，以此文与读者共勉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;作者：姜雪伟，创业公司技术合伙人，畅销书作者。CSDN社区专家，资深3D游戏引擎开发者，IT高级讲师，计算机图形学方向研究生。&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 06 Jan 2017 17:10:04 +0800</pubDate>
    </item>
    <item>
      <title>Fregata: Spark上支持万亿维机器学习模型</title>
      <link>http://www.iwgc.cn/link/4228198</link>
      <description>&lt;p&gt;&lt;span&gt;大规模机器学习工程上最大的挑战是模型的规模。在计算广告，推荐系统的场景下，运用Logistic Regression算法时常需要做特征交叉。原来两组，三组特征的数量可能并不是太大，但是通过交叉后可能会特征数会爆炸。例如，用户特征数1万，广告特征数1万，那么交叉后总特征数就是1亿，如果再与几十个广告位特征交叉，总特征数就会达到几十亿。有些情况下，特征交叉后，总数甚至能达到上千亿。特征数量的爆炸，也带来模型规模的爆炸，这给机器学习带来的挑战比庞大的训练数据量更大。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常认为，当模型的规模超过单节点的容量后，基于MapReduce计算模型的Spark, Hadoop MapReduce就无法支持了。为了解决这一问题，Parameter Server应运而生，目前是大规模机器学习研究方面的前沿。目前Parameter Server还在发展的过程中，其使用，开发门槛相较于Spark来说都是较高的，而且在大数据平台中再引入一套新的计算平台，对整个体系的管理，运维都将带来更大点挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Fregata致力于在Spark上解决大规模机器学习的问题，Fregata目前已经公开发布的版本已经能支持亿级维度的模型，而目前内部最新版本已经在一个月内连续突破了10亿，100亿，1000亿和10000亿4个台阶。在模型规模提高了4个数量级的同时保持了训练的高效性。下面是 Fregata的Logistic Regression算法在511412394个样本的训练集下的训练时间：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjV74w43tGJIZSjZlON3zGmwFRojsvib3JCSiaVdiaWrQtY83MeExLK0Hn8CwiaZUHLXqekoh5oBQFNdSQ/0?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上表可以看出，对于5亿多样本的训练集，在仅使用48个Executor的情况下，千亿维度以内的问题，都可在500秒内完成，而且每个Executor仅需最多2G内存。对于万亿维度的问题，训练时间也仅需800秒多一点，只是Executor的内存加到了8G。Fregata最近的突破，打破了在Spark上无法支持超大规模模型的瓶颈，将进一步降低大规模机器学习的使用门槛和成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Fregata 项目地址：&lt;/span&gt;&lt;span&gt;https://github.com/TalkingData/Fregata&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;作者：张夏天，TalkingData首席数据科学家。12年大规模机器学习和数据挖掘经验，对推荐系统、计算广告、大规模机器学习算法并行化、流式机器学习算法有很深的造诣；在国际顶级会议和期刊上发表论文12篇，申请专利9项；前IBM CRL、腾讯、华为诺亚方舟实验室数据科学家；KDD2015、DSS2016国际会议主题演讲；机器学习开源项目Dice创始人。&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎人工智能技术投稿、约稿、给文章纠错，请发送邮件至heyc@csdn.net&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 06 Jan 2017 17:10:04 +0800</pubDate>
    </item>
    <item>
      <title>【微信群分享报名】分布式实时处理系统架构设计与机器学习实践</title>
      <link>http://www.iwgc.cn/link/4228199</link>
      <description>&lt;p&gt;&lt;span&gt;编者按： 2016悄然而过，不管你收获多少还是失去什么，都已然过去，但接下来的2017年，唯有不断的武装自己并强化自身的硬实力才是正确之举，CSDN高级架构师群特为受众们继续带来知识分享，毕竟在这个物欲横流的世界里，这已属难能可贵，希望我们能一起携手前行，共同成长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享人&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjV74w43tGJIZSjZlON3zGmwGHTMaTgbLB17xX2SqFOwM7Df2EMSVkCth8euTmjOeaCfjtSbYOxsPQ/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;卢誉声，Autodesk软件研发工程师，从事平台架构方面的研发工作。在此之前，他曾在思科系统（中国）研发中心云产品研发部工作，并参与了大规模分布式系统的服务器后端、前端以及SDK的设计与研发工作，在分布式系统设计与实现、性能调优、高可用性和自动化等方面积累了丰富的敏捷实践与开发经验。他主要从事C/C++开发工作，致力于高性能平台架构的研究与开发。此外，对JavaScript、Lua以及移动开发平台等也有一定研究。著有《分布式实时处理系统：原理、架构和实现》，并译有《Storm实时数据处理》《高级C/C++编译技术》《JavaScript编程精解（原书第2版）》。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享主题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《分布式实时处理系统架构设计与机器学习结合的未来展望》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;主题摘要&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;机器学习与实时处理系统应用&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分布式计算拓扑搭建&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;消息算法调优&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Hurricane计算框架与未来展望&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;听众受益&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高性能分布式海量数据分析系统架构设计原理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实时处理系统案例实践&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;机器学习与分布式系统结合&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;全新开源分布式系统介绍与展望&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Slides部分截图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjV74w43tGJIZSjZlON3zGmwqxD0iaY6icM6FN1nYkBffo87LsH56qIF9Nd8rlicVvT3ZdHdso1GQ0Q2g/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;其它&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时间：11月11日，20:00（请提前十分钟进场签到）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时长：1小时（含QA）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;方式：主要文字+图片（语音为辅）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;地点：CSDN架构师金牌授课群&amp;amp;大数据架构群&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;听课费用：每人1元，先进群后支付群活动收款即可，全部费用转讲师收取。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分享整理：会首发在群里，并整理发布在CSDN网站和官方资讯微信公众号上，并提供Slides下载地址。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;报名方式：加群主微信qianshuguangArch，申请入群，需备注姓名+公司+职位+微课堂，已在群的无需重复申请。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjV74w43tGJIZSjZlON3zGmw55ia3V3A0ZJ0snp2XDqwJETTEM7oVuRwdicBk3HjU0927iaicYyOdQY5Zw/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;扫一扫就吃掉我喔，记得备注。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjV74w43tGJIZSjZlON3zGmwaaWxCzRibm7qdcZqwD7rEakZRO7vK3IibzHxfgQMehrNqcjIR80BqpwQ/0?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;扫一扫为义务的知识付费1元。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 06 Jan 2017 17:10:04 +0800</pubDate>
    </item>
    <item>
      <title>机器码农：深度学习自动编程</title>
      <link>http://www.iwgc.cn/link/4212672</link>
      <description>&lt;blockquote style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;p&gt;&amp;nbsp;&lt;span&gt;&lt;strong&gt;本文为&lt;/strong&gt;&lt;strong&gt;&lt;a target="_blank" style="color: rgb(67, 149, 245); max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;《程序员》&lt;/a&gt;原创文章，未经允许不得转载，更多精彩请&lt;a target="_blank" style="color: rgb(67, 149, 245); max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;订阅2017年《程序员》&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;机器自动编程是人工智能一直以来期望攻克的重要应用领域，随着深度学习的逐步流行，最近在自动编程方向获得了广泛应用并取得了很大进展。深度学习如何指导机器自动编写出能正确执行的代码？本文对这方面的最新技术进展进行了介绍，将主流技术分为“黑盒派”和“代码生成派”两种派别，并分别介绍了对应代表系统：“神经程序解释器”及“层级生成式CNN模型”的工作机理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着深度学习技术的快速进展，人工智能时代的序幕已经揭起，目前深度学习在图像处理方面的能力已经接近人，甚至在某些方面已经超过人的识别能力，在语音识别、自然语言处理等人机交互方面也取得了很大的技术进步。在未来社会，各行各业的不同类型工种逐步由机器代替人作为一个社会发展趋势已经开始逐步显现，比如工业机器人目前已经开始在工厂大量使用，特斯拉也已经在在售汽车中启用自动驾驶功能，由人工智能部分代替了传统的驾驶员的作用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前看人工智能已经能够成功从事一些体力为主的工作岗位，那么程序员作为一个脑力密集型劳动岗位，是否会被机器取而代之？从技术和社会发展趋势来看，这个问题在很大程度上可能会是个肯定答案。那么机器码农如何理解需求？如何根据需求秒速写出代码？本文后续内容将介绍相关技术，尤其是深度学习相关的一些技术思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;深度学习介入自动编码领域是最近两年的事情，目前深度学习系统自动编码能够解决的问题还比较简单，比如能做到自动根据训练数据写出冒泡排序等算法，根据例子学会十位数加减法以及字符串正则匹配规则等，所以短期内机器码农还没有替代人类程序员的可能。但也要看到随着深度学习在自动编码领域的深入应用，其技术发展速度是非常快的，极有可能在未来几年有突破性的技术进展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;归纳程序综合问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何让机器自动产生代码这个问题由来已久，是人工智能一直希望攻克的重大问题之一，传统上一般将这个问题称为“归纳程序综合”（Inductive Program Synthesis，简称IPS）问题。IPS问题的研究目标是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;给定一组&amp;lt;输入，输出&amp;gt;数据对，如何自动产生一段代码，这段代码能够正确地将这些给定的输入转换为给定的输出。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统的研究方法里，建立能自动产生代码的IPS系统一般主要涉及两个过程：代码组合空间搜索以及代码排序。一般编程语言可以形成的程序语句是非常多样的，如果随机选择其中一些语句组合起来，就能够对输入数据完成某种转换的任务形成输出。但是这种合法代码组合出的空间非常大，在这么大的代码语句组合空间里，到底哪些语句组合起来能够将给定的那组&amp;lt;输入，输出&amp;gt;数据进行正确的转换呢？这就需要在巨大的代码组合空间中进行搜索，找到那些能够对给定数据都能进行转换的代码片段，这些代码片段就是机器自动产生的程序。很明显，这里的关键是设计高效的搜索算法。另外，在代码组合空间里搜索，有可能找到很多段程序，这些程序都能够将输入数据进行准确地转换，那么到底输出哪一段最合理呢？这就是代码排序要做的工作，就是给多段完成相同功能的代码进行排序，找出最好的那一段，比如一种简单直观的方式是输出代码长度最短的那段作为自动生成的代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面介绍的是传统IPS系统的设计思路，最近深度学习也开始被频繁应用到代码自动生成领域，后面内容主要介绍典型的相关技术思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;机器如何使用深度学习学会自动编程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;武侠世界分门别派是个常态，有少林、武当、峨眉、崆峒等派别之分，神经网络自动编程目前的主流技术路线也可以分为两派：“黑盒派”和“代码生成派”。尽管都采用了深度学习技术，但是两者在路线方向上有较大差异，也各有特点。下面我们分述两派的基本技术思路及其相应的代表系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;黑盒派&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“黑盒派”是神经网络编程的一类典型方法，所谓“黑盒”，是指编程系统并不显示地输出代码片段，而是从输入输出数据中学习转换规则，通过这些转换规则能够完成某项任务，正确地把输入转化为输出，所学习到的这些转换规则和输入输出数据中的规律则以神经网络参数的方式体现，所以并没有明确的代码或者规则输出，在人类眼中，只能看到能够完成指定任务的训练好的神经网络，至于它学到了什么规律并不清楚，这是为何称之为“黑盒”的原因。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQTVgicxB7utKKH59teA2U20pgEd4EHwG7jZUcfCpUchX3j62lTAl7muib1Ltz2Zz9nl5sz0FVW27A/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;图1 “黑盒派”技术思路&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1展示了“黑盒派”神经网络编程器的基本运行思路，其主体部分包含三个关键部件：神经网络控制器、神经网络感知器以及行为器。神经网络感知器用来感知当前的输入数据并抽取输入数据的特征，神经网络控制器则根据输入数据的特征来判断当前应该对输入数据实施何种行为（比如对于数组排序来说可能是交换两个数值的SWAP(number1,number2)操作），属于决策机构，也是神经网络编程器中类似于人类大脑的关键构件，当确定了采取何种行为后，调用行为器来对输入数据进行实际操作，这样就将输入数据做了一步变换，形成中间数据，之后这个新形成的中间数据继续作为感知器的新输入，如此循环，就能够对原始输入数据不断变换，来完成比如数组排序等任务。在训练阶段，人类提供完成某项任务的一些输入及其对应的输出数据，并指定对应的行为序列，以此作为训练数据，训练神经网络编程器的学习目标是让深度学习系统模仿这种针对输入数据的行为过程，最终能够形成正确地输出数据。当训练完毕后，这些转换规则就被编码到神经网络的网络参数中，当实际应用时，提供一个新的输入，神经网络感知器对输入数据进行特征提取与表示，神经网络控制器决定采取何种操作，行为器对输入数据进行实际的变换行为，形成中间结果，如此反复，直到神经网络控制器决定终止操作，此时得到的结果就是程序对应的输出结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上述过程中可知，“黑盒派”神经网络编程器并不产生具体的代码来完成编程任务，而是学习输入数据和输出数据之间的规律及其转换规则。从广义上来说，神经图灵机等网络模型虽然不是专门用于编程，而是用于更通用的任务过程中，但是其实也是符合这种“黑盒派”架构的基本思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQTVgicxB7utKKH59teA2U2rYDXsUFYaZlB3IKY0PV4MnQYu5Xgkf6q7rpMzv6vRcWsH9dNvOaSLw/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;图2 神经程序解释器（NPI）运行机制&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;神经程序解释器（Neural Programmer Interpreters，简称NPI）是Google提交到ICLR 2016的会议论文中提出的神经网络编程模型，这篇论文因新颖的思路及创新应用获得了ICLR 2016最佳论文奖。神经程序解释器是一种典型的“黑盒派”方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;NPI的主体控制结构是递归LSTM（参考图2所示），这种递归LSTM结构可以体现程序与子程序之间的调用关系。至于什么是递归LSTM后文会有解释，我们先根据图2所示内容来说明NPI的运行过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在t时刻，LSTM的输入包括当前选中的子程序以及此时的输入数据，经过Encoder编码网络对这两个输入进行映射，形成t时刻LSTM输入层的内容。这个过程其实就对应图1中的神经网络感知器，用来对输入数据进行编码和特征提取，在NPI中，不同类型的任务可能对应不同的Encoder编码网络，因为不同任务的输入类型各不相同，比如有的是图片，有的是数组等，所以很难有公用的输入编码器能够统一处理，但是不同任务会共享LSTM层参数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在对输入进行特征编码之后，t时刻的LSTM隐层单元对输入以及LSTM网络t-1时刻的隐层信息共同进行非线性变换，这是对历史信息和当前输入的特征融合；然后，通过三个解码器来产生t时刻的三种类型的输出：Decoder_1根据隐层编码信息产生一个概率值P，这代表了当前程序结束的可能性，当P高于阈值的时候，当前程序终止；Decoder_2输出子程序库中某个子程序的ID，这代表发生了&amp;lt;主程序，子程序&amp;gt;间的调用关系；Decoder_3输出新映射到的子程序所需的参数信息列表，Decoder_2和Decoder_3一起可以触发被调用的子程序。可以看出，LSTM结构以及子程序库其实就是图1中所示的神经网络控制器，它决定了神经网络所需要做的各种决策。NPI没有明确的行为器，这些行为隐藏在被调用的子程序中，一般不同的子程序会定义针对输入数据的不同操作，调用子程序会触发子程序的操作来改变输入数据内容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之所以说NPI是个递归LSTM结构，是因为当子程序被触发时，自身也形成了类似图2所示的LSTM结构，所以形成了递归LSTM的形态。当被调用的子程序中的某个时间步输出的程序终止概率P大于阈值时，会返回调用程序的LSTM结构中，继续下一个时间步的类似操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图3所示是NPI自动学习十进制加法的结构示意图，其输入是不断被子程序变换内容的数组矩阵，其控制结构其实就是图2所示内容，只是展示出了被调用子程序的LSTM结构，所以看上去比较复杂，但其运行逻辑就如上文内容所述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQTVgicxB7utKKH59teA2U28MqhJibNyrZ2NX6wTaLoCLAFsZe8KffvBRsQu97OkQJPbqd6eeABdHw/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;图3 NPI学习十进制加法&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;代码生成派&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQTVgicxB7utKKH59teA2U2XgTH3Z1BN8Udg6WDIqrrtbC0ywPibHjqsQicWHeeRpcpcxic3gELAibicEg/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;图4 代码生成派&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“黑盒派”有个很容易被诟病的问题：对于开发人员来说，对神经网络到底从数据中学到了什么规律所知甚少，所以不利于分析系统存在的问题以及提出有针对性的改进方案。“代码生成派”在这一点上的思路和“黑盒派”有很大差异，更接近传统的解决“IPS问题”的思路，期望能够让机器码农像人类程序员一样把解决问题的过程形成代码片段。目前也有不少深度学习自动编码系统采用这一技术路线，尽管不同系统具体技术方案有较大差异，但其基本流程都是类似的，图4展示了从不同方案中抽象出的“代码生成派”神经网络自动编程的基本思路，分为模型训练阶段和模型应用阶段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在模型训练阶段，需要使用不同种类编程任务的训练数据来训练深度学习自动编程模型，一般训练数据包括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务Task&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;i&lt;/sub&gt;的一系列输入输出数据：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;{〈Input&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/sub&gt;,Output&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;1&lt;/sub&gt;&amp;nbsp;〉,〈Input&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2&lt;/sub&gt;,Output&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;2&lt;/sub&gt;&amp;nbsp;〉……〈Input&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;n&lt;/sub&gt;,Output&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;n&lt;/sub&gt;&amp;nbsp;〉}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务Task&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;i&lt;/sub&gt;对应的代码片段：Program&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;i&lt;/sub&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这组训练数据的含义是：对于要执行的任务Task&lt;/span&gt;&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;i&lt;/sub&gt;&lt;span&gt;来说，当输入为Input&lt;/span&gt;&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;j&lt;/sub&gt;&lt;span&gt;的时候，经过任务的代码Program&lt;/span&gt;&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;i&lt;/sub&gt;&lt;span&gt;对输入进行各种变换，形成对应的输出Output&lt;/span&gt;&lt;sub style="max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;j&lt;/sub&gt;&lt;span&gt;。训练数据中可以包含各种不同类型的任务及其对应的训练数据，这形成了总体的训练神经网络模型的训练数据集合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前常用的编程语言有很多，比如JAVA、C++、Python、PHP等，对于机器码农来说，也存在着：“PHP是不是最好的语言”这种问题，就是说需要作出应该用什么语言产生代码的决策。一般不同的深度学习自动编码系统都会参考“领域特定语言（Domain Specific Language）”自己定义一种编程语言，而不是直接采用人类程序员常用的某种编程语言，这是因为对于机器产生代码来说，目前常用的编程语言过于复杂，里面包含了循环、分支判断等复杂控制逻辑，而根据“领域特定语言”定义的语言一般都比较简单，不包含这些控制逻辑，只包含一些基本原语，比如数值加一、数值减一、移动指针位置、读取某存储器内数据、将数据写入存储器某位置等基本操作原语。所有代码片段（包括训练数据对应的程序以及将来要生成的代码）都采用自定义的领域特定语言，这样会大大简化机器码农的学习难度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;给定了各种任务的输入输出数据及其对应的代码片段，深度学习自动编程系统就可以开始使用SGD（随机梯度下降）算法来训练模型，一般神经网络的输入是某个任务对应的输入输出数据，而学习目标则是调整神经网络参数，使得其输出的代码片段和训练数据中对应的代码片段尽可能相同。通过这种方式可以训练获得自动编程模型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在模型应用阶段，为了让机器码农能够针对新任务自动编写出解决任务的代码P（P能够正确地将给出的所有输入转换为对应正确输出），需要提供新任务的若干输入输出数据，这其实类似于日常程序员写代码的需求说明，只是以数据的方式体现的，否则不可能让机器漫无目的地去生成不知道在干么的代码，任务的输入输出数据其实是告知机器码农数据之间的映射规律。机器码农在获得新任务的输入输出数据后，根据训练阶段学习到的模型，可以预测出“领域特定语言”中的各种操作原语语句出现在代码片段P中的概率，可以认为出现概率较高的原语是代码片段P中应该包含的语句。这里需要注意的是：深度学习系统并不能准确地输出完整的代码片段，只能预测代码片段中DSL原语出现可能性。之后，可以采用某些搜索技术（比如线性动态编程或者宽度优先搜索等技术）在代码组合空间中寻找代码片段，这些代码片段能够准确地将给定的所有输入正确地转换为对应的输出。从这里可以看出，深度学习预测的结果起到的作用是形成代码组合空间搜索时的约束条件，能够大量减少搜索空间的大小，使得后续代码搜索过程极大地提速。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;层级生成式CNN模型（Hierarchical Generative Convolutional Neural Networks，简称HGCNN模型）是Facebook最近提出的一种具备“代码生成派”典型特点的深度学习自动程序推导方法。其整体工作流程符合上述“代码生成派”运行过程，只是图4中的“深度学习自动编程系统”模块采用了具体的HGCNN模型而已。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQTVgicxB7utKKH59teA2U23TT5Zoib9kx2ico9fwDhLI5oN56gsP0Er9fhjURG5DgIMHVb9p2VfxSA/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;图5 层级生成式CNN模型（HGCNN）&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图5展示了HGCNN模型的神经网络结构。在模型应用阶段，对于需要编码的新任务，先提供若干满足任务处理逻辑的输入输出数据（HGCNN主要对数组进行各种类型的变换，比如图5中展示的例子是对数组进行排序）。对于每个输入输出数据，HGCNN使用四层采用全连接结构的DNN网络（图5中标为b的网络结构）来对其进行特征提取，每层网络包含512个隐层神经元。之后，将若干个输入输出数据的特征求均值作为输入输出数据的整体特征表示。可以看出，这个过程是对输入实例进行编码和特征提取的阶段。然后采用连续的CNN上采样（UpSampling）操作不断形成逐步扩大的二维结构矩阵，上采样是用来可视化展示CNN隐层所学到的特征所常用的技术，在这里采用上采样可以将输入输出数据中的特征规律以类似二维图形的方式展示；上采样形成的二维矩阵每次扩大一倍，直到形成最终的16*16大小的代码画布（Code Canvas），这个最终的代码画布代表了各种操作原语在最终代码中出现的可能性。代码画布的每一行代表一个操作原语语句，一个操作原语由某个操作符以及对应的两个参数构成（参考图5中的c部分）。GHCNN的“领域特定语言”定义的语言类似于汇编语言，图5中c子图展示的是Load 1 2的操作命令，图6则列出了这个语言定义的操作原语。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhQTVgicxB7utKKH59teA2U2EFQRXFT4xicjeUfjEpic6Phm5mWenL3o342oHFdKiaYuy2nxpician5zvYA/0?"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center style="max-width: 100%; color: rgb(62, 62, 62); font-size: 16px; line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;图6 HGCNN的领域特定语言&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在获得了最终程序中可能包含的原语语句概率信息后，HGCNN采用宽度优先搜索策略在代码组合空间中搜索满足输入输出实例约束条件的代码片段，以此来最终形成输出的程序代码，这样就完成了指定输入输出实例后自动产生代码的功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HGCNN有个特色是训练数据包括输入输出以及对应的代码完全自动生成得来，而不像很多其它系统需要提供现成的训练数据，从这点上说其运作机制有点类似于无监督学习。另外，从上述描述可以看出，本质上HGCNN是一种符合Encoder-Decoder（编码器-解码器）结构的具体模型，这里Encoder的编码对象是多个&amp;lt;输入,输出&amp;gt;数据，形成特征表示后采用Decoder来产生DSL原语语句，Decoder则是利用了上采样生成二维结构的方式生成DSL原语片段生成概率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DeepCoder是另外一个采取“代码生成派”路线的深度学习自动编码系统，其主体思路和HGCNN类似，只不过使用的具体Encoder和Decoder不太相同，其整体运行流程也基本采用了图4所示的“代码生成派”典型流程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style="max-width: 100%; color: rgb(62, 62, 62); line-height: 25.6px; white-space: normal; widows: 1; box-sizing: border-box !important; word-wrap: break-word !important; background-color: rgb(255, 255, 255);"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;问题与展望&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;利用机器自动根据任务实例学习编写代码是能够极大提高代码开发效率的人工智能应用领域，而深度学习技术广泛使用在这个领域也是最近两年刚出现的新趋势，尽管取得了非常快速的技术进展，但是这个研发领域仍然面临一系列需要解决的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，深度学习自动编码研究仍然处于技术发展初期，目前也只能产生解决比较简单任务的代码，距离真正实用化的代码生成还有很大距离。其次，尽管提出了一些通用的解决方案，但是大部分技术的通用性仍然不够强。所谓通用性不强，是指当面临一类新的编程任务，需要重新训练神经网络参数，无法做到训练一次以后面对新场景时原先的神经网络能够反复适用，这对于技术的实用化应用是个很大的障碍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再次，对于机器自动产生的代码，很难验证其逻辑的正确性。自动产生的程序虽然能够将训练实例中给定的输入正确转换为指定输出，但是毕竟这些例子很有限，对于更多的输入其输出是否正确这点很难验证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然面临如上诸多困难，但是深度学习的蓬勃发展给很多应用领域都带来了根本性的性能提升，相信在未来几年内神经网络编码器领域会有大幅的技术进步，有可能在某些垂直领域产生真正实用化的机器码农。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;作者简介：张俊林，中科院软件所博士，曾担任阿里巴巴、百度、新浪微博资深技术专家，目前是用友畅捷通工智能相关业务负责人，关注深度学习在自然语言处理方面的应用。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;责编：何永灿，欢迎人工智能领域技术投稿、约稿、给文章纠错，请发送邮件至heyc@csdn.net。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riakAD0e0pibwG8wrO3qbP5O2EZR7IQAvLJJjo7cAa4tGWZSPfuicNDYHrw/0?wx_fmt=gif"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjX8cRiaTgvtibCyiaicEGUuc6riaJHic2zOwqWtdgNnLqPSlL5ok8ibCnnD3El9EjQYnG0LdCaD9otCg2wIg/640?wx_fmt=jpeg"/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;【长按识别立即关注】&lt;/strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;strong&gt;&lt;span&gt;品读之后，&lt;/span&gt;&lt;span&gt;愿有所获。&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Thu, 05 Jan 2017 17:09:10 +0800</pubDate>
    </item>
  </channel>
</rss>
