<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>36大数据</title>
    <link>http://www.iwgc.cn/list/1149</link>
    <description>关注大数据和互联网趋势,最大,最权威,最干货的大数据微信号(dashuju36).大数据第一科技媒体.不发软文,只做知识分享.</description>
    <item>
      <title>笑得我脸疼 2017年最新大数据28则冷笑话 祝开工大吉</title>
      <link>http://www.iwgc.cn/link/4552758</link>
      <description>&lt;p&gt;&lt;strong&gt;2017年春节后第一天上班，你起来了吗？36大数据在此祝大家开工大吉，新年发大财，财源滚滚来，事业步步高。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqE55Yuibn3TB7AM0T5Ygo7IV4ZpBU0LjmJQiaoQiaXibP3G892kzgnpQBhw/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;为了帮助大家能够顺利进入工作状态，完成休假与上班之前的过渡，我们今天将为你奉上28条大数据/程序员冷笑话表情包，喜欢的话就转走吧。本文为36大数据专稿。&lt;/p&gt;&lt;h4 class="article-title" style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; ; "&gt;1、大数据时代，正式宣布进军该领域！&lt;/h4&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqASgRajansFUoF1Q5YjfZ2X153fDgl1Ahyib5b7moDnjEhtAw0DLmOIQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、【泳装卖得好的秘密是……】&lt;/strong&gt;前段时间某大数据公司提供过一个数据，发现全中国在淘宝上购买泳装比例的最大的省份是新疆，比例最低的是海南。于是得出一个结论，认为新疆的泳装产业是被严重低估了。结果发现新疆通过淘宝买泳装是因为泳装实体店很少，只能在网上买。而海南随处可见泳装店。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqDQOF2o6Libu4mAwlb8LXFZsUaNicmSzqhtVDlL4RDudpia8asHvkVR4Ow/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h4 class="article-title" style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; ; "&gt;3、1956年IBM的硬盘，可存储5MB的数据&lt;/h4&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqluHcbDJctEXggSQ16XDI0XFAlvClHnaE7ec9UqT3SEPh79dRzM8VqA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4、【卖花的干不过卖套的】&lt;/strong&gt;情人节“淘宝数据”显示：卖花的始终干不过卖套的。不得不感叹一下，情人节，送花始终是个手段，上床才是最终目的！&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqpZCKLTI5ibHZFSEvibVk6YHO9HH9sBxOo7vicRorB3kPx2Bn2PmnBLHibg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5、【到底要怎么办啊】&lt;/strong&gt;跟你们说个笑话：刚刚我的电脑问我，此文件可能存在问题，是否要恢复数据，然后我点击恢复，它回答我，不能恢复数据，因为该文件存在问题。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrq9btlXIEOanbSNRXu5icblCZMauIYAeibIDsicvva3b372zkiaMJpcLoxsA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6、【我竟无言以对】&lt;/strong&gt;做数据分析的以为自己能写的出工程级别代码，这绝对是个笑话。。。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqewt6Y1gSIInTLTr7uaZKibJqauic9mQpTDicA2BxtKKop14MHrgDKjdxg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;7、【现状就是如此】&lt;/strong&gt;和客户交流两天，他们hadoop/spark一个字都没有提，只是不断地提业务痛点，终端用户需求，和产品开发愿景，变现路径，并且笃定这就是大数据能够解决的范畴；技术推动变革，在中国从来就是一个笑话，从来没有一个好的大数据商业模式是由懂大数据技术人来主导的；不着一字，尽显风流，洞悉业务并能主动设身处地的去规划大数据变现场景的业务专家们，你们才是大数据变革最大的推手！@高峡_重庆大数据联盟&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqgmoHWNpqfwB2eLTPsEevKW1ltx0vuWsfric4zL0BdxFRe7N56mCSSwQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;8、【预测原理……】&lt;/strong&gt;即使我们知道所有关于云的形成原理的知识，也无法预测特定的云将呈现什么形状。我们只能等着瞧。历史的一个大笑话就是，当今科学家的知识远远多于100年前的同行们，拥有的数据处理能力也远胜于后者，可是对完美的可预测性的前景的信心却小得多。——《超预测》&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqr3SicgfdK4b2icGMe2CIIsxynUMdg6Qh2zPUBPlvxtbEzNdEicJIYzwlw/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;9、【老板眼里最好的报告长啥样？】&lt;/strong&gt;老板：“XXX的报告写得很好，条理清晰。”老板：“XXX的报告也很好，数据准确。”老板：“XXX的报告更不错，对未来的市场分析很到位。”老板：“阿呆，我最后再跟你说一遍，报告是不允许连载的，回去把结局写完。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqZcITjd3HdONo3komJ9mib92LEmIfibXefvM2g9kMpbkRAJ2v1rT7zHYw/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;10、【科研室内部冷笑话】&lt;/strong&gt;搞理论的和搞模拟的热烈讨论哪种算法才能最大限度地缩短处理数据的时间，搞实验的在一旁幽幽说道：我们一般就花钱换一台好一点的电脑……&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqxdaliabXPOr87dHmBMf9ia2kcgHVqR31pRWcubPpiagqfgbWDmtvHQqpA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;11、职业选择：&lt;/strong&gt;【理科博士】宜数据录入，清洗喷枪，忌讲冷笑话、撸串；【工科博士】宜刷文献、投稿，忌黑色水笔、清咖；【文科博士】宜面壁、晒被子，忌午睡三小时、麻辣小龙虾；【医科博士】宜活检、与小鼠培养感情，忌小核桃、弹吉他；【农科博士】宜仿真实验、建模，忌羊腿、调戏老板。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrquSvfuib3vo28UAOtHZpXVnJ6SEeYHFBnMpEHfCADtS7biaKeia8aJv7Yw/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;12、【哈哈哈哈】&lt;/strong&gt;突然想到了一个笑话、有个人在一个都是博士、硕士、研究生的群里面问了句，如果高空泼了一瓢水会有什么后果。然后群里面各种数据，各种公式，各种假设。最好这个提问题的人说了句，难道你们都没淋过雨吗？然后这个就被踢出群了。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrq50srHibu952HIGmhBOhz36f6vd3h6moacOBYxhWicV2gx7uVyxicz0HjQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;13、我在写代码&lt;/strong&gt;，老板娘在我身后经过，说：“你这算法的性能是O(n)，可以改进一下”。我大惊：“您也是码农？？”，她幽幽道：“我是数学系的”。。。。(真事 &amp;nbsp;&amp;nbsp;@灵感之源&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqnHzow1lRQJF3botSudkPu6WhCPOGRldStA58MoF16qqRoTMcWXKbLA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;14、【关于面试这个话题】&lt;/strong&gt;用人部门老板正在面试一位同学：老板：“你Excel 掌握的怎么样”，那位同学回答：“我熟练掌握VBA和宏，规划求解，模拟运算表，窗体控件的使用。。。”，老板一脸的不屑，加重声音说，“请不要跑题，我问的是你的Excel掌握的怎么样。。。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrq0nC6pOdNoDeZGg9EZjBOrYJVAEHuh8568BAqt21XHVwP9SKicUm2hNA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;15、【让我说什么好呢】&lt;/strong&gt;大学体检，男生都爱比比肺活量，同学A奋力一吹，数据显示1000多一点，大家正在讨论的时候，校医悠悠的来了句：同学，你要多注意啊！你这个肺活量和女友kiss的时候容易窒息啊……&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqHYgQEZ26Z7BcxsNXTGRM1327pAjj0Zr94EwWl05gfHhH1q5ibWT99tg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;16、【本命年的毒鸡汤】&lt;/strong&gt;有人问本命年怎么办，14亿人口每年本命年的占1/12，加上生肖刑冲害，全国每年有大约6.6666666666亿人犯太岁，这个虚假数据告诉我们，本命年、犯太岁的说辞就是个笑话。弱者恒弱，强者恒强，每年认为自己过得不好的人远远不止这个数，所以本命年过得不好不要灰心，人要向前看，明年会更倒霉的。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqV1GkwFgy0wj31xEwoFudw9Ays6qJ1H56S4jCAoE8HMiciaC7rGIGT7QQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;17、养孩子就像发射火箭&lt;/strong&gt;，花费数年的心血精心确保每个细节和&lt;em class="red" style="box-sizing: border-box;"&gt;数据&lt;/em&gt;的正确，时刻警醒不让火箭有任何偏离轨道的可能。最后一朝发射成功，然后火箭就消失在茫茫的太空，只剩下定期不定期的发回来一些微弱的信号：生活费，生活费，生活费……&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqIhUYL1piaW1XmVBJlUwZZYicAFsXQdHQNEsQJvg5Iib35GfjM2OPyA90A/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;18、问：程序猿最讨厌康熙的哪个儿子&lt;/strong&gt;？答：胤禩，因为他是八阿哥(bug)。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqxU6LedrHgovrLy7M91ykhq10omsAiaib4Tg4yiash4Rb4jZAfA9LsXpXQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;19、据说有一位软件工程师，一位硬件工程师和一位项目经理同坐车参加研讨&lt;/strong&gt;会。不幸在从盘山公路下山时坏在半路上了。于是两位工程师和一位经理就如何修车的问题 展开了讨论。硬件工程师说：“我可以用随身携带的瑞士军刀把车坏的部分拆下来，找出原因，排除故障。”项目经理说：“根据经营管理学，应该召开会议，根据 问题现状写出需求报告，制订计划，编写日程安排，逐步逼近，alpha测试，beta1测试和beta2测试解决问题。”软件工程说：“咱们还是应该把车 推回山顶再开下来，看看问题是否重复发生。”&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqibiaAiaCTwgxGIwt84KqialMFZ4VlR3W6g8YP8pWWBFnjmqOvk2UycSibEw/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;20、程序员找不到对象，一般有三种情况：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;一、 C# JAVA都有对象，但是经常找不到对象。&lt;/p&gt;&lt;p&gt;二、ASM C直接没有对象。&lt;/p&gt;&lt;p&gt;三、javascript都是伪对象，最多算暧昧。&lt;/p&gt;&lt;p&gt;但C++日子一直都好过，因为C++是多继承，富二代呀！！！&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqiazg6U6pFzWKHiazq1gRI8pDelK1Y69AfsdE38VljAfw08iaxYxxBhv2g/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;21、有人说，女程序员再淑女，一旦编程就会暴露自己的身份&lt;/strong&gt;，习惯性的把前额的头发往上捋，露出大大的额头。因为CPU高速运作时需要良好的散热。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqzoq6SmxdmP0oKP6IO7MHAVUe5iaSp806TV04dhZC87hiaqpsI5VX0UkA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;22、曾经有只蟒蛇（Python）&lt;/strong&gt;，遇到一只大象（PHP），蟒蛇吞掉了大象，就成了大人眼中的帽子。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqt80fv8OkN4gGjib6rTy8dtiafhaCR2HxfUH8aqz2IYic8JWzqiamibdnrLA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;23、神秘的程序员&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqMzGeiaICoEDT1RrUuuvzjaMKW1lkPnMXMguhmUkHAgxpud4PNh9iaSkg/0?wx_fmt=gif"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;24、一个腼腆的程序员&lt;/strong&gt;，写了一张纸条给心仪女生表白：5201314(我爱你一生一世)。 女生回了纸条写道：(520+1314)X10。&amp;nbsp;&lt;em class="red" style="box-sizing: border-box;"&gt;程序&lt;/em&gt;&lt;em class="red" style="box-sizing: border-box;"&gt;员&lt;/em&gt;欣喜若狂！ 旁边朋友说：咦？计算结果是 18340 (一巴搧死你!) ………………今儿个，你表白了嘛？&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqjFZRQoKXJ9j591k9P3FfjvlVDAc1e7zoZDUh6vTWKBibxRnIW7DX1tw/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;25、论如何和程序员沟通？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqVANLVU42qMf8BGhoDlPQ09pJib4YaqeHia4icQMps3Y7mhmqmI9Eg2iasA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;26、程序员的世界我们不懂，看明白的举个手&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqf842NXcV77Gc9cqDM0vO0IF3U5egbV3sKTuTdtx6OM4BuUpZGtWiajg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;28、最后一个段子求横批：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;上联：为系统而生，为框架而死，为bug奋斗一辈子！下联：吃符号的亏，上大小写的当，最后死在需求上！&lt;/p&gt;&lt;p&gt;&lt;span&gt;本对联求横批，欢迎你在评论里写下横批~~&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqurKYDVG2RH2TEoJqv1vqF7nmkC4OCmde9ZyFW7iby4LKCmibxX9OQWaQ/0?wx_fmt=png"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;2017&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;鸡&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;年&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;大&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;吉&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;HAPPY &amp;nbsp;NEW &amp;nbsp;YEAR&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;点&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;这里“阅读原文”，查看更多&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 03 Feb 2017 07:34:53 +0800</pubDate>
    </item>
    <item>
      <title>大数据平台Docker应用之路</title>
      <link>http://www.iwgc.cn/link/4552759</link>
      <description>&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqgDWAPXVJr7Q3IotZ8WQneKPdVSEGN1xUXUouiaDBWp6hZGTLDh3NMLQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;文|联想大数据团队&lt;em style="box-sizing: border-box;"&gt;（本文由联想大数据团队独家投稿36大数据，新年新开始，拒绝转载!）&lt;/em&gt;&lt;/p&gt;&lt;p&gt;随着大数据平台型产品方向的深入应用实践和Docker开源社区的逐渐成熟，业界有不少的大数据研发团队开始拥抱Docker。简单来说，Docker会让Hadoop平台部署更加简单快捷、让研发和测试团队集成交付更加敏捷高效、让产线环境的运维更加有质量保障，而这背后的业务场景和具体的实践方法有哪些？在Docker容器服务逐步走向完善的过程中，大数据平台产品Docker模式的应用又是如何解决的？正是本文所着重阐述的。&lt;/p&gt;&lt;h2 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;实践中发现问题&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;场景一&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在大数据平台型产品的开发过程中，经常要跟许多模块打交道，包括Hadoop、HBase、Hive、Spark、Sqoop、Solr、Zookeeper……等多达几十个开源组件，为了不影响团队成员间的工作任务协同，开发人员其实非常需要自己有一套独立的集群环境，以便反复测试自己负责的模块，可真实的企业开发环境往往只有一两个大的虚拟集群，这可怎么办？难道要给每个开发人员都配几台独立的物理机器？&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqdKnibibUpA98D7N7zQBojRfJqOm65nOl5SSoX45gsQ5LYLRzz2HlZEzg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;场景二&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;针对每一次新版本的发布，产品测试组都需要反复的重装整个平台以便发现问题，而正如本文前面所阐述的那样，大数据平台所依赖的组件繁多，不同组件模块依赖的底层库也不尽相同，经常会出现各种依赖冲突问题，而一旦安装完成，就很难再让Linux系统恢复到一个非常干净的状态，通过Remove、UnInstall、rpm -e等手动方式卸载，往往需要花费很长的时间，那如何才能快速地恢复大数据平台集群的系统环境？&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqf7NH9S7NI1eibGZIYibFItYbJjLjcy5fkibPz2NFsICJ4rP1ibFsIK6wcg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;场景三&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当测试人员在测试大数据平台过程中发现了一个Bug，需要保存现场，这里面包括相关的大数据组件配置、进程状态、运行日志、还有一些中间数据，可是，平台集群服务器节点数量很多，针对每个进程的配置目录和日志文件，都相对较独立，一般都需要专业的开发工程师或者运维工程师进入相关服务器节点，按照不同组件的个性化配置信息，手工方式收集所需的各个条目信息，然后打包汇集到日志中心服务器进行统一分析，而目前业界并没有一款能够自动分布式收集故障相关的日志系统，但测试工作还要继续，怎么办？&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqdFmt1SWCSqfzrsUxgKQB2KVZiaJ0zFGRRau5CJ6Y1o38fIsP83ohPqA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;场景四&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如何把一个部署好的大数据平台快速地迁移到其它地方？&lt;/p&gt;&lt;p&gt;你得注意以下几点：&lt;/p&gt;&lt;p&gt;1，如果是关键业务系统，数据不能丢；&lt;/p&gt;&lt;p&gt;2，如果是迁移物理机，机器可能会坏；&lt;/p&gt;&lt;p&gt;3，如果是不间断实时在线业务，要保证快速平稳切换。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqs3CxlHHJicjicPZHrhdl9w7hs5tBiaFT0DoR7dHbHA9LIG9k4D4e7QGYQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;传统解决方案的缺陷&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;想要解决这些问题，第一个想到的方案当然是用虚拟机，而笔者经历的团队，之前也确实用的就是虚拟机，但这种方式并不能完美的解决以上问题，比如：&lt;/p&gt;&lt;p&gt;1.虽然虚拟机也可以完成系统环境的迁移，但这并不是它所擅长的，不够灵活，很笨重。&lt;/p&gt;&lt;p&gt;2.虚拟机的快照可以保存当前的状态，但要恢复回去，就得把当前正在运行的虚拟机关闭，所以并不适合频繁保存当前状态的业务场景。&lt;/p&gt;&lt;p&gt;3.虽然可以给每个人都分配几个虚拟机用，但它是一个完整的系统，本身需要较多的资源，底层物理机的资源很快就被用完了，所以我们需要寻找其它方式来弥补这些不足。&lt;/p&gt;&lt;h2 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;Docker技术的引入&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案，换句话说，它可以让我们把一台物理机虚拟成多台来使用，而且它还可以保存修改、完整迁移到其它地方、性能损耗小等等好处，能够很好解决我们之前遇到的问题。&lt;/p&gt;&lt;p&gt;那为什么不用虚拟机方案？&lt;/p&gt;&lt;p&gt;简单来说，因为它比虚拟机更轻便，启动一个Docker容器只要几秒种的时间，在一台物理机上可以创建几百上千个容器，而虚拟机做不到。&lt;/p&gt;&lt;p&gt;下面是虚拟机与Docker两种方案的实现原理：&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqyuoSpg2OdCCMicL4RXu9gtrp0hVzHhmnJnEQgz8xU33nNlkEnAskHyQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;VM设计图&lt;/p&gt;&lt;p&gt;虚拟机实现资源隔离的方法是利用独立的OS，并利用Hypervisor虚拟化CPU、内存、IO设备等实现的。例如，为了虚拟CPU，Hypervisor会为每个虚拟的CPU创建一个数据结构，模拟CPU的全部寄存器的值，在适当的时候跟踪并修改这些值。需要指出的是在大多数情况下，虚拟机软件代码是直接跑在硬件上的，而不需要Hypervisor介入。只有在一些权限高的请求下，Guest OS需要运行内核态修改CPU的寄存器数据，Hypervisor会介入，修改并维护虚拟的CPU状态。&lt;/p&gt;&lt;p&gt;Hypervisor虚拟化内存的方法是创建一个shadow page table。正常的情况下，一个page table可以用来实现从虚拟内存到物理内存的翻译。在虚拟化的情况下，由于所谓的物理内存仍然是虚拟的，因此shadow page table就要做到：虚拟内存-&amp;gt;虚拟的物理内存-&amp;gt;真正的物理内存。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrquXhtMGl8L1YhZf1WalgQHhQJhFQAL7sdvpYbKhy9e2ubgv4S9ZwDYw/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Docker设计图&lt;/p&gt;&lt;p&gt;对比虚拟机实现资源和环境隔离的方案，docker就显得简练很多。docker Engine可以简单看成对Linux的NameSpace、Cgroup、镜像管理文件系统操作的封装。docker并没有和虚拟机一样利用一个完全独立的Guest OS实现环境隔离，它利用的是目前Linux内核本身支持的容器方式实现资源和环境隔离。简单的说，docker利用namespace实现系统环境的隔离；利用Cgroup实现资源限制；利用镜像实现根目录环境的隔离。&lt;/p&gt;&lt;p&gt;当新建一个容器时，docker不需要和虚拟机一样重新加载操作系统内核。我们知道，引导、加载操作系统内核是一个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统，则省略了这个过程，因此新建一个docker容器只需要几秒钟。另外，现代操作系统是复杂的系统，在一台物理机上新增加一个操作系统的资源开销是比较大的，因此，docker对比虚拟机在资源消耗上也占有比较大的优势。事实上，在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。&lt;/p&gt;&lt;p&gt;可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。当然，一些容器核心模块依赖于高版本内核，存在部分版本兼容问题。&lt;/p&gt;&lt;h2 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;如何基于Docker实现大数据平台的敏捷部署与运维？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;第一步：搭建基础的Docker环境&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在实践过程中，部署一套可用的大数据平台Docker环境，必需做好以下前提工作：&lt;/p&gt;&lt;p&gt;1.搭建私有镜像仓库，用来统一存放构建好的镜像文件&lt;/p&gt;&lt;p&gt;2.搭建一个安装包仓库，用来存放我们发布的各种版本的大数据组件安装包&lt;/p&gt;&lt;p&gt;3.配置多个物理机上的Dcoker容器可以相互通信，可参考官方给出的方案&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第二步：为大数据平台定制基础镜像&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1.既然要在Docker容器内安装我们的大数据平台，那就需要一个统一的Linux系统做为我们的Dcoker容器，像Ubuntu、CentOS等发行商都会发布自己的Docker基础镜像到Docker Hub上，如果Docker Hub上恰好没有你需要的镜像，也可以自己制作。&lt;/p&gt;&lt;p&gt;2.比如用CentOS6.8做为我们的基础镜像，那么请先把它pull下来&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqoqUsNnibicicCdmNpYGVFdLhUnKv0ncPk5Res8s925iaicNqov7ToZfo55Q/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;3.然后我们用这个镜像创建一个容器，并在里面配置一些我们大数据平台依赖的参数，比如ntpd、httpd服务等等，最终生成我们平台专属的基础镜像。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqaEQPOMJtXs6co2Jht8mF8Euqyntatnzye5iaZFWjMnEqNw2OjKE05ow/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;4.这是很关键的一步，有了它以后，所有人员可以随时创建一个自己需要的Linux环境出来，以便在其内进行产品的研究和实验，且每个人的环境互不相干，当容器内的环境被破坏后，可以删掉再创建，这样一来，场景一和场景二所遇到的问题也就迎刃而解。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第三步：将已经部署好的集群做成镜像&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们可以把已经部署了集群的容器保存成多种镜像，如：只包含了Hadoop的集群、同时包含Hadoop、Zookeeper、Hbase的集群，或安装了所有组件的集群等等，然后上传到私有仓库，其它人需要的时候，直接启动自已需要的集群就可以了，因为免去了部暑与配置等步骤，因而大幅度提高了工作效率，也提高了产品迭代速度。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqeYeAjQYdTPryG2pQMDe6wXn5QdnYXmMdnZO8WStNGibJvtUBbh4ZjNQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;上图是已经做好的镜像，图中共三种类型的镜像：&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 16px; color: rgb(102, 102, 102) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;第一个箭头指基础镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;第二个箭头指的是已经安装了大数据平台的镜像，因为是分布式，所以有五个&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;第三个是单节点版的大数据集群，所以只有一个镜像&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;第四步：镜像的修改与保存&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Docker提供了commit功能可以将一个正在运行的容器保存起来，假如在测试过程中遇到一个Bug并且需要先保存下来，执行一条简单的命令即可，如：&lt;/p&gt;&lt;p&gt;# docker commit container_name image:v2&lt;/p&gt;&lt;p&gt;在以后需要复现的时候用这个镜像创建容器即可，像下面这样&lt;/p&gt;&lt;p&gt;# docker run -tid –name c1 image:v2 bash&lt;/p&gt;&lt;p&gt;但注意，并不是所有状态都能被保存下来，它只保存文件层面的状态，不能保存内存中的状态，所以再次启动容器的时候，容器内的所有服务都已经变成了停止状态，需要再手动启动一次，这样就导致有些类型的Bug不能复现。&lt;/p&gt;&lt;p&gt;不过欣慰的是，Docker官方打算在后面的版本中加入checkpiont功能，它可以保存容器中的所有状态，这样就可以完整地复现Bug，这个新功能的用法就像下面这样：&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqFJib2X96pJXFeEEtVKib2GKgOOqKI6IbtNh5p8TYKwatqNAZSExtmrtQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;这个功能对很多人来说，绝对是个好消息！&lt;/p&gt;&lt;h2 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;第五步：脚本化部署、监视、删除&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;当然了，每个人都不应该把过多的精力放在怎么使用Docker的问题上，这样会为团队带来额外的工作量，最简单的办法当然是把所有重复性的工作脚本化，向每个人提供最简便的使用接口，只需要一条简单的命令就可以创建自己想要的集群环境，当不需要的时候一条命令即可删除，这样即降低了学习成本又解决了容器管理问题。&lt;/p&gt;&lt;p&gt;根据笔者的实践经验，脚本化的实现应该着重考虑几个方面：&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 16px; color: rgb(102, 102, 102) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;1.多种类型集群的创建&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2.记录每个集群的所属者，容器所属的物理机，创建时间等等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3.可实时查看所有容器的运行状态，物理机资源使用情况&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;4.删除指定的集群&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;现在已经有很多开源的Docker容器管理框架，但需求总是复杂多变的，并不能适用所有的场景。比如笔者所负责的大数据平台就需要为每个容器做端口映射、内含大数据组件的镜像在启动后还需做Hostname与IP映射等，总之，目前开源容器框架的易用性还有很大的改进空间，都存在一些手动配置的工作。&lt;/p&gt;&lt;p&gt;关于容器服务，在具体的实践过程中，一定还会遇到很多问题，比如服务发现和编排。当下在应用层面虽还算不上特别的成熟，但已经使原本部署与配置很复杂的大数据平台变得简单快速，让一部分研发团队的产品迭代得到加速。当然，不管是大数据平台产品，还是Docker开源社区本身，都还在不断的完善中。&lt;/p&gt;&lt;p&gt;&lt;em style="box-sizing: border-box;"&gt;本文由 联想大数据团队 投稿至36大数据，并经由36大数据编辑发布，转载必须获得原作者和36大数据许可，并标注来源36大数据http://www.36dsj.com/archives/75999，任何不经同意的转载均为侵权。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqurKYDVG2RH2TEoJqv1vqF7nmkC4OCmde9ZyFW7iby4LKCmibxX9OQWaQ/0?wx_fmt=png"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;2017&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;鸡&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;年&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;大&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;吉&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;HAPPY &amp;nbsp;NEW &amp;nbsp;YEAR&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;点&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;这里“阅读原文”，查看更多&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 03 Feb 2017 07:34:53 +0800</pubDate>
    </item>
    <item>
      <title>关于.NET玩爬虫这些事</title>
      <link>http://www.iwgc.cn/link/4552760</link>
      <description>&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqhcPX6cpCIxntHgPtkYK5hB7p5AftNhOXtvaeB0qyjicnqj71N174VeQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;作者|张柔&lt;/p&gt;&lt;p&gt;这几天在微信群里又聊到.NET可以救中国但是案例太少不深的问题，我说.NET玩爬虫简直就是宇宙第一，于是大神朱永光说，你为何不来写一篇总结一下？&lt;/p&gt;&lt;p&gt;那么今天就全面的来总结一下，在.NET生态下，如何玩爬虫&lt;/p&gt;&lt;h2 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;关于爬虫&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;从搜索引擎开始，爬虫应该就出现了，爬的对象当然也就是网页URL，在很长一段时间内，&lt;strong&gt;爬虫所做的事情就是分析URL、下载WebServer返回的HTML、分析HTML内容、构建HTTP请求的模拟、在爬虫过程中存储有用的信息等等&lt;/strong&gt;，而伴随着App的发展以及CS系统通讯方式的HTTP化，&lt;strong&gt;对服务接口特别是HTTP RESTFul接口的爬虫也开始流行&lt;/strong&gt;。爬虫的具体形式，包括模拟浏览器行为和模拟HTTP行为。在爬虫的发展过程中，也涌现出无数的工具和语言实践，而今天要说的就是，.NET生态是爬虫最好的伴侣&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;一、先谈一谈对于爬虫的理解&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;很多人在研究爬虫的初期，热衷于进行浏览器行为的模拟，包括使用一些语言中的WebBrowser控件或者类似PhantomJS这样的无头浏览器，来模拟真实Web行为，进行Dom元素的填写、按钮点击、滚动条操作等等。虽然这样的做法更接近真实场景，但由于浏览器事件的复杂性，在批量高速的处理场景中，这样的做法稳定程度会大打折扣，我个人非常不赞同这样的理念。我认为只有从本质上对Web行为进行HTTP的分析，才是关键，任何复杂的浏览器行为，最终都可以准确的拆分为JS逻辑和HTTP行为，所以想要掌握好爬虫技术&lt;strong&gt;，对HTTP的理解和分析至关重要。&lt;/strong&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;二、那么第一个神器就登场了，Fiddler&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqD7wcficK4Nf6hUN8U5gx1mDicvcorJjS86wvF5TmGPSs30NGwJWot2vQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;虽然不是最早一批诞生的嗅探器，但&lt;strong&gt;Fiddler得益于.NET框架的强大并且融合了一个基于JScript .NET的子系统&lt;/strong&gt;，敏捷而全面嗅探的功能快速的获得了市场的认可，积累了大量用户，而在被.NET控件开发公司Telerik收购后，发展迅猛，更推出了脱离UI的跨平台库FiddlerCore，可以将嗅探行为融入到大型搜索网络和爬虫系统或者是&lt;strong&gt;外挂应用中&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Fiidler是.NET红利的下的优良产物，而一个好的爬虫开发工程师，首要学习目标就是对HTTP的嗅探分析，这时候Fiddler就必不可少了。在这里列举Fiddler几个常见的用法&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）HTTP行为捕捉&lt;/strong&gt;。这是基本功能，打开Fiddler后，浏览器或者一般进程有任何通讯发生，都会记录下具体的HTTP请求和响应。并且根据Content-Type自动显示为具体的内容，当然了，我推荐直接分析RAW信息，直观明了也能更深刻的理解HTTP。&lt;strong&gt;本功能常用功能场景有，分析网页行为、分析应用程序行为、手工获取登陆Cookies等&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）HTTPS支持&lt;/strong&gt;。Fiddler在添加一个本地证书后，可以完整的支持对HTTPS链接的抓取。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）手机应用抓包&lt;/strong&gt;。现在很多手机应用都使用了RESTFul的后端接口，但在手机上抓取的难度和代价都较大，替代的解决方案是，在Fiddler里面，开启一个HTTP代理服务器，并设置端口，当手机的WIFI网络和Fiddler客户端网络在同一局域网网段时，设置手机的WIFI网络的代理地址为Fiddler的HTTP代理服务器地址，这样手机上任何App的HTTP通讯，都会被Fiddler抓取到。&lt;strong&gt;本功能常用功能场景有&lt;/strong&gt;，&lt;strong&gt;手机App抓包、远程代理测试等&lt;/strong&gt;。而这一用法也常常&lt;strong&gt;和安卓模拟器进行配合&lt;/strong&gt;，可以在PC上完成全部手机应用的通讯行为的分析。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）HTTP模拟器&lt;/strong&gt;。Fiddler内置一个请求构造器（Composer），可以手工构建任何HTTP行为，&lt;strong&gt;本功能常用场景有，手工抓取与爬虫测试。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5）HTTP劫持&lt;/strong&gt;。Fiddler可以拦截HTTP请求，并响应修改后的数据，&lt;strong&gt;这一用法常见于外挂软件的研发过程&lt;/strong&gt;，在应用时，则多是&lt;strong&gt;FiddlerCore库在外挂系统中的使用&lt;/strong&gt;。这里不得不补充一句，在这之前，最流行的是&lt;strong&gt;&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;winpcap&lt;/a&gt;&lt;/strong&gt;库（或者winpcap库的.NET封装&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;strong&gt;Pcap.Net&lt;/strong&gt;&lt;/a&gt;、&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;strong&gt;sharppcap&lt;/strong&gt;&lt;/a&gt;等），虽然winpcap的工作原理使得其应用范围更广，但FiddlerCore无疑已经成为了当前应用端最炙手可热的领域库。&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;三、接下来再说一下.NET对HTTP的操控能力&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrq4uOhOkRhNlpia2HkGbs7OibpI6Pck4GxHhDDr2XNPnm147dN0JyjVTAg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;爬虫的主要逻辑部分，即是通过程序对HTTP进行操控，包括对&lt;strong&gt;目标URL的下载&lt;/strong&gt;、对&lt;strong&gt;模拟HTTP请求&lt;/strong&gt;的构造。有趣的是，即使只用System.Net下，WebClinet和HttpWebRequest这两个类，就已经能够满足99%的爬虫场景。下面列举一些常用的场景&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）URL快速下载（上传）&lt;/strong&gt;。使用WebClinet对URL进行浏览并下载，可以说&lt;strong&gt;代码清晰、支持丰富&lt;/strong&gt;。包括&lt;strong&gt;编码格式&lt;/strong&gt;、&lt;strong&gt;下载格式&lt;/strong&gt;、&lt;strong&gt;异步下载&lt;/strong&gt;、&lt;strong&gt;Form上传&lt;/strong&gt;、&lt;strong&gt;参数拼接&lt;/strong&gt;等等各种。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqqC32ubL4gCIibGKbRhsNXhw09eXNWMBG8hAlGNxpWJfre957IIqN9Vg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）HTTP请求构造&lt;/strong&gt;。在很多场景中，需要伪造Referer、UserAgent、ContentType等等，从一个语言的HTTP库对HTTP协议的支持&lt;strong&gt;细腻程度&lt;/strong&gt;可以看出其是否亲爬虫，幸运的是，HttpWebRequest确实足够全面，能够满足所有的自定义需求。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqQ70euyn5m6zVTE5oeKlic5uGDjG7HnohAV5ORPCz4obgBQp3fvHAa8g/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）Cookies处理&lt;/strong&gt;。虽然Cookies已经逐渐淡出历史的舞台，但依然有大量的Web开发框架是以Cookie为支撑做Session体系的，所以Cookie的灵活操作也非常重要。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrq9rAMgZCcOwrGaPC4ALohiaLczhrqyXXANJgvsDeJYxwdCTc7t0JPvRg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）代理服务&lt;/strong&gt;。有时候目标服务器会对IP访问做限制，这时候使用代理服务器以及不停的更换代理服务器就非常重要了，如下处理也很简洁&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqQBVuzliaqrrI04E5MzibklMlDgbgic3M60abKSIsZqo6tPmlHksxMOW7A/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;不过，也承认一下缺陷，Socks4或者Socks5代理也是会偶尔出现在爬虫处理中，而HttpWebRequest并不直接支持，而我之前用到过一个非常好的网络处理库（收费的，还有EMail处理等各种），有完整的Socks5支持，但是好多年了，记不得名字了，有知道的同学可以告诉我，我补充到这篇文章里。&lt;/p&gt;&lt;p&gt;当然了，得益于.NET语言的强大，除了WebClinet和HttpWebRequest这两个老古董外，还有不少好东西，比如&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）HttpClient&lt;/strong&gt;。这是.NET4.5框架里带来的新东西，相比HttpWebRequest，HttpClient更像是一个&lt;strong&gt;无头浏览器&lt;/strong&gt;，对&lt;strong&gt;异步的支持&lt;/strong&gt;也更加完备，&lt;strong&gt;处理逻辑&lt;/strong&gt;也更加合理，建议一直用HttpWebRequest做爬虫的同学可以迁移到HttpClient来。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）其他基于.NET的第三方HTTP库或者知名HTTP的.NET实现。&lt;/strong&gt;例如&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;strong&gt;RestSharp&lt;/strong&gt;&lt;/a&gt;，&lt;strong&gt;&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;EasyHttp&lt;/a&gt;&lt;/strong&gt;，&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;strong&gt;Indy.Sockets&lt;/strong&gt;&lt;/a&gt;等等，这些库对HTTP进行更加便捷方便的封装，有兴趣的同学也可以试一试，当然了，在这里我也提一个建议，&lt;strong&gt;不要沉迷于对HTTP请求便捷的封装，.NET也不例外，这会让你远离HTTP的本质，对爬虫能力的提升并无帮助。&lt;/strong&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;四、内容处理也是.NET的强项&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在做内容型爬虫时，会出现很多对下载后的内容进行处理的场景，主要也就是对文本的处理，这里又一次体现了.NET的优势，包括&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）String类及周边类&lt;/strong&gt;。我们来看一张图&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqXagGW0WFTf3dDCzgBIlK4z05sqN1lxOQica5wHoicvwzHJTicTkiaNZG8A/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;这里基本上涵盖了对字符串的所有处理方法，&lt;strong&gt;结构清晰、使用方便&lt;/strong&gt;。除此之外，还有很多周边类，诸如&lt;strong&gt;Char&lt;/strong&gt;、&lt;strong&gt;StringBuilder&lt;/strong&gt;、&lt;strong&gt;Encoding&lt;/strong&gt;等等，用过的都知道好！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）正则处理&lt;/strong&gt;。老实说，&lt;strong&gt;正则的学习成本往往会高于使用成本&lt;/strong&gt;，有时候简单的场景用一些基本的算法和字符串处理比正则要方便的多，但作为顶级爬虫玩家，&lt;strong&gt;正则处理是一门必须掌握的技能&lt;/strong&gt;，而一旦你深入而且熟练的掌握了正则处理方法，那么对字符串的查找、重复数据的处理的效率将会&lt;strong&gt;迈上新的台阶&lt;/strong&gt;。.NET下正则的处理在&lt;span&gt;&lt;strong&gt;System.Text.RegularExpressions&lt;/strong&gt;&lt;/span&gt;命名空间里。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）Javascript模拟&lt;/strong&gt;。正如前面所说，所有复杂的浏览器行为，最终都可以准确的拆分为JS逻辑和HTTP行为，很多复杂逻辑或者加密的页面，直接下载到的数据还需要经过一些&lt;strong&gt;JS处理&lt;/strong&gt;，才能够变成有用的数据，这个时候&lt;strong&gt;Microsoft.JScript&lt;/strong&gt;命名空间的作用就凸显了，可以快速方便的模拟一些Javascript的内置方法，特别是&lt;strong&gt;时间类&lt;/strong&gt;、&lt;strong&gt;数学类&lt;/strong&gt;、&lt;strong&gt;加密类&lt;/strong&gt;的一些古怪方法，避免走弯路。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）序列化与反序列化（JSON、XML处理）&lt;/strong&gt;。很多新应用的通讯格式多为XML或者JSON，对于此类内容的处理，会涉及到很多JSON、XML序列化反序列化，其中也以JSON序列化居。&lt;/p&gt;&lt;p&gt;首先是XML的处理，.NET中有&lt;strong&gt;System.Xml.Serialization&lt;/strong&gt;命名空间或者&lt;strong&gt;System.Runtime.Serialization.DataContractSerializer&lt;/strong&gt;等。而对XML处理的&lt;strong&gt;关键&lt;/strong&gt;，在于能够灵活的&lt;strong&gt;自定义符合XML标准的内容&lt;/strong&gt;，例如如下代码：&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqIewxJNibaLfkAyfOiacRhTNwX2zMRnw8AibbF62MPye6gkN91Rx6ebZ5g/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;然后是JSON的处理，虽然JSON标准并没有XML那么复杂，但想要灵活处理，也需要好的框架和工具支撑，在.NET里面，有下面几个好东西推荐&lt;/p&gt;&lt;p&gt;第一个推荐的是&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;strong&gt;Json.NET&lt;/strong&gt;&lt;/a&gt;，这是一个非常流行的JSON处理工具，具体用法不细说，贴几个官方的介绍代码&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqLhzaykdNhlQXZ72OwWAqHCGEic9bmz5FAGAdT389mualMISLpTcn7hg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;第二个推荐的是&lt;strong&gt;&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;Jil&lt;/a&gt;&lt;/strong&gt;，这是一个速度更快、更加敏捷且&lt;strong&gt;细粒度更高&lt;/strong&gt;的JSON处理库，&lt;strong&gt;与.NET动态语言特性配合&lt;/strong&gt;，能够写出如下优雅且实用的代码&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqnibaREJIowUEaBia5NrnoicMehTaXJUHrDUaEDPdXRVqoqiczIwQ3micmYg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;总之一句话，这样科班而正统的序列化处理体系，不仅能力强大，更让人心情舒畅！&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;五、.NET下，敏捷地存储数据会是一个好帮手&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;爬到的数据不可能总是在内存里操作，大部分时候，也需要存为临时文件或者数据库数据。而.NET在这里的优势依然非常明显。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）保存到文本文件&lt;/strong&gt;。.NET提供了很多类，可以方便的操作文本文件，例如下面这样的&lt;strong&gt;超敏捷文本文件操作&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqSIwurPs5Hz2tiaWWyH3pGpcPNMGHXZa5ibAaq3VWr4jomGkEBNQ0GQIg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;除此之外，还有FileStream、StreamReader等强大的文件操作类可供使用。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）保存到数据库&lt;/strong&gt;。爬虫程序对目标进行一系列处理后，有用的数据会存入数据库，如果说在.NET下对SQL Server、MySQL、Oracle、SQLite等数据库的&lt;strong&gt;全面支持&lt;/strong&gt;是一辆性能十足的跑车，那&lt;strong&gt;Linq语法糖&lt;/strong&gt;加上两个&lt;strong&gt;ORM框架&lt;/strong&gt;（&lt;strong&gt;Linq To SQL&lt;/strong&gt;、&lt;strong&gt;ADO.NET Entity Framework&lt;/strong&gt;）则是给这个跑车加了个涡轮增压。可以让我们用最敏捷漂亮的方式，将爬虫数据存入到数据库中，简洁到窒息&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqtROfT4EHU6nF2Scib98ICqUdclwagIQMyXnTNUDJAibty4xy9G7uCETA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;如果有大批量数据快速插入需求，同样也有&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;strong&gt;Z.EntityFramework.Extensions&lt;/strong&gt;&lt;/a&gt;这样的第三方扩展组件可供使用。&lt;/p&gt;&lt;p&gt;凡此种种，&lt;strong&gt;只为让数据处理不要成为爬虫研发的累赘和束缚&lt;/strong&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;strong&gt;&lt;span&gt;六、.NET生态数不胜数的优秀特性让爬虫开发变得优雅&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;除了以上这些和爬虫直接相关的内容，.NET还有无数的优秀的特性，可以让爬虫开发如虎添翼，我列举几个&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）WinForm开发&lt;/strong&gt;。.NET的WinForm开发，应该是自Delphi后，&lt;strong&gt;效率最高的桌面UI开发方式&lt;/strong&gt;了，虽然和爬虫没太大关系，但是如果能够熟练用好WinForm，完全可以&lt;strong&gt;替代控制台应用&lt;/strong&gt;，来进行&lt;strong&gt;爬虫研发&lt;/strong&gt;，提高研发效率，&lt;strong&gt;谁都别装逼&lt;/strong&gt;（特别是Linuxer、Macer等），毕竟，复杂可视化比控制台样方便多了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）多线程处理&lt;/strong&gt;。即使是在.NET 2.0时期，委托相关机制，便已革新了Win32的多线程API使用方式，而进入到Task并行库时代后，更是优美到飞起，例如下面这两种常见的多线程处理方式&lt;/p&gt;&lt;p&gt;&lt;strong&gt;同步语句，异步处理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqWEMGCiaPQq0VUgFkPGUzIvGS5pricKicHCvNV78KNEq3H38CFak9Fx3Hw/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;线程并发，灵活跳出&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqy3cakBL9Zzs62sGHN2zg3VzOfaEODiburpOYb6FGOQn6EPhD9ojKyYg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;我想，事已至此，其他所有的语言（.NET体系除外），都是望尘莫及吧。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）定时处理&lt;/strong&gt;。定时处理在很多爬虫场景里面都会用到，这里也简单提一下，在.NET里处理定时可以采用两种方式，1、是编写&lt;strong&gt;WIndows Service服务&lt;/strong&gt;来进行定时任务的控制，2、是用&lt;strong&gt;定时云服务&lt;/strong&gt;（阿里云监控、腾讯云拨测等）唤醒一个IIS托管的ASP.NET Web Application。特别是第二种方式，思路新颖，经我实践也非常稳定可靠，有兴趣的同学可以试一试。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5）其他优秀特质&lt;/strong&gt;。.NET架构和.NET体系语言因&lt;strong&gt;Anders Hejlsberg的&lt;/strong&gt;伟大而伟大，数不胜数的优秀语言特质，在任何一个聪明的开发人员面前，都是宝藏，诸如&lt;strong&gt;泛型&lt;/strong&gt;、&lt;strong&gt;扩展方法&lt;/strong&gt;、&lt;strong&gt;动态语言特性&lt;/strong&gt;、&lt;strong&gt;Lamada表达式&lt;/strong&gt;、&lt;strong&gt;反射&lt;/strong&gt;等等，到底对爬虫的开发有何帮助，只待大家去慢慢体验和挖掘咯&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;七、规模化、系统化的爬虫，.NET下的软件工程&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;当出现&lt;strong&gt;庞大目标&lt;/strong&gt;、&lt;strong&gt;复杂策略&lt;/strong&gt;的时候，客观上下载器就要升级为下载系统、多线程处理扩充了队列处理、定时程序就也演变为任务体系，这个时候，爬虫程序就升级成了&lt;strong&gt;规模化的爬虫系统&lt;/strong&gt;，变成了一个&lt;strong&gt;软件工程的问题&lt;/strong&gt;，正如上面所说，.NET很强，但实践太少，能够深刻理解.NET人也很少。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;.NET处理爬虫很强，可问题是，.NET处理哪个领域不强？都非常强！.NET的软件工程，还有待各位不断的去探索，去发扬！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqkNC7SicTNH8IQdYdPckicicmvwfqhj9Kv0Wffj0VwkvV7CsYFpA2GibU6g/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;七、最后再补充一个附加题，就是超高速IPV4的代理IP扫描&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这是我之前很深入研究过的一个课题，虽然和爬虫没有直接的关系，但结果（高匿名HTTP代理）和爬虫也有着密不可分的联系，况且处理过程也非常值得借鉴，所以分享出来&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）先说一下结果&lt;/strong&gt;。借助.NET体系来处理代理IP的扫描，效率极高，产量惊人，实测单节点（100M电信家庭光纤接入）每天可以产生5万个有效的代理IP。下面说一下几个关键点&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）IP段资源和资源处理&lt;/strong&gt;。优质的IP段（特别是机房IP段）以及IP段划分，都是重要的资源，3个关键操作包括，&lt;strong&gt;&amp;nbsp;对纯真等IP地址库存入数据库进行查询&lt;/strong&gt;、&lt;strong&gt;将IP段以一定的模型存入数据库进行查询&lt;/strong&gt;、&lt;strong&gt;建立分布式的IP段处理队列机制&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）SYN高速扫描（S扫描器方式）。&lt;/strong&gt;超高速IPV4的代理IP扫描的核心技术，就是利用TCP/IP漏洞的SYN半连接扫描，有一个使用C写的s.exe扫描器是最常见的用法，基于命令行执行模式，而在.NET中，则可以用&lt;strong&gt;System.Diagnostics&lt;/strong&gt;下面的&lt;strong&gt;Process&lt;/strong&gt;类进行完整的控制和处理，这又一次体现了.NET的价值。本方式下也有个缺陷，就是&lt;strong&gt;仅限Windows Server 2003以下操作系统使用&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）SYN高速扫描（.NET封装SYN方式）&lt;/strong&gt;。正如上文所说，.NET对于&lt;strong&gt;winacap&lt;/strong&gt;有很多成熟的封装，可以做到在&lt;strong&gt;Windows 10操作系统&lt;/strong&gt;下的SYN高速扫描，并控制扫描&lt;strong&gt;更加稳定&lt;/strong&gt;（S扫描器高速但并不稳定），用于&lt;strong&gt;桌面级分布式代理IP扫描&lt;/strong&gt;是绝佳配备。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5）代理IP验证&lt;/strong&gt;。扫描到开放端口的IP地址后，只有验证成功了才能被我们所用，而往往成功率都在&lt;strong&gt;万分之一以下&lt;/strong&gt;，所以验证的过程又是一个关键所在，幸好我们有.NET下的&lt;strong&gt;优秀的多线程处理&lt;/strong&gt;，使得这一验证程序非常简洁和易重构。&lt;/p&gt;&lt;p&gt;如果对此话题有兴趣的同学，可以联系我寻求进一步的帮助，今天篇幅有限，只是简单略过&lt;/p&gt;&lt;h3 style=" box-sizing: border-box ; ; ; ; ; ; ; ; ; ; ; ; "&gt;&lt;span&gt;&lt;strong&gt;八、今天要说的差不多就结束了，下面是总结&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;总结1。&lt;/strong&gt;今天讨论的东西不是爬虫而是.NET如何玩爬虫。也并不是在说.NET某个具体功能如何绝顶厉害，而是在说在.NET生态下的很多出色功能结合到一起后，就变成了一个��常美好&lt;strong&gt;亲爬虫&lt;/strong&gt;的体系。所以无论是从生态能力出发还是&lt;strong&gt;基于学习实践成本的考虑&lt;/strong&gt;，做爬虫程序或是大规模爬虫系统&lt;strong&gt;，.NET一定是首选！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;总结2。&lt;/strong&gt;我试图告诉一些用其他语言正在研究爬虫的人们，你们走了一条&lt;strong&gt;邪路&lt;/strong&gt;，以python比较有名的爬虫框架scrapy为例，这又是一群想建造轮子的忙碌不休的但却又智商不高的程序员所折腾出怪胎，试图统一爬虫的过程，&lt;strong&gt;构建模块化流程化的插件机制&lt;/strong&gt;，但事实上，这种东西用的越多，越远离了爬虫的本质，越不能适应复杂的爬虫场景。爬虫的本质是对目标WebServer&lt;strong&gt;页面行为&lt;/strong&gt;和&lt;strong&gt;业务流程&lt;/strong&gt;的&lt;strong&gt;精准分析&lt;/strong&gt;，是对&lt;strong&gt;HTTP的深刻理解&lt;/strong&gt;，是对&lt;strong&gt;正则&lt;/strong&gt;、&lt;strong&gt;多线程&lt;/strong&gt;等周边技术以及&lt;strong&gt;软件工程&lt;/strong&gt;的灵活运用，爬虫场景稍微复杂变化一下，scrapy这样的爬虫就成了鸡肋，运用scrapy这样的工具，对程序员在爬虫领域的学习成长来说，不仅没有明显帮助，&lt;strong&gt;更显反智&lt;/strong&gt;，我有遇到过相当多做爬虫的同学，连HTTP Header里面有些什么都说不出来说不清楚，却玩爬虫工具6的飞起，这无疑是可悲的。切记&lt;strong&gt;先学会走路，再去跑步&lt;/strong&gt;，而当你深刻的理解了爬虫的本质后，你就会发现，&lt;strong&gt;并没有所谓的爬虫语言或者爬虫框架，只有高效的语言和工具&lt;/strong&gt;，而这时：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;.NET生态就恰到好处的映入你眼前，让你流连忘返！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;作者：张柔，发布于&amp;nbsp;&amp;nbsp;博客园&amp;nbsp; 与&amp;nbsp;&amp;nbsp;张柔的博客&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqurKYDVG2RH2TEoJqv1vqF7nmkC4OCmde9ZyFW7iby4LKCmibxX9OQWaQ/0?wx_fmt=png"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;2017&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;鸡&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;年&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;大&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;吉&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;HAPPY &amp;nbsp;NEW &amp;nbsp;YEAR&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;点&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;这里“阅读原文”，查看更多&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Fri, 03 Feb 2017 07:34:53 +0800</pubDate>
    </item>
    <item>
      <title>梵高油画用深度卷积神经网络迭代十万次是什么效果？</title>
      <link>http://www.iwgc.cn/link/4546134</link>
      <description>&lt;p&gt;作者|浩克匠心（邮箱：arctanxy@126.com）&lt;/p&gt;&lt;p&gt;作为一个脱离了低级趣味的码农，春节假期闲来无事，决定做一些有意思的事情打发时间，碰巧看到这篇论文：&amp;nbsp;A neural style of convolutional neural networks，译作卷积神经网络风格迁移。 这不是“暮光女”克里斯丁的研究方向吗？！连好莱坞女星都开始搞人工智能发paper，真是热的可见一斑！&lt;/p&gt;&lt;p&gt;这篇文章中讲述了如何用深层卷积神经网络来将一张普通的照片转化成一幅艺术风格的画作（比如梵高的星夜），可以看做是DL（deep learning）在NPR（非真实渲染non photography rendering）领域的一次革命（不难想象以后DL这种跨领域的革命会越来越多）。&lt;/p&gt;&lt;p&gt;论文地址：&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;A Neural Algorithm of Artistic Style&lt;/a&gt;&lt;br/&gt;项目地址：&lt;a target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;https://github.com/muyiguangda/neural-style&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;算法解析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;（对算法不感兴趣的童鞋，可以直接跳过这一部分，看最终实验结果）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【总流程】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqqBiaka8R2zbZDQqWHn4cFibCzelbvzdvHLhm5QIUCgwVUicWHicS1CztGQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;如上，a有个别名是&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;conv1_1&lt;/code&gt;，b是&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;conv2_1&lt;/code&gt;，依次类推，c，d，e对应&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;conv3_1&lt;/code&gt;，&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;conv4_1&lt;/code&gt;，&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;conv5_1&lt;/code&gt;；输入图片有风格图片&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;style image&lt;/code&gt;和内容图片&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;content image&lt;/code&gt;，输出的是就是合成图片，然后用合成图片为指导训练，但是训练的对象不像是普通的神经网络那样训练权值&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;w&lt;/code&gt;和偏置项&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;b&lt;/code&gt;，而是训练合成图片上的像素点，以达到损失函数不断减少的效果。论文使用的是随机的噪声像素图为初始合成图，但是使用原始图片会快一点。&lt;/p&gt;&lt;p&gt;首先他定义了两个loss，分别表示最终生成的图x和style图a的样式上的loss，以及x和content图p的内容上的loss，&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;α&lt;span&gt;,&lt;span&gt;β&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;是调节两者比例的参数。最终的loss function是两者的加和。通过optimize总的loss求得最终的x。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;所用的CNN网络是VGG-19，利用了它16个卷积层和5个pooling层来生成feature。实际指的是Conv+ReLU的复合体。&lt;/p&gt;&lt;p&gt;当然，使用其他pre-trained的model也是完全可以的，比如GoogLet V2，ResNet，VGG16 都是可以的（作者这哪是以VGG19为例）。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【内容损失函数】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqSKmzRLXp9ssAuKCejWWk0PF6Lednz6exgXAic1lNOQSQNH921MWA5MQ/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 16px; color: rgb(102, 102, 102) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;l代表第l层的特征表示，&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;p&lt;/code&gt;是原始图片，&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;x&lt;/code&gt;是生成图片。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;假设某一层得到的响应是&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;F&lt;span&gt;l&lt;span&gt;∈&lt;span&gt;&lt;span&gt;R&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;N&lt;span&gt;l&lt;span&gt;∗&lt;span&gt;&lt;span&gt;M&lt;span&gt;l,其中&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;N&lt;span&gt;l为l层filter的个数，&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;M&lt;span&gt;l为filter的大小。&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;F&lt;span&gt;&lt;span&gt;&lt;span&gt;l&lt;span&gt;&lt;span&gt;&lt;span&gt;i&lt;span&gt;j表示的是第l层第i个filter在位置j的输出。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;公式的含义就是对于每一层，原始图片生成特征图和生成图片的特征图的一一对应做平方差&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;求内容损失函数梯度下降如下：&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqtjgLk3ns2eRKKQmpzuLLpletUMeNRN7DIkbqjichodlMkEHTsfjPNrA/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【风格损失函数】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqD7b5pn1qr8FvBSuRa8dj9Fwz9icm9bVsT6UAJ6p1Ab9BZ9QOvAicqK8w/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 16px; color: rgb(102, 102, 102) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;F&lt;/code&gt;是生成图片的特征图。上面式子的含义：Gram第i行，第j列的数值等于把生成图在第&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;l&lt;/code&gt;层的第&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;i&lt;/code&gt;个特征图与第&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;j&lt;/code&gt;个特征图分别拉成一维后相乘求和。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqzy8ChSubOdVw5cR6iaziabTVibxMTRqN74ZVSexO8zRI6U0R10TqBgzRw/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqmMaEn27yKZrYP6T3qcAog0lTMTryD3qVopDpclrQvlJIHDBKAsWsgg/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;ul style=" box-sizing: border-box; margin-bottom: 16px; color: rgb(102, 102, 102) ; ; ; ; ; ; ; ; " class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;上面是风格损失函数，&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;Nl&lt;/code&gt;是指生成图的特征图数量，&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;Ml&lt;/code&gt;是图片宽乘高。&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;a&lt;/code&gt;是指风格图片，&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;x&lt;/code&gt;是指生成图片。&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;G&lt;/code&gt;是生成图的Gram矩阵，&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;A&lt;/code&gt;是风格图的Gram矩阵，&lt;code style=" box-sizing: border-box; ; ; ; ; ; ; ; ; "&gt;wl&lt;/code&gt;是权重。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;【总损失】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqGx5Zt1PNPEiayNXf9BicgSALCXyric8jTUnsicXCdqdfRdXmEXODx6075Q/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;实验结果&lt;/p&gt;&lt;p&gt;下面是内容图，风格图，以及迭代10次，100次，500次，1000次，10000次，10万次的计算结果及分析：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【原图】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;原图片如果尺寸过大，导致input层的batch size过大，会大大增加程序计算量（从而延长计算时间），容易引起程序不稳定，而对最终效果并没有明显提升，因此建议把图片尺寸尽量缩小（在像素不失真的前提下），推荐值：800 ppi x 600 ppi.&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqbsib6ISDzQn7oZZUuMEgicFa9Rbww5S2wzVZe4Kia1ckic6Yq2iaiclL7e0Q/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【风格图】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;风格图不需要和内容图尺寸一致。可以适当裁剪，保留风格最突出的部分。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqHtaGCP4kDzpn1FicL8fS19V2G1je8hkKMz30kCPs6my27oTpqllhuYA/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【迭代10次】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;由于原始的输入是一张白噪声图片，因此，在迭代次数较少时，仍然没有形成内容图的轮廓。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqOiaOYWZjSVjKFsrcgwnqJjJB4wSicU4mzgWuDcZCcp7DhbJmYDmQAVjg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【迭代100次】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;天安门的轮廓初现&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqIb0L1j9Ktf9Qx03v6yico4cNIHLCHj2JsIaKCicyJKDBkPJaibnWLO7zw/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【迭代500次】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;已经基本接近最终效果，既能看到天安门的形状，又有梵高“星夜”的线条风格和颜色搭配。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrq0uoJs4UhQmj22re0Kstg0ur4ZQdUEu6kmnt3W6GnTicmut37ItasycA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【迭代1000次】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;500次到1000次，画面构成的变化已经不剧烈，基本趋于平稳。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqRibhvBAVwYv5Ff5kVo95OgaLfNeF5WiagUb2HVqpcWCsneuSuJKhwB1g/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【迭代500次，重复执行三次】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;重复计算了三次，使用相同的图片，相同的卷积神经网络模型，相同的迭代次数（500次），却得到了区别明显的三张结果图。这是非常有意思的地方！&lt;/p&gt;&lt;p&gt;（a） （b） （c）&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrq0uoJs4UhQmj22re0Kstg0ur4ZQdUEu6kmnt3W6GnTicmut37ItasycA/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrq0R1fWT5icxFqDzc8sm1tWWj6KrwWibBGJuWiaxqATu5l6Qn9vjR4qoMzg/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqzrIvnAkxrFFCh4sy5e0FCwKPNkpVDQ8lQqoZ0uZBzBIXWSMicuWHfiaQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;最近看完一本书，叫《随机漫步的傻瓜》，主要讨论随机性这个概念，随机性中隐藏着不可预测的风险，也蕴含着无限的可能性。没有随机变异，生物进化可能还处在单细胞阶段。&lt;/p&gt;&lt;p&gt;如果计算机只是一个工具，让它解一个方程组，如果已知数确定，计算条件确定，无论计算多少次，结果都是同一个。&lt;/p&gt;&lt;p&gt;这个例子中，结果出现了差异，说明这个系统中一定有随机的成分存在。&lt;/p&gt;&lt;p&gt;机器学习中随机性出现的部分通常如下：1. 训练样本的乱序操作；2. 随机梯度下降；3. 模型随机赋初始值。&lt;/p&gt;&lt;p&gt;本例中还多一条：初始输入的白噪声图像是随机生成的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【迭代10000次】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;可以看到画面右上部分，内容渐渐丢失，呈现灰色化。&lt;/p&gt;&lt;p&gt;推测原因：由于卷积神经网络中的若干pooling层，实际是对图像进行了均值处理，导致了边缘细节的丢失。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqBBGYV6pibSIr13svhRr2Pib7LxoQdHcBibWr16q0s6J9uQhqenia6s2HKw/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;pooling层示意图：&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqqAoLIpwiaG7vNe320TnhBDaShIlXlqXZZo11TdSibrvqGAtlrCm4EQcQ/0?wx_fmt=png"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;那么，迭代100000次是什么样子的呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【迭代十万次】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;画面朝着两极化趋势发展，灰色区域更加暗淡，彩色区域更加明亮，两者之间的界限更加分明，失去了过渡。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a style=" box-sizing: border-box; background: rgb(255, 255, 255); color: rgb(0, 153, 255); text-decoration: underline ; ; ; ; ; ; ; "&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqNY9Qu8BichQYDboQR2LfMXZUDzeBMSHumNB3K1iasV3s10n54tpqtO8Q/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;End.&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqurKYDVG2RH2TEoJqv1vqF7nmkC4OCmde9ZyFW7iby4LKCmibxX9OQWaQ/0?wx_fmt=png"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;2017&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;鸡&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;年&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;大&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;吉&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;HAPPY &amp;nbsp;NEW &amp;nbsp;YEAR&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;点击下方“阅读原文”查看更多&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;↓↓↓&amp;nbsp;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Thu, 02 Feb 2017 12:16:32 +0800</pubDate>
    </item>
    <item>
      <title>屈臣氏集团：3年内投资5.4亿元推动零售业务利用大数据技术</title>
      <link>http://www.iwgc.cn/link/4546135</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqBOKqdsMxmicABM8Ufw780ZRNXNZUOwElgdxqfLLTkse8cD8EwCfyqcw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;近日，屈臣氏集团宣布，与加拿大初创企业 Rubikloud 合作，将大数据科技应用于零售业务。集团未来3年内将投资7000万美元(约5.4亿港元)，推动旗下零售业务利用大数据技术，辅以机器学习(machine learning)及数据图像化程式，协助集团进一步完善顾客体验及营运效率。&lt;/p&gt;&lt;p&gt;集团将于未来3年与 Rubikloud 合作，为旗下遍及亚欧25个市场逾1.33万间门市的零售网络，建立兼容人工智能技术的 RubiCore 企业大数据平台，并引入 Promotion Manager 和Lifecycle Manager 两套机器学习程式，以完善顾客体验。&lt;/p&gt;&lt;p&gt;集团与 Rubikloud 于2015年首次合作，为集团旗下欧洲零售品牌引入 Lifecycle Manager机器学习程式，成功在10个月内提升有关推广项目的销售逾8%。&lt;/p&gt;&lt;p&gt;据悉，Rubikloud公司主要为客户提供基于机器学习算法的数据收集，数据剖析和可视化服务。只要花半个小时将商家后台接入Rubikloud系统内，就可以开始收集相关数据。服务周期最短可以达到30天，也就是说它提供的是一种近乎实时性的，深度加工过的信息。在分析和呈现方面，并不需要一个新的平台来查看报告，而是可视化地呈现不同维度的信息，比如不同地区不同浏览器的转化率等等，从而帮助商家更好地在市场营销、定价、产品选择和用户体验优化等方面做决策。&lt;/p&gt;&lt;p&gt;&lt;a style="box-sizing: border-box; background: transparent; color: rgb(0, 153, 255); text-decoration: underline;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqVL2UdSQIGUibGKhMGwhXk37eWLspKMvZzBWvHPZVs1NRoDeFwA6ibicmQ/0?wx_fmt=jpeg"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;值得一提的是，Rubikloud公司的种子轮投资方为李嘉诚旗下的Horizons Ventures，A轮则是由TOM集团和Ule领投，而屈臣氏集团全资拥有的附属公司为前华人首富李嘉诚旗下产业。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyALib4Sicib5oNkUO7FUDDYrqurKYDVG2RH2TEoJqv1vqF7nmkC4OCmde9ZyFW7iby4LKCmibxX9OQWaQ/0?wx_fmt=png"/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;2017&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;鸡&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;年&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;大&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;吉&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;HAPPY &amp;nbsp;NEW &amp;nbsp;YEAR&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;点击下方“阅读原文”查看更多&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;↓↓↓&amp;nbsp;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Thu, 02 Feb 2017 12:16:32 +0800</pubDate>
    </item>
  </channel>
</rss>
