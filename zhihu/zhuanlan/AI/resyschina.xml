<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>ResysChina - 知乎专栏</title><link>https://zhuanlan.zhihu.com/resyschina</link><description>微信公众号 ResysChina，中国最专业的个性化推荐技术与产品社区。更多内容会首发在微信公众号，推荐关注。</description><lastBuildDate>Sat, 18 Feb 2017 20:15:41 GMT</lastBuildDate><generator>Ricky</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>验证式开发——简论算法开发的正确姿势</title><link>https://zhuanlan.zhihu.com/p/25090594</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/v2-e4f75b2b10c043efb46f773b2f05b531_r.png"&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;算法系统在开发的不同阶段都要做有效性验证，如果不做验证就一口气开发到底，很有可能算法会达不到预期效果，即使达到了，也是让人不踏实的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在我之前一份工作中，组里同学开发了曾经一个覆盖率提升算法，目的是提升商家销售&lt;strong&gt;[1]&lt;/strong&gt;的图书商品的推荐覆盖率，算法的基本思想是把自营图书的推荐结果附加在商家图书（实质上是同一本书）的推荐结果后面，以此来提升目标商品的推荐覆盖率。算法的设计大家反复论证过，都认为是没问题的，符合业务特点。但是遗憾的是，做了AB之后发现效果并未达到预期，提升幅度非常小。&lt;/p&gt;&lt;p&gt;上面描述的案例，是算法开发中的一种典型情况，具体表现就是算法设计时觉得很好，但是上线后往往不能达到预期。造成这种偏差的原因当然是有很多的，今天在这里我们讨论其中的一个方面，一个通过调整开发流程可以适当控制和缓解的方面，就是算法开发过程中的&lt;strong&gt;有效&lt;/strong&gt;&lt;strong&gt;性验证&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有效性验证&lt;/strong&gt;是一个比较模糊的说法，用具体情况来说明一下。具体到我说的这个项目，问题出在我们虽然给很多商家的商品增加了推荐，但是这些商品的PV量非常的小，导致这些增加的推荐并没有真正被用户看到，所以提升幅度也就非常小了。事后来看，这其实并不是一个隐藏很深的问题，应该是可以预先算出来的，因为商家图书推荐数量少的原因之一就是浏览量小。但问题就出在，我们在设计算法时只关注了算法逻辑是否正确可行，没有去计算这个算法是否能够发挥足够大的影响，产生足够好的效果。如果事先做了这个计算，就能够知道这个策略的问题，就可以在开发之前或者开发初期调整策略，避免这样的无用功。&lt;/p&gt;&lt;p&gt;这样的问题不止出现在推荐项目中，在机器学习项目中也比较常见，最典型的就是各种特征的置信度问题。机器学习系统中，特征往往是多多益善的，但是如果某些特征的样本覆盖很低，也就是说只有很少一部分样本上出现了这个特征，那么这个特征训练出来的值置信度就会比较低，因为我们知道预测结果的置信度和样本数是非常相关的。这样的特征虽然每个特征可能只影响不多几条样本，但是由于特征分布的长尾性，会存在一大批这样的特征，每个特征影响几条样本，加起来就会有大量的样本受到影响，在极端情况下，有可能每条样本中都会有那么几个置信度不高的特征，所以这样的特征还是需要处理掉的。&lt;/p&gt;&lt;p&gt;但是这种置信不足的问题如果不在前期做针对性的专门处理的话，是不容易发现的，毕竟有那么多的特征，如果不是目的明确地去看，是很难注意到这样的问题的。这个特征处理的过程，换个角度看也是在做可行性验证，在验证某个特征是否有足够多的样本覆盖，使得其估计值置信度足够高，而不是不管三七二十一地就扔进去训练。&lt;/p&gt;&lt;p&gt;上面用两个例子说明了可行性验证具体是在做什么，但是也只是涵盖了其中的一部分工作。抽象一点说，可行性验证，应该是要把算法系统的几个大的步骤进行拆解，在进入开发之前，或者在开发过程中，用尽量准确的方法去估计每个步骤的效果是否符合预期，如果某个步骤不符合预期，需要及时进行调整。&lt;/p&gt;&lt;p&gt;以机器学习系统这样一个典型的算法系统为例来说，其中的很多部分都可以用先行验证的方法来加强对过程质量的保证，从而保证最终结果的质量。典型的例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;特征置信度验证：&lt;/p&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;如上所述，进入训练的特征需要验证其置信程度是否足够。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;样本“填充度”验证：&lt;/p&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;训练之前，还需要验证样本上的特征数量，虽然稀疏性是大数据下的基本特点，但是如果大量样本上只有很少的特征覆盖，那么就需要考虑是否需要增加特征。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;特征处理验证：&lt;/p&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;各种特征处理的流程都需要不同的验证，例如连续值分段的处理，在分段之后，需要看一下每分段内样本数量之类的，确认不会出现太稀疏或者太稠密的分段。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;从上面的讨论中可以看出，这种强调验证的开发模式，本质上是在把控过程，通过把控过程来把控结果，因为只有过程正确了，结果才是正确的，同时也是可靠的。&lt;/strong&gt;不把控过程也可能得到好的结果，但是这样的结果是不够可靠的，因为你不知道为什么好，一旦变不好了，你也同样不知道为什么变不好了。这样的系统，无疑是危险的，不能让人踏实的。就像那句投资界著名的话所说（大意）：“举着火把穿过弹药库，即使活下来了，你也还是个傻子”。换言之，就是不能做骑着瞎马的盲人，把掉不掉进坑里这件事情交给运气。&lt;/p&gt;&lt;p&gt;验证这件事情，如果不做的话，项目也是可以做下去的，但是当效果不好的时候，还是需要返回头来查找问题，所以，这个问题是绕不过去的，只是先做和后做的区别，而且相比后做，还是先做要更好，可以提前发现问题，及时调整方案，减少无用功。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;商家指的是电商平台上的第三方商家，与之对应的是平台自营。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;广告时间：&lt;/p&gt;&lt;p&gt;转转推荐搜索团队诚招靠谱算法工程师和搜索架构工程师：转转是58集团旗下的专业二手交易平台，现在正在高速发展中，拥有干净的海量数据，独一无二的挑战性问题，更拥有广阔的发展空间和一群靠谱的小伙伴，无论你是希望快速成长还是希望建功立业，这里都是你最好的选择。有意者请发简历到zhangxiangyu01@58ganji.com。&lt;/p&gt;&lt;/blockquote&gt;&lt;img rel="noreferrer" src="https://ga-beacon.appspot.com/UA-41015557-4/page-name?dt=https://zhuanlan.zhihu.com/p/25090594&amp;pixel&amp;useReferer"/&gt;</description><author>张相於</author><pubDate>Mon, 06 Feb 2017 13:54:37 GMT</pubDate></item><item><title>机器学习的平台化发展趋势</title><link>https://zhuanlan.zhihu.com/p/24512393</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/v2-6b0507cac9170747f8408d26bafe77a4_r.jpg"&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;背景&lt;/b&gt;&lt;/p&gt;&lt;p&gt;机器学习在经过近些年的野蛮生长之后，其有效性已经被无数成功应用所验证，在这一点上已经不需要更多证明。在使用方法和常用模型方面也已经没有什么太新奇的东西了。例如在模型方面，经过实践检验过的模型基本还是LR和GBDT，以及这两者的一些变种和结合，例如FM、LR+GBDT等等；再例如在特征处理方面，常用的包括离散化、归一化、平滑等等。学术界对这些方面的进一步改进，从效果上来说就像在从95分到98分，对整个工业界应用来讲不是目前最重要的&lt;b&gt;[1]&lt;/b&gt;。那么最重要的是什么呢？很有可能，最重要的是机器学习系统的平台化，以及围绕平台化展开的一系列工作。&lt;/p&gt;&lt;p&gt;&lt;b&gt;什么是机器学习平台？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;什么叫做“机器学习系统的平台化”呢？简单来说，就是要把机器学习系统做成一个简单易用的、更加通用的平台，让各种业务都能够方便地接入这个平台，从而享受到机器学习带来的红利。这里的业务，从大方面来说包括例如搜索、推荐等大业务，从小方面来说包括不同位置的推荐模块等小业务。说到平台，很容易和“大规模”这个词联系到一起，给人一种只有大规模才用得上平台的感觉。但其实不然，用不用得上平台的核心因素并不仅仅是数据量，而更是在于要使用机器学习的业务的多样性。如果你的数据量很大，但是只有一个地方在使用，例如某个模块的点击率预估，那么这个时候并不一定要做平台，只需要对这一个系统做充分地调优即可。但如果你想在更多的业务上使用机器学习技术的话，即使每个业务的数据量都没有达到海量，那么对每个业务分别走一套完整的机器学习系统流程也是成本很高的做法。这里的成本至少包括两个方面：开发成本和维护升级成本。&lt;/p&gt;&lt;p&gt;开发成本方面，因为多个业务很有可能用的都是同一套模型，甚至在样本和特征的采集处理流程上也会有比较大的重合，那么就有很多东西是可以复用的，这种情况下每一套业务都做一套开发显然就是很大的浪费。在维护升级方面，由于多个业务底层依赖的基础特征和模型都是类似的，那么在这种开发模式下，对这些数据和模型的升级和维护对应的工作量也会放大好多倍，显然也是一种浪费。这两种成本的产生，从软件工程的角度来说，其实就是违反了DRY原则&lt;b&gt;[2]&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;那么平台化是如何解决这些问题的呢？回答这个问题之前，需要先了解在平台的模式下一个完整的机器学习流程是怎样的。为了方便理解，我们可以使用电商平台（例如天猫、京东等）的例子来做类比。想要使用机器学习技术的业务方可以看做是想要在电商平台上开店的小商家，而机器学习平台无疑就是电商平台了。作为一个商家，如果选择自己建网站开店，就好比每个业务自己搭建机器学习流程，显然是一个低效的选择。如果在电商平台上开店，平台会提供支付、订单管理、库存管理、店面建设、促销管理等等核心的功能，也就是“电子商务”中“电子”的部分。而商家需要负责的，就是“电子商务”中“商务”的部分，也就是和自己业务核心相关的部分，例如选择销售什么样的商品，决定使用什么样的促销策略，如何建设会员制度等等，而这其中的大部分，商家也不需要自己搭建实现，只需要通过平台提供的工具将自己的想法进行落地即可。&lt;/p&gt;&lt;p&gt;回到机器学习的业务中来，业务在接入平台之后，需要做的应该也仅仅是（或者说尽量是）和业务核心相关的部分，例如业务数据如何接入平台，决定使用什么特征，特征之间如何组合，使用什么样的模型（甚至模型也不用指定）等。而具体这些特征如何被抽取出来，和样本形成对应关系，又是如何进入模型训练的，训练时使用了什么参数配置，都是平台应该负责的东西，业务方都不用关心。如果类比“电子商务”这个词来造一个“智能业务”的词的话，那么平台负责的应该是“智能”的部分，而业务方负责的应该是“业务”部分。只有做到这样，才能让更多的业务使用到机器学习系统，享受到这个“大杀器”带来的便利，从而将机器学习的红利最大化。&lt;/p&gt;&lt;p&gt;上面提到的两种平台的类比关系可以用下图来简单表示：&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/v2-ccd3b0912177730b52d186518cc4ce60.jpg" data-rawwidth="794" data-rawheight="1123"&gt;&lt;p&gt;&lt;b&gt;构建机器学习平台的挑战&lt;/b&gt;&lt;/p&gt;&lt;p&gt;从上面的图可以看出，在机器学习平台的支持下，业务接入机器学习功能变得非常简单，在理想状况下，只需要点几个按钮，写一些配置文件就够了。但是俗话说得好：“天下没有免费的午餐”，业务方使用起来简单是因为将机器学习核心相关的部分都转嫁到了平台上面，由平台来实现。所以，平台面对的核心挑战就是如何如何提供足够的通用性，从而让各个业务都能够简单接入，而这显然不是一件简单的事情。这里面的核心挑战包括但不限于：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;不同业务数据格式和语义上的统一。&lt;/b&gt;不同业务涉及到的日志数据、业务数据在存储格式，更新方法等方面都可能存在着很大不同，这些数据从机器学习的角度来看涉及样本和特征两个大的维度。作为平台方，要求各个业务方将数据使用统一的方式存储更新显然是不现实的，那么就需要将通用的运算部分进行算子层面的抽象，同时对这种强异构性的数据进行多个维度的统一处理，才能保证后续流程的统一性和高效性。&lt;/li&gt;&lt;li&gt;&lt;b&gt;不同业务策略的统一表达语言。&lt;/b&gt;由于分处不同的业务领域，不同业务的策略（例如排序策略）有着不同的语言。例如商品详情页的推荐需要多考虑推荐商品和主商品的价格相关性，而在feed流推荐中又需要多强调时间上的新鲜性。那么如何用一套统一的DSL&lt;b&gt;[3]&lt;/b&gt;将这些需求进行有效的组合表达，是决定能否建成机器学习的巴别塔&lt;b&gt;[4]&lt;/b&gt;的重要因素。这一部分要求平台设计者具有高度的抽象和总结能力，如果某个业务的需求不能方便的被这个DSL所表达，那么这个业务就很难接入到平台中来。&lt;/li&gt;&lt;li&gt;&lt;b&gt;多业务场景下的在线/离线实验支持。&lt;/b&gt;效果评测和分流实验是任何算法系统中都不能缺少的部分，多业务场景下的评测和分流有着独特的挑战，例如实验之间可能出现相互影响的情况，所以需要设计能够支持多维度分层实验的在线实验平台&lt;b&gt;[5]&lt;/b&gt;。而为了在不浪费流量的情况下对多个业务的策略做出评测，还需要建立一套合理的离线评测系统。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除此以外还有很多其他挑战，这些挑战多数都是围绕“异质性”、“大规模”这些特点展开的。但需要指出的是，在实现一个机器学习平台的时候，上面提到的平台层的东西不一定都要自己来做，一些机器学习核心组件的部分可以充分利用一些开源工具，甚至一些开放平台来做，例如Amazon、微软以及阿里的云服务都提供了机器学习的组件，那么公司内部需要实现的就是这些以外的部分，或者说是在这些平台提供的工具上再做进一步的封装和处理。这两者的区别，一定程度上有点像云计算领域“公有云”和“私有云”之间的区别，私有云牺牲了一定程度的通用性，但是由于只需要对企业内部服务，所以可能搭建更适合企业业务特点的架构和功能。二者孰优孰劣，还需要根据每个公司的业务特点来具体判断。&lt;/p&gt;&lt;p&gt;&lt;b&gt;开源的野心&lt;/b&gt;&lt;/p&gt;&lt;p&gt;从上面的讨论可以看出，要想将机器学习的能力最大程度发挥，平台化可以说是必经之路，因为电商平台等其他平台的成功已经证明，只有平台才能成为技术的杠杆，将技术的能量最大化。&lt;/p&gt;&lt;p&gt;从这个角度再来看各个大厂为什么争相开源平台级框架级的工具，也就很容易理解了，因为平台和框架，既是行业的未来，一定程度上也是大厂门平台化发展的自然产物。但是开源对大厂们有什么好处呢？只是为了学雷锋做好事，让世界充满爱吗？为了深究大厂们的心路历程，不得不提到另一个领域的著名开源平台：安卓操作系统。&lt;/p&gt;&lt;p&gt;让我们回想一下安卓操作系统诞生的背景&lt;b&gt;[6]&lt;/b&gt;。在安卓系统诞生之前，手机领域基本是没有太强烈的“操作系统”的概念的，一如计算机刚诞生，Windows出现之前的年代。每款手机都长不同的样子，系统的可定制性也非常的差，智能机时代看似遥遥无期。但是这时出现了打着开源旗号的安卓系统，大家可以随意使用，一下子让手机行业活跃了起来，后来的故事大家都知道了，开源的安卓系统已经为谷歌赚取了310亿美元的营收，220亿美元的利润，利润率高达70%&lt;b&gt;[7]&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;俗话说“无利不起早”，这些开源系统以开源作为起点，但目的很有可能还是赚钱。安卓就是很好的例子，而且谷歌已经在用安卓的套路来运作TensorFlow了&lt;b&gt;[8]&lt;/b&gt;。有了安卓的先例，相信国内外其他巨头们也都不会放过这个机会，这也就可以解释大家争相开源机器学习系统的原因了。&lt;/p&gt;&lt;p&gt;&lt;b&gt;总结展望&lt;/b&gt;&lt;/p&gt;&lt;p&gt;人工智能的时代是否来到我们还不能确定，但是机器学习的时代的到来已经是确定无疑的。在当今的时代，对机器学习的利用程度可以看做是衡量一个组织技术先进性的一个重要指标。对平台建设和利用的重视程度一定程度上会决定一个企业的技术高度和业务效率，在这个群雄逐鹿的战场上，有人开始默默跟耘，有人已经亮出獠牙，鹿死谁手还未可知。但无论如何，对我们这些从业者来说，都是好事，因为这说明这个行业的春天已经彻底来到。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;这么说并不是说这些细微的改进不重要，相反，当数据规模和业务规模足够大的时候，1%的提升也会带来很可观的收益。这里说的不重要意思是这通常来说不是最优先需要解决的问题。 &lt;/li&gt;&lt;li&gt;DRY == Don’t Repeat Yourself &lt;/li&gt;&lt;li&gt;DSL == Domain Specific Language，可译为“领域特定语言”，指的是为某一领域设计的语言，目的是将这一领域中的操作进行统一抽象表达。例如SQL可看做是数据库领域的一种DSL。 &lt;/li&gt;&lt;li&gt;据圣经记载，巴别塔指的是人类联合起来兴建希望能通往天堂的高塔。为了阻止人类的计划，上帝让人类说不同的语言，使人类相互之间不能沟通，计划因此失败。 &lt;/li&gt;&lt;li&gt;在线实验平台的建设可参考google的经典文章：Overlapping Experiment Infrastructure: More, Better, Faster Experimentation &lt;/li&gt;&lt;li&gt;笔者不是移动开发领域专家，此处的背景全凭不靠谱的记忆。 &lt;/li&gt;&lt;li&gt;数字来源：&lt;a href="http://tech.qq.com/a/20160215/007996.htm" data-editable="true" data-title="狂赚310亿美元！安卓系统的钱究竟是怎么来的_科技_腾讯网"&gt;狂赚310亿美元！安卓系统的钱究竟是怎么来的_科技_腾讯网&lt;/a&gt;&lt;/li&gt;&lt;li&gt;用“谷歌 机器学习 安卓”作为关键字去搜索，你可以得到很多相关的新闻。 &lt;/li&gt;&lt;/ol&gt;&lt;img rel="noreferrer" src="https://ga-beacon.appspot.com/UA-41015557-4/page-name?dt=https://zhuanlan.zhihu.com/p/24512393&amp;pixel&amp;useReferer"/&gt;</description><author>张相於</author><pubDate>Thu, 22 Dec 2016 18:32:31 GMT</pubDate></item><item><title>多高的AUC才算高？</title><link>https://zhuanlan.zhihu.com/p/24217322</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/v2-ceb6e18217fda649363d76a01a8de469_r.jpg"&gt;&lt;/p&gt;&lt;h1&gt;问题的引出&lt;/h1&gt;&lt;p&gt;AUC是现在分类模型，特别是二分类模型使用的主要离线评测指标之一。相比于准确率、召回率、F1等指标，AUC有一个独特的优势，就是不关注具体得分，只关注排序结果，这使得它特别适用于排序问题的效果评估，例如推荐排序的评估。&lt;/p&gt;&lt;p&gt;AUC这个指标有两种解释方法，一种是传统的“曲线下面积”解释，另一种是关于排序能力的解释。例如0.7的AUC，其含义可以大概理解为：给定一个正样本和一个负样本，在70%的情况下，模型对正样本的打分高于对负样本的打分。可以看出在这个解释下，我们关心的只有正负样本之间的分数高低，而具体的分值则无关紧要。&lt;/p&gt;&lt;p&gt;我们在各种分享中常常会看到，某大牛的某模型AUC达到了0.xxx，说到此处的大牛脸上一脸的自豪。在崇拜之余，好奇的你一定想过这样一个问题，AUC这个东西，究竟多高算是高？0.7或者0.8的AUC真的很高吗？确实，对于AUC，我们只知道它是介于0和1之间的，对于一个问题，AUC具体能达到多高，好像我们从来不在乎，一般只是用一些“行业经验值”来判断自己模型的AUC够不够高。但是如果不知道理论上AUC能达到多高的话，我们就也无法准确得知当前得到的AUC究竟是高是低。就好像同样是考了90分，在100分满分的制度下和150分满分的制度下，含义是完全不同的。所以，今天我们就来做一番探索，看看对于一个具体问题，AUC理论上究竟能达到多高，以及理论上AUC最高值的高低和哪些因素有关。&lt;/p&gt;&lt;h2&gt;理论最高AUC&lt;/h2&gt;&lt;p&gt;为了便于清晰地讨论，我们先明确一下讨论的具体概念是什么。我们在这里关心的概念是一个数据集的&lt;b&gt;理论最高AUC（以下简称Max AUC）&lt;/b&gt;。这个“理论最高”指的是什么呢？具体来说，指的就是如果我们拥有“上帝视角”，也就是一个超级NB的分类器——这个分类器知道每条样本的真实分类概率——在这个数据集上能够达到的AUC。等等，难道拥有了上帝视角之后，AUC还不就是1了么？还真不一定，我们看一下下面这个小例子。&lt;/p&gt;&lt;p&gt;在这个例子中，我们一共有三条样本，每个样本有两个特征，其中“预测分类概率”指的是样本属于类别1的概率。这个数据集的具体情况如下：&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/v2-39a202db80ac326c30dd9a30470efb6d.png" data-rawwidth="759" data-rawheight="238"&gt;&lt;p&gt;请注意最后一列“预测分类概率”，这一列指的是我们的“上帝视角分类器”（下面简为GC：God Classifier）给出的分类概率，所谓的GC，其实就是一个记忆力超群的超级过拟合的分类器。可以看到对于3号样本，GC正确地给出了0的预测概率，但是对于1号和2号样本，即使是GC也只能给出0.5的分类概率，为什么呢？原因就是这两条样本的特征取值完全相同，但是标签不相同，所以GC在这上面犯了“必须犯的错误”，所谓必须犯的错误，也就是无法避免的错误，因为你无法从特征中无法区分这两条样本，基于最大熵原理，给出同等概率是最好的选择。犯了这个错误之后，AUC自然也就不可能是完美的1了。&lt;/p&gt;&lt;p&gt;所以我们看到，开了上帝视角也不能随心所欲地操纵AUC，那么开了上帝视角之后，AUC究竟最高能达到多高呢？这就是本文要讨论的问题。&lt;/p&gt;&lt;h2&gt;影响Max AUC的因素&lt;/h2&gt;&lt;p&gt;上面的讨论不但给出了我们要讨论的核心概念——Max AUC，同时也通过一个例子给出了影响这个概念的主要因素：样本的不确定性。所谓样本的不确定性，指的是对于完全相同的样本，也就是特征取值完全相同的样本，其对应的标签是否存在不确定性，例如上文中的例子，1号样本和2号样本对应的特征取值就完全相同，但是标签却不相同，因此就引入了不确定性，而这个不确定性的程度的大小，也就决定了Max AUC的取值。而如果样本中没有任何的不确定性，则每条样本的标签就是唯一确定的，我们的GC就可以记住它的标签，从而给出正确的预测。&lt;/p&gt;&lt;p&gt;为了验证这个猜想，并且量化地查看不同程度的不确定性对于Max AUC的影响，我写了一个模拟程序来生成一组数据（文末有这份代码的github地址），并在这组数据上计算了Max AUC和样本不确定性的关系。&lt;/p&gt;&lt;p&gt;实验的具体方法如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;对于不同程度的不确定性：&lt;/li&gt;&lt;ol&gt;&lt;li&gt;根据该不确定性，生成测试的样本数据，并使用上帝视角给出预测的分类概率。&lt;/li&gt;&lt;li&gt;计算该数据集上的AUC。&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;具体来说，我们用随机数的方法来模拟不确定性：在生成新样本时，如果根据该随机数，来选择是否使用新的特征取值，如果使用旧的特征取值，则再随机给一个标签，具体代码如下：&lt;/p&gt;&lt;p&gt;           
if random.random() &amp;gt; dup_ratio:&lt;/p&gt;&lt;p&gt;                feature_id += 1&lt;/p&gt;&lt;p&gt;           
label = random.randint(0, 1)&lt;/p&gt;&lt;p&gt;其中dup_ratio这个变量用来控制重复生成样本的几率，也就是不确定性。这里注意到我们仅使用一个id来代表一个特征（feature_id），这是因为在我们的问题中，我们只关心特征取值是否相同，而不关心具体的取值，毕竟我们不会训练一个具体的分类器，而是在使用“上帝视角”的分类器。所以在这种场景下，只需要一个id来区分表示不同取值的特征即可。&lt;/p&gt;&lt;p&gt;在生成了“特征取值+标签”的样本后，我们为每条样本计算了GC给出的分类概率，方法也很简单，就是使用最大熵原理给不确定性样本赋予等概率值。&lt;/p&gt;&lt;p&gt;在这个实验设定下，越高的样本重复率（dup_ratio），代表了数据集中越高的不确定性，因为会有越多的样本拥有不同的label，那么按照我们的猜想，对应的Max AUC应该也会越低。那么这两者具体的关系如何呢？我们将样本重复率作为横轴，Max AUC作为纵轴，便可得到如下的图（使用R绘图所得）：&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/v2-3c486896492ad04076d2b028bae7c630.jpg" data-rawwidth="480" data-rawheight="480"&gt;&lt;p&gt;上图在计算每次Max AUC的时候（也就是图上的每一个点）使用了一万个数据点。可以看出随着样本重复率的升高，Max AUC确实在不断降低，最终降到0.5——AUC的最低取值。&lt;/p&gt;&lt;h2&gt;贝叶斯错误率&lt;/h2&gt;&lt;p&gt;上面我们用简单的实验揭示了Max AUC和样本中不确定性之间的关系，这种样本中的不确定性，是“上帝视角分类器”也无能为力的，如果从优化问题的角度来看的话，属于不可优化的部分。说到这里，统计学中还有另外一个概念，和“不可优化”这个思想不谋而合，那就是&lt;b&gt;贝叶斯错误率&lt;/b&gt;（Bayes Error
Rate，以下简称为BER）。BER的具体定义大家可以去查看Wikipedia或者其他资料，如果用一句话来概括其思想的话，可以这么说：BER指的是任意一个分类器在一个数据集上能取得的最低的错误率。而这个错误率，则对应着数据中的不可约错误（irreducible error），也就是我们刚刚说到的“上帝视角也无法解决的错误”，“必须犯的错误”。&lt;/p&gt;&lt;p&gt;通过分析BER的定义，我们可以知道，所谓的“不可约错误”只会在样本中出现不确定性的时候发生——这和我们刚刚模拟数据使用的假设是相同的，于是我们使用刚刚的数据计算出不同样本重复率对应的BER，其图像如下：&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/v2-46070103d5ab951ddae7a160b55a27b6.jpg" data-rawwidth="480" data-rawheight="480"&gt;&lt;p&gt;可以看出，样本重复率和BER有着明确的近乎线性的关系（，而我们在上一节中看到样本重复率和Max AUC也有着明确的相关性，所以很自然地，Max AUC和BER之间也存在很强的相关性，如下图所示：&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/v2-0ef447a64e45650bd90004dc136921bb.jpg" data-rawwidth="480" data-rawheight="480"&gt;&lt;p&gt;因为BER是一种错误指标，其取值是越低越好，和AUC相反，所以我们将BER换算为1-BER，又可得到如下图像：&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/v2-85576f56a92a1cb62a216cbf635ccc51.jpg" data-rawwidth="480" data-rawheight="480"&gt;&lt;p&gt;图中蓝色的线是y=x的直线。其中“贝叶斯正确率”是为了和“贝叶斯错误率”相对比而造出来的概念，其取值等于1-BER，统计学中并无此概念。可以看出Max AUC和BER之间有着强烈的正相关关系。&lt;/p&gt;&lt;h2&gt;真实数据集表现&lt;/h2&gt;&lt;p&gt;上面我们通过实验探索了Max AUC以及影响它的因素，并探索了它和贝叶斯错误率之间的关系，那么在真实数据中这种关系是否真实存在呢？为了验证这一点，我从我们工作中用到的两个数据集中计算了对应的AUC和BER，其中AUC包括Max AUC和真实模型给出的真实AUC。两个数据集和模型的表现如下：&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/v2-c2051310adc81f7ab7b1069e7f82b178.png" data-rawwidth="759" data-rawheight="182"&gt;&lt;p&gt;可以看出，在这两个数据集上来看，Max AUC和BER确实存在着正相关的关系，但是如果拿着0.033的BER到我们的模拟数据中去找的话，对应的Max AUC是0.997，并不是实际中的0.971。造成这两者之间的差异的原因之一，是因为我们在生成模拟数据的生成重复样本步骤中，使用了等概率来产生0和1两种标签，而真实数据中可能并不是这样，换句话说，这两份数据在具体的不确定性上并不完全相同，有兴趣的同学可以进一步探索不通的不确定性对于两者关系的影响。&lt;/p&gt;&lt;p&gt;从上面的数据，我们还可以看出一点，那就是Max AUC和真实模型AUC的高低并没有正相关的关系，这是因为这两份数据上模型的特征表达能力各不相同，数据集1上的特征表现出了对标签的更好的可区分性。&lt;/p&gt;&lt;h2&gt;启示&lt;/h2&gt;&lt;p&gt;通过上面简单的分析，我们可以得到以下一些启示：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Max AUC的高低只和特征取值的多样性有关。其实不只是Max AUC，在真实问题中使用更多好的特征也会提高AUC（起码是训练集AUC），本质上是因为更多的特征可以组合出更多的特征取值来，从而提高特征的区分能力。关于这部分更详细的理论解释，以及其与VC Dimension的关系，有兴趣的同学可以参考公开课&amp;lt;Learning
from Data&amp;gt;的前几章节(&lt;a href="http://work.caltech.edu/telecourse.html)" data-editable="true" data-title="caltech.edu 的页面" class=""&gt;http://work.caltech.edu/telecourse.html)&lt;/a&gt;。同时这也是一门非常好的机器学习理论入门课程，推荐给有兴趣的同学。&lt;/li&gt;&lt;li&gt;贝叶斯错误率与Max AUC有着密切的关系。由于这两个指标衡量的都是数据集中不可约错误（irreducible
error），所以他们在数值上表现出了很强的相关性。但是我们从两个实际例子中也可以看到，具体的关系还和数据中的不确定性相关。&lt;/li&gt;&lt;li&gt;更高的Max AUC并不代表更高的真实模型AUC。虽然更高的Max AUC代表了更多的特征取值可能性，但是影响真实AUC的，还有特征的具体区分度，也就是泛化能力。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;本文从“AUC究竟能有多高”这个问题出发，简单探讨了AUC和贝叶斯错误率这两个概念，以及他们之间的关系，并简单分析了Max AUC和真实AUC之间的一些关系。&lt;/p&gt;&lt;p&gt;由于时间匆忙和能力所限，本文并没有给出这两者之间理论关系的分析，做的实验也比较简单，所以充其量只是一块“砖”，希望可以引出更多的“玉”。本文使用的实验代码可在这里找到 ：&lt;a href="https://github.com/ruczhangxy/bayes_error_rate_vs_auc" data-editable="true" data-title="ruczhangxy/bayes_error_rate_vs_auc" class=""&gt;https://github.com/ruczhangxy/bayes_error_rate_vs_auc&lt;/a&gt;。欢迎有兴趣的同学拿去折腾。&lt;/p&gt;&lt;img rel="noreferrer" src="https://ga-beacon.appspot.com/UA-41015557-4/page-name?dt=https://zhuanlan.zhihu.com/p/24217322&amp;pixel&amp;useReferer"/&gt;</description><author>张相於</author><pubDate>Thu, 08 Dec 2016 08:37:35 GMT</pubDate></item><item><title>推荐系统老司机的十条经验</title><link>https://zhuanlan.zhihu.com/p/23847246</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/v2-0030879788e9fd568a23fd6e3b7ee583_r.jpg"&gt;&lt;/p&gt;&lt;p&gt;一年一度的ACM Recsys会议在9月份已经胜利闭幕，留下一堆slides和tutorials等着我们去学习。&lt;/p&gt;&lt;p&gt;翻看今年的各种分享，其中老司机Xavier Amatriain的分享引起了我的兴趣：Lessons Learned from Building Real­-Life Recommender Systems。主要分享了作为推荐系统老司机的他，多年开车后总结的禁忌和最佳实践，这样的采坑实录显然是很有价值的。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Xavier Amatriain，曾任Netflix的算法总监，现任Quora的工程副总裁。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Xavier Amatriain在recsys上的分享，是他在推荐系统领域的十条实践经验（这位老司机同样的题目在不同渠道多次分享过，一共有三个版本，加起来去重后不止十条，同学们赚到了），本文只针对他在Recsys2016上的分享一一解读。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;一、隐式反馈比显式反馈要爽&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;所谓隐式反馈，就是用户发出这些行为时并不是为了表达兴趣/态度，只是在正常使用产品而已，反之，显式反馈就是用户在做这个操作时就是要表达自己的态度，如评分，投赞成/反对票。&lt;/p&gt;&lt;p&gt;Xavier Amatriain列举了隐式反馈的以下好处：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;数据比显式反馈更加稠密。诚然，评分数据总体来说是很稀疏的，之前netflix的百万美元挑战赛给出的数据稀疏度大概是1.2%，毕竟评分数据是要消耗更多注意力的数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;隐式反馈更代表用户的真实想法，比如你不是很赞成川普的观点，但是还是想经常看到他的内容（以便吐槽他），这是显式反馈无法捕捉的。而人们在Quora上投出一些赞成票也许只是为了鼓励一下作者，或者表达一些作者的同情，甚至只是因为政治正确而投，实际上对内容很难说真正感兴趣。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;隐式反馈常常和模型的目标函数关联更密切，也因此通常更容易在AB测试中和测试指标挂钩。这个好理解，比如CTR预估当然关注的是点击这个隐式反馈。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;举个例子，IMDB的电影排名，对比一下用票房排名和用评分排名，票房其实是一种隐式反馈的量化，表示“看过”，而评分则是显式反馈。&lt;/p&gt;&lt;p&gt;一些小众电影的评分比较少，在依靠评分排名时不太占优势，而依靠隐式反馈排名则会有所缓解。&lt;/p&gt;&lt;p&gt;虽然有诸多好处，但隐式反馈有个比较大的问题就是：短视。现在有很多手段来吸引用户点击，比如高亮的标题，还有一些“三俗”的图片，都会吸引用户点击，这种利用了人性弱点的隐式反馈，对平台的长期价值是有损的，所以也不能一味使用隐式反馈，而是需要隐式反馈和显式反馈结合使用，兼顾短期利益和长期价值。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;二、深刻理解数据&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Xavier Amatriain举了个例子，训练一个分类器，用来自动识别优质答案或劣质答案。这个问题似乎很简单，实际上你要思考，下面这些答案是好的还是不好的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;抖机灵的答案&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;某个领域的网红给了个很短的答案&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;很长、很有料的答案，但是没有人点赞&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;内容有料，但是错别字多&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这些都是需要我们去深入业务理解，到底什么样的数据才是我们要找的。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;三、为模型定义好学习任务&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;一个机器学习模型有三个因素构成：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;训练数据（隐式反馈或者显式反馈）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;目标函数（比如用户阅读一篇回答的概率）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;衡量指标（比如准确率或者召回率）&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;假如现在有这么一个问题：用用户的购物历史以及历史评分，去优化用户走进电影院看完一部电影并且给出高分的概率，NDCG作为模型的评价指标，4分以上作为正样本。&lt;/p&gt;&lt;p&gt;这样就比较清晰的定义了学习任务的三元素：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;训练数据：用户购物历史和历史评分&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;目标函数：用户走进电影院看完电影且给出高分的概率&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;衡量指标：NDCG&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果定义评价指标时模糊不清，如不说明是4分以上的作为正样本的话，就失去了显式反馈的信息，失去了对平台长期利益的关注。&lt;/p&gt;&lt;p&gt;还有个例子，Quora的兴趣feed排序。&lt;/p&gt;&lt;p&gt;Quora的首页是结合了多个用户隐式反馈的排序模型，给每一种用户行为建立一个预测模型，预测它发生的概率，结合每一种行为带来的长期价值大小，然后加权，即期望价值。这个例子里面的三元素也可定义清楚：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;训练数据：用户的显式反馈和隐式反馈&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;目标函数：一个story的展示价值，量化定义为用户行为的期望价值&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;衡量指标：任何排序模型指标都可以&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;strong&gt;四、推荐可解释比精准更有意义&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这里其实就是说推荐要展示出理由给用户，让用户知道每一项推荐的项目是怎么得到的。&lt;/p&gt;&lt;p&gt;比如Quora的feed推荐给出的“被你关注的人投票”的理由：&lt;/p&gt;&lt;p&gt;比如Quora给出的推荐话题给出的“被你关注的人关注”的理由：&lt;/p&gt;&lt;p&gt;比如Netflix给出的“因为看过给出好评的电影而推荐”的理由：&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;五、矩阵分解大法好&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Xavier Amatriain很推崇Matrix Factorization，因为它既有监督学习，又有无监督学习。&lt;/p&gt;&lt;p&gt;两种学习方法就这样结合在一个算法里：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;它可以用来降维，这部分通常是PCA这样的无监督学习算法承担的，矩阵分解得到的隐因子就是降维后的特征，可以直接作为其他学习算法的输入；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;它还可以做聚类，比如Non-negative Matrix Factorization就常常用来做聚类；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;SVD就是一种回归，标准的监督学习。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;矩阵分解还有一些变种：ALS（交替最小二乘），SVD++（结合特征的SVD），FM（因子机），TF（张量分解）。&lt;/p&gt;&lt;p&gt;总之，在推荐系统里，使劲压榨矩阵分解的效果。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;六、万能的集成方法&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Netflix的冠军模型，那可是100多种算法集成在一起的，真是应了那句话：比你效果好的模型还比你更努力。&lt;/p&gt;&lt;p&gt;实际上任何推荐系统也不可能是单一算法在起作用，而是多种算法集成在一起。集成方法理论上不会比你其中那个最好的算法差。在推荐系统中，你至少可以集成基于内容推荐和协同过滤两种。&lt;/p&gt;&lt;p&gt;本质上，集成算法是把某个模型的输出变成另一个模型的特征。如果你很难决策到底用哪个算法时，千万不要纠结，所有的都用，然后集成之。&lt;/p&gt;&lt;p&gt;集成还有一个好处就是：某个推荐算法可能更适合某个场景下，这样被集成的算法就可以各自handle各自擅长的场景，最后集大成。&lt;/p&gt;&lt;p&gt;具体集成方法可选的很多，如logistic regression，GBDT，Random Forest，ANN。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;七、推荐系统也不能免俗之特征工程&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;谈机器学习必谈特征工程，虽然深度学习的大火让某些领域的机器学习应用更加端到端了，但是推荐系统这个王国里面，特征工程还是要谈一谈，&lt;/p&gt;&lt;p&gt;好的特征有以下特点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;可复用。可复用就是说不止一个模型可以用，换个模型一样用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可转换。特征是既可以直接使用，也可以进行一些尺度转换的，比如对数转换等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可解释。特征的物理意义需要很清楚。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可靠。特征出现异常的话需要能及时监控到，也要容易调试。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Xavier以Quora的答案排序为例，举了一些他们现在用到的特征算是好特征：&lt;/p&gt;&lt;p&gt;一个是答案本身的特征，如回答的质量；第二个是互动类型的特征，如投票，评论；还有用户特征，如他在某个话题下的专业程度。&lt;/p&gt;&lt;p&gt;深度学习给了另一种全新的特征工程之路，也是值得探索的，或许是人工特征工程的终结者，拭目以待。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;八、对你的推荐系统要了如指掌&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;推荐系统里面，模型对于很多人来说都是黑盒子，甚至对于算法工程师自己来说也是黑盒子，并不太清楚某个东西为什么被推出来，某个东西为什么用户没买帐或者买帐。&lt;/p&gt;&lt;p&gt;通常产品经理对推荐系统都有一定的预期，推荐的东西不能让他们理解，解释起来也比较麻烦，也是通常算法工程师和PM产生争端的原因所在。对于黑盒一般的模型，我们要能够做到可以回答任何人的任何问题。模型应该做到“可调试”（debuggability）。&lt;/p&gt;&lt;p&gt;举个例子，一个决策树算法，从根节点开始，一步一步经过了哪些决策节点得到了最终的预测结果呢？如果有工具可以直观展现出来，我们就能知道哪些特征起了更重要的作用，是不是合理的。&lt;/p&gt;&lt;p&gt;Xavier 提到在Quora内部就有个工具，可以看到某个人的首页feed的每一个内容的分数，以及每个分数计算所依赖的特征，这样就很清楚知道为什么你“看到/没看到”某个人的回答或问题。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;九、数据和模型是重要，但正确的演进路径更不容忽视&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;老司机说，这条经验他很看重。这条经验告诉我们，一个推荐系统的产品功能如何一步一步从0到上线的。&lt;/p&gt;&lt;p&gt;通常，正确的演进路径是这样：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;首先提出一个假设，可以通俗的说是对问题的一个猜想。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;针对这个假设，我们要选择用什么模型。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;模型选定后训练模型，离线测试，如果验证通过就要上AB测试，否则要么换个模型，要么重新审视一下你的假设是不是站得住脚；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;上AB测试，测试结果明显提升的话就上线，否则滚回去再看看最开始你那个假设是不是靠谱。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这个过程有几个地方比较难。&lt;/p&gt;&lt;p&gt;第一个就是离线模型评价指标的选择，不同的指标可能包含不同的意义，例如同样是Learn to rank的排序评价，MRR和NDCG这两个指标对于排序靠前的项目权重就会更大，而FCP（Fraction of Concordant Pairs）就更看重排序靠中间的项目。所以选择什么指标要仔细思考，离线评价表现好才有机会有必要上AB测试。&lt;/p&gt;&lt;p&gt;第二个就是离线评价（通常是技术性或者学术性的，比如准确率）和在线产品指标（通常是商业性的，比如留存率）之间通常是存在鸿沟的。模型的离线评价效果可能很好，但是在线去测试，产品指标可能表现不好，可以离线的时候换一个与直接产品指标更相关的评价指标。&lt;/p&gt;&lt;p&gt;第三个就是AB测试的时候一定注意要有一个总体评价指标（ Overall Evaluation Criteria），很多人（通常是产品经理）会同时关注一个AB测试的很多指标，点击率上去了，多样性又下去了，这种测试结果你很难说是该上线还是该下线，所以说需要一个 Overall Evaluation Criteria，如果你有多个目标，就想法把多个目标整合成一个数值指标，这样才能够最终决定AB测试是成功还是失败。 Overall Evaluation Criteria通常是更接近商业目标和平台长期价值的数值，要定义出来需要深度的思考。&lt;/p&gt;&lt;p&gt;最后提一下，AB测试并不是唯一确定新算法是否上线的方式，还有一种方法是bandit算法，见&lt;a href="https://zhuanlan.zhihu.com/p/21388070" data-editable="true" data-title="专治选择困难症——bandit算法" class=""&gt;专治选择困难症——bandit算法&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;十、别一言不合就要上分布式&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Hadoop，spark，mapreduce，这些名词背后有一个共同的概念：分布式。&lt;/p&gt;&lt;p&gt;现在，所谓的大数据项目也是言必称分布式，那么是不是都需要分布式呢？尤其是模型部分？老司机Xavier认为，大多数推荐算法不需要分布式，毕竟我们的推荐系统中很少会有训练计算机从海量视频中识别什么是猫这样的算法。&lt;/p&gt;&lt;p&gt;Xavier说，很多算法其实都是可以在单机上完成的（多核的单机），那为什么大家又很少这样做呢？究其原因有几个：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;分布式平台的确降低了处理大数据的门槛，稍微写点胶水代码就可以操作成T上P的数据，工程师们不用懂太多分布式本身的知识；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一些在单机上并行处理数据的方法不为人知，比如像C++中的openmp这样的库，很多人并不知道，它可以充分发挥多核机器的作用。还有Linux本身有很多并行化的命令，比如grep，wc等；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;掌握的数据采样方法不够不精。对全量数据采样，以使之在单机上能够计算且不明显损失信息，这是一门精致的手艺，很多人并不掌握。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Xavier说在Quora，曾经用Spark实现了一个计算任务，需要15台机器跑6小时才能跑完，而某个工程师花了四天时间研究spark慢在哪，然后用C++写了一个单机版，只用10分钟就跑完整个任务。说到这里，我也同样的经验，曾经用Spark跑协同过滤，四个小时没有跑完，组内的董玮博士用C++写了一个单机版，用openmp库把所有的核都用上，30分钟就计算完了。&lt;/p&gt;&lt;p&gt;说到这里，常见的推荐算法有很多分布式的库，比如Spark中就有MLib库，但是也可以试试一些著名的单机版，如GraphChi。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;十一、要做就做能赚钱的推荐系统【推广】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;不得不承认，我们遇到的推荐系统都是这样的：&lt;/p&gt;&lt;p&gt;推荐新闻，阅读了就是推荐成功；&lt;/p&gt;&lt;p&gt;推荐音乐，加红心或者听完了就是推荐成功；&lt;/p&gt;&lt;p&gt;推荐商品，点击了就是推荐成功；&lt;/p&gt;&lt;p&gt;推荐好友，加关注了就是推荐成功；&lt;/p&gt;&lt;p&gt;推荐视频，观看了就是推荐成功；&lt;/p&gt;&lt;p&gt;...……&lt;/p&gt;&lt;p&gt;到底这些推荐系统产生了多大的商业价值，我们都无法确切知道，作为从业者的我们也无法确切知道自己工作的价值是多大。&lt;/p&gt;&lt;p&gt;看到这里，你是不是有点沮丧？&lt;/p&gt;&lt;p&gt;难道没有可以直接衡量推荐系统商业价值的产品吗？&lt;/p&gt;&lt;p&gt;当然有！&lt;/p&gt;&lt;p&gt;点击“&lt;strong&gt;&lt;a href="https://www.lagou.com/gongsi/157834.html" data-title="这里" class="" data-editable="true"&gt;这里&lt;/a&gt;&lt;/strong&gt;”了解更多详情。&lt;/p&gt;&lt;p&gt;参考资料：&lt;/p&gt;&lt;p&gt;[1] &lt;a href="http://www.slideshare.net/xamat/recsys-2016-tutorial-lessons-learned-from-building-reallife-recommender-systems" class=""&gt;http://www.slideshare.net/xamat/recsys-2016-tutorial-lessons-learned-from-building-reallife-recommender-systems&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[2] &lt;a href="http://www.slideshare.net/xamat/strata-2016-lessons-learned-from-building-reallife-machine-learning-systems" class=""&gt;http://www.slideshare.net/xamat/strata-2016-lessons-learned-from-building-reallife-machine-learning-systems&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[3] &lt;a href="https://chatbotnewsdaily.com/10-more-lessons-learned-from-building-real-life-ml-systems-part-i-b309cafc7b5e#.vmuuaznyk"&gt;https://chatbotnewsdaily.com/10-more-lessons-learned-from-building-real-life-ml-systems-part-i-b309cafc7b5e#.vmuuaznyk&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[4] &lt;a href="https://medium.com/@xamat/10-more-lessons-learned-from-building-real-life-machine-learning-systems-part-ii-93fe7008fa9#.e4p4bl23f"&gt;https://medium.com/@xamat/10-more-lessons-learned-from-building-real-life-machine-learning-systems-part-ii-93fe7008fa9#.e4p4bl23f&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[5] &lt;a href="https://www.youtube.com/watch?v=88tzDSOzVUQ"&gt;https://www.youtube.com/watch?v=88tzDSOzVUQ&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;本文作者：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;陈开江@刑无刀，多年个性化推荐从业经验，欢迎加他个人微信交流：kaijiang_chen，注明来自resyschina。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;★ 猜你喜欢：「&lt;a href="https://zhuanlan.zhihu.com/p/22560037" data-editable="true" data-title="搜索、推荐和广告架构能统一吗？" class=""&gt;搜索、推荐和广告架构能统一吗？&lt;/a&gt;」&lt;/p&gt;&lt;p&gt;本文首发微信公众号【ResysChina】，中国最专业的个性化推荐技术社区。&lt;/p&gt;&lt;img rel="noreferrer" src="https://ga-beacon.appspot.com/UA-41015557-4/page-name?dt=https://zhuanlan.zhihu.com/p/23847246&amp;pixel&amp;useReferer"/&gt;</description><author>刑无刀</author><pubDate>Tue, 22 Nov 2016 01:59:49 GMT</pubDate></item><item><title>写在ResysChina微信公众号一万订阅用户之际</title><link>https://zhuanlan.zhihu.com/p/23418070</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/v2-e918cb102981e7bf90f2c5fccc84b4aa_r.jpg"&gt;&lt;/p&gt;&lt;p&gt;2009年8月，我和项亮一起发起了ResysChina，一个面向推荐系统领域的专业社区。建立初衷，是想为业内关注推荐系统领域的朋友们提供一个交流讨论的社区。我们开过邮件组，架过博客，也举办过线下活动。业内朋友给予了ResysChina很多的鼓励与支持，ResysChina也为推动个性化推荐技术在国内的普及做出了一些绵薄之力。有些认识我的朋友会知道，2013年对我个人是非常特别的一年，无论从个人生活还是工作上，都翻到了新的一页，ResysChina一直以来都是纯粹兴趣驱动，在生活与现实的压力之下，也不得不暂停了。我本以为它再也不会回来了。2016年，我把它捡了回来，并试着努力坚持下去。先开的微信公众号，后又开了知乎专栏。公众号定位原创内容，会有我自己的一些灌水，知乎专栏定位精选，也会更专注在推荐技术产品，比如《&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231232&amp;amp;idx=1&amp;amp;sn=e02ac9fdb59700cabbc0c5054eaea72d&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="到底要不要创业？" class=""&gt;到底要不要创业？&lt;/a&gt;》这篇，我写得挺诚恳的，但与知乎专栏定位不符，就没发到这里。&lt;/p&gt;&lt;p&gt;下面是我个人推荐阅读的一些ResysChina微信公众号上的原创文章，欢迎大家阅读、分享：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=201646489&amp;amp;idx=1&amp;amp;sn=e71e59e4c2595cdd88659ebf51374a56&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="Amazon与数据导向" class=""&gt;Amazon与数据导向&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231005&amp;amp;idx=1&amp;amp;sn=d9ba2f9f0b825bb4c3dc9e1c3d5af059&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="关于 Facebook NewsFeed，看这一篇就够了！"&gt;关于 Facebook NewsFeed，看这一篇就够了！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231070&amp;amp;idx=1&amp;amp;sn=d9d625c0aa180901fd8a0a9ed98c31ef&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="AlphaGo与深度学习"&gt;AlphaGo与深度学习&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231076&amp;amp;idx=1&amp;amp;sn=9591022ba3c0afd3944b548483bf12a1&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="深度学习与推荐系统"&gt;深度学习与推荐系统&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231090&amp;amp;idx=1&amp;amp;sn=2f6c052b718ba5734c084feb9f7bc5d7&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="Amazon开源面向推荐系统的深度学习框架DSSTNE [1]"&gt;Amazon开源面向推荐系统的深度学习框架DSSTNE [1]&lt;/a&gt;、&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231093&amp;amp;idx=1&amp;amp;sn=405cecdf26105b772e3d9cb431bb1ff9&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="[2]"&gt;[2]&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231099&amp;amp;idx=1&amp;amp;sn=6ff30a52fbbe9d01ef022661c6325dc4&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="Netflix推荐系统的最新解读：算法、商业价值与创新 [1]"&gt;Netflix推荐系统的最新解读：算法、商业价值与创新 [1]&lt;/a&gt;、&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231108&amp;amp;idx=1&amp;amp;sn=ff9a025b5ec36ba31350cd628cbf848b&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="[2]"&gt;[2]&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231122&amp;amp;idx=1&amp;amp;sn=daae86382c7cf3290bcd3da289aea8bb&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="机器学习系统丛林迷路指南"&gt;机器学习系统丛林迷路指南&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231124&amp;amp;idx=1&amp;amp;sn=02cd1f74532393bb03ef0421d12c1c28&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="做爱做的事情"&gt;做爱做的事情&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231140&amp;amp;idx=1&amp;amp;sn=0fd6465d892966675faae2fb93b93dcd&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="推荐也是一件讲颜值的事情"&gt;推荐也是一件讲颜值的事情&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231151&amp;amp;idx=1&amp;amp;sn=37eac226ecd344d25ad828e3d9c9f2db&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="再谈「搜索已死，推荐上位」"&gt;再谈「搜索已死，推荐上位」&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231159&amp;amp;idx=1&amp;amp;sn=93c5767ccc086409ab62a435c0e9d4af&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="你好，bot！"&gt;你好，bot！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231162&amp;amp;idx=1&amp;amp;sn=701246413bc0448b815803c0dc120f6d&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="专治选择困难症——bandit算法" class=""&gt;专治选择困难症——bandit算法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231187&amp;amp;idx=1&amp;amp;sn=ecdb7cc4ddd8953bd0a48e8c14d8077a&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="关于LDA, pLSA, SVD, Word2Vec的一些看法"&gt;关于LDA, pLSA, SVD, Word2Vec的一些看法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231200&amp;amp;idx=1&amp;amp;sn=0154e6970d08d1b1554a619c37016fa2&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="谷歌、Facebook、亚马逊、微软、NVIDIA及BAT在深度学习方面的进展"&gt;谷歌、Facebook、亚马逊、微软、NVIDIA及BAT在深度学习方面的进展&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231232&amp;amp;idx=1&amp;amp;sn=e02ac9fdb59700cabbc0c5054eaea72d&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="到底要不要创业？" class=""&gt;到底要不要创业？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231246&amp;amp;idx=1&amp;amp;sn=16fbcb9418dbe4f6fac8e6dd5aaa4e69&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="Amazon的推荐系统到底行不行？"&gt;Amazon的推荐系统到底行不行？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231257&amp;amp;idx=1&amp;amp;sn=8ee21d011e34059fee83e32b2dc4c5a5&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="为什么说初创公司过度关注技术就是浪费时间"&gt;为什么说初创公司过度关注技术就是浪费时间&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231265&amp;amp;idx=1&amp;amp;sn=249d8513aab9f8ce3ee137a19cea8099&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="巨头们都很重视的聊天机器人，你不进来看看吗？"&gt;巨头们都很重视的聊天机器人，你不进来看看吗？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231283&amp;amp;idx=1&amp;amp;sn=3d5f5989896a2b7be52558c9cc56e855&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="Quora是如何做推荐的？"&gt;Quora是如何做推荐的？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231300&amp;amp;idx=1&amp;amp;sn=fe975d6af79596b5eaf576e5f65e8e06&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="推荐系统的苟且和远方"&gt;推荐系统的苟且和远方&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231335&amp;amp;idx=1&amp;amp;sn=d3ba98841e85b7cea0049cc43b3c16ca&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="基于Deep Learning的中文分词尝试"&gt;基于Deep Learning的中文分词尝试&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231349&amp;amp;idx=1&amp;amp;sn=395049b105cc1da9213faa56c7cd79a5&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="当我们谈论 Bot 的时候，我们在谈论什么"&gt;当我们谈论 Bot 的时候，我们在谈论什么&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231352&amp;amp;idx=1&amp;amp;sn=4e55605bef6182d6bee7f91071801b90&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="用贝索斯的「两类决策法」对待职业选择"&gt;用贝索斯的「两类决策法」对待职业选择&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231382&amp;amp;idx=1&amp;amp;sn=b11016d92cf7cc42a0edf899ece21348&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="搜索、推荐和广告架构能统一吗？"&gt;搜索、推荐和广告架构能统一吗？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231399&amp;amp;idx=1&amp;amp;sn=6862d18bdefdd361d6fce337e14ac7d5&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="对话交互时代的各种Bot：可控性与智能性的权衡"&gt;对话交互时代的各种Bot：可控性与智能性的权衡&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;另外还有几个系列，我在微信公众号里设置了关键字，大家回复相应【关键字】即可查看:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;【resys】：看大厂如何做推荐的系列文章，公众平台上独一份，干货必读。&lt;/li&gt;&lt;li&gt;【feed】：按照大神KK的说法，NewsFeed代表一种互联网的必然，这是关于NewsFeed的系列文章，Facebook、Pinterest、Quora等都有讲到。&lt;/li&gt;&lt;li&gt;【bot】：Chatbot无疑是今年国内外互联网圈和投资领域的最热点之一，这里有一些一线玩儿家的文章分享，认不认同这个方向，都值得读一读。&lt;/li&gt;&lt;li&gt;【amazon】：Greg Linden的《Early Amazon》系列文章，这种从员工的角度，讲述他们自己跟随公司一起成长的故事，一个一个真实的、美妙的片断，非常非常吸引人。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;感谢项亮，感谢三位特约作者：陈开江、张相於和张俊，王守崑老师也分享了一篇。提笔不易，尤其是大家每个人各自都还都挺忙的情况下，持续不断地为大家带来了新鲜的分享。我也想借此鼓励欢迎给ResysChina投稿，多分享多交流，这个领域的从业者都会从中受益，而且最重要的，是你自己一定会有意想不到的收获。&lt;/p&gt;&lt;p&gt;还要感谢梁斌博士（公众号：pennyjob）、InfoQ霍泰稳老板（公众号：zenpark）、以及陈利人老师（公众号：daiziguizhongren），在ResysChina刚开始写的时候，就通过自己的公众号推荐了ResysChina。另外还有知乎的不吝推荐，内容入选过一次知乎日报，知乎官微也推荐过一次，不胜荣幸，一并感谢。&lt;/p&gt;&lt;p&gt;在微信里搜索【ResysChina】即可添加关注。如果你觉得ResysChina公众号的内容对你有帮助，把它转发到朋友圈或者推荐给身边的朋友，是对我们最大的支持。感谢大家！&lt;/p&gt;&lt;p&gt;另外，正在微信公众号上&lt;strong&gt;&lt;u&gt;送一个小福利&lt;/u&gt;&lt;/strong&gt;，博文视点图书《深度学习：21天实战Caffe》，时间截止到本周末，有兴趣的可以&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231403&amp;amp;idx=1&amp;amp;sn=9d38ccc26f53755707feaf5900fee0da&amp;amp;chksm=841abf0cb36d361aa6098124ac18fdbe54f4f267a90af63ab5bc76dc571e70139a06f3c295cf#rd" data-editable="true" data-title="参与一下" class=""&gt;参与一下&lt;/a&gt;，感谢 @永恒的侠少 老师赠书。&lt;/p&gt;&lt;img rel="noreferrer" src="https://ga-beacon.appspot.com/UA-41015557-4/page-name?dt=https://zhuanlan.zhihu.com/p/23418070&amp;pixel&amp;useReferer"/&gt;</description><author>谷文栋</author><pubDate>Fri, 04 Nov 2016 12:40:03 GMT</pubDate></item><item><title>工程师要不要写ETL？——教你构建高效的算法/数据科学部门</title><link>https://zhuanlan.zhihu.com/p/22829126</link><description>&lt;h1&gt;翻译前言&lt;/h1&gt;&lt;p&gt;在很多互联网公司的算法相关部门（例如搜索、推荐、广告）里，都有“做算法的”和“做工程的”两个工种。这个看似天经地义的分工方式是否就是最优的方式？这似乎还是存在一些争议的。&lt;/p&gt;&lt;p&gt;这篇文章阐述了一种当前较为普遍合作模式下的问题，译者觉得说得很在点上。更宝贵的是，作者同时也提出了一种可能会更好的合作模式，能够解决这些问题。&lt;/p&gt;&lt;p&gt;需要提前说明的一点，文中的“数据科学家”可理解为我们常说的偏算法的工程师，而文中的“工程师”或者“数据工程师”可理解为我们常说的偏工程或者偏架构的工程师。&lt;/p&gt;&lt;p&gt;本文的英文原文请见：&lt;a href="http://multithreaded.stitchfix.com/blog/2016/03/16/engineers-shouldnt-write-etl/" data-editable="true" data-title="Engineers Shouldn’t Write ETL: A Guide to Building a High Functioning Data Science Department" class=""&gt;Engineers Shouldn’t Write ETL: A Guide to Building a High Functioning Data Science Department&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;正文开始&lt;/h2&gt;&lt;p&gt;“你的团队和数据科学家们[1]之间的关系是怎样的”？毫无疑问，这是我作为面试官，面试数据平台工程师[2]时最常被问到的一个问题。这在面试过程中是一个很正常的问题，属于求职者评估新机会的必要流程。而我也经常很乐于回答这个问题。但是我希望我不需要回答，因为这个问题的背后，折射出的是怀疑和恐惧。&lt;/p&gt;&lt;p&gt;为什么呢？如果你阅读一下硅谷科技公司里数据科学与算法开发部门的招聘启事，你或许会相信数据科学家和工程师之间的关系是高度协作、有机并且富有创造性的。&lt;/p&gt;&lt;p&gt;但是，行业里的真实情况却并非如此。大多数场景下，这两者的关系其实是介于“不存在”[3]和“高度功能失调”之间的。&lt;/p&gt;&lt;h2&gt;一个典型的数据科学部门&lt;/h2&gt;&lt;p&gt;大多数公司将他们的数据科学部门划分为三个组：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;数据科学家：这些家伙就是那些“工程比统计学家好&amp;amp;统计比工程师好”的人。也就是所谓的“思考者”。&lt;/li&gt;&lt;li&gt;数据工程师：这些人构建数据通道，将数据“喂”到数据科学家“嘴里”，然后从数据科学家手里拿到idea并且实现它们。也就是所谓的“执行者”（Doer）。&lt;/li&gt;&lt;li&gt;架构工程师：这些人维护Hadoop集群以及其他大数据平台架构。也就是所谓的“水管工”[4]。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;数据科学家们经常不爽的是，工程师们实现算法的速度太慢，以及他们之间的工作流程，路线图以及动机总是同步不到位。当他们想法的版本1进入ABTest的时候，版本2和版本3早就已经排好队了。他们的失望和不爽是非常可以理解的。&lt;/p&gt;&lt;p&gt;数据工程师们经常不爽的是，数据科学家们给出的代码总是效率低下，代码丑陋，几乎从不考虑可维护性和工程化问题，而且会提出一些不现实的功能需求，结果是破坏了工程实现方案，但也没有得到什么好处。这种问题继续下去还有很多，但是相信你已经懂了问题在哪里。&lt;/p&gt;&lt;p&gt;而架构工程师们对他们都不爽，因为他们总是将集群上塞满任务，将硬盘里塞满数据。而且他们常常与数据科学家和工程师们都离得比较远，这意味着他们从来不知道集群是在什么场景下被如何使用的，也不知道集群被用来解决什么业务或技术问题。这让他们在很难摆脱当前不爽的境地。所以，他们的应对方法就是对集群做更严格的限制，这样做的结果，就是其他人都开始对他们感到不爽。&lt;/p&gt;&lt;p&gt;这显然是个恶性循环。&lt;/p&gt;&lt;h2&gt;哪里错了？&lt;/h2&gt;&lt;p&gt;我们都知道这样做是不对的，那我们为什么不解决这样的问题呢？为什么每个数据科学和算法开发部门似乎都会滑落到这样“功能失调”的模型中？&lt;/p&gt;&lt;p&gt;我将这其中的症结归于两件事情，在这里用一些观察来做出阐述。&lt;/p&gt;&lt;h3&gt;你或许并没有“大数据”&lt;/h3&gt;&lt;p&gt;数据处理的工具和技术在过去五年间发生了巨大的进步。除非你要处理几个P级别的数据，或者每天需要消费千亿级的事件，那么大多数技术现在都可以轻松扩容到你所需要的规模。&lt;/p&gt;&lt;p&gt;除非你有试探这些技术的极限的需求，你或许并不需要一只高度专业的专业工程师团队来在其基础上构建解决方案。如果你雇佣了这些人，他们会感到无聊。如果他们感到无聊，他们就会离你而去，去到他们的专业技能更能发挥作用的地方，例如Google，Facebook等等。如果他们不感到无聊，那么他们的技能很可能非常平庸。平庸的工程师最擅长的事情，就是构建巨大无比、过于复杂、难以使用的垃圾，然后称之为“解决方案”。而垃圾往往需要更多的维护工作。&lt;/p&gt;&lt;h3&gt;每个人都想做“思考者”&lt;/h3&gt;&lt;p&gt;因为这听起来更酷！你可以整天坐在那里，思考做事情更好的方式，然后把你的思考结果甩给那些急于将它们工程化的工程师们。大街上每个人都会喜欢这个职位的！数据科学家们，尤其是那些刚刚工作、对行业了解不多的，对这样的职位尤其喜欢。&lt;/p&gt;&lt;p&gt;这些都是我们引导的结果，而一些大公司更要为此负责，尤其是那些在大数据疯狂之前就已经有了数据智能部门的公司。&lt;/p&gt;&lt;p&gt;一个传统的数据智能部门包括三种角色：ETL工程师，报告工程师（report developer），以及DBA。ETL工程师把数据转移到数据仓库中。报告工程师的主要工作是在特定工具（例如MicroStrategy）中设计报告，这些人是领域内的专家。DBA（和其他工具管理团队）的工作就是让这一切都流畅运行。&lt;/p&gt;&lt;p&gt;这里的问题在于，ETL工程师，报告工程师还有DBA全部是执行者，所以，当十年前“大数据”和“数据科学家”这些词汇刚刚兴起的时候，这些传统的BI部门面临着执行者太多，而缺乏思考者的问题。所以他们制造了“思考者”这样一个职位。我们向数据科学家许下承诺，承诺他们可以随便折腾数据，进而改变世界。但事实上并非如此。这些数据科学家有时会创造出一些很酷并且有用的方案，但是在大多数时间里，他们做的工作并不比报告工程师高明多少。&lt;/p&gt;&lt;p&gt;但是这个职位听起来很酷，而且比较容易招聘。所以就诞生了当代传统的数据科学部门：数据科学家（以前的报告工程师，现在的“思考者”），数据工程师（以前的ETL工程师，现在的“执行者”），以及架构工程师（以前的DBA，现在的“水管工”）。&lt;/p&gt;&lt;p&gt;呵呵，看起来数据智能（BI）部门从来就没有改变，我们只是加了个Hadoop集群然后换了个新名字。&lt;/p&gt;&lt;h2&gt;真的那么糟糕吗？&lt;/h2&gt;&lt;p&gt;这个问题取决于我们的目的是什么。如果你同意上面的观点，那么你得承认，自从BI兴起之日，很多公司使用这样的模式使用了很多年。但是如果你希望你的数据科学团队能够产出PPT以外的更多成果，那么我认为这是一个非常低效率的模型。&lt;/p&gt;&lt;p&gt;上面的“思考者”+“执行者”模式想要成功的一个基本假设是：需要有一群出色的工程师，他们没有自己的灵魂，只是积极地将“思考者”的想法实现落地。但是，这样的工程师，会是出色的工程师吗？&lt;/p&gt;&lt;p&gt;在这个模型中，执行者们需要为其他人思想的实现和失败负责，而思考者则因为成功而受到奖赏。这就是团队中争论和嫌隙的核心。&lt;/p&gt;&lt;p&gt;如果你希望为数据工程师岗位招聘到有天赋的优秀人才，你需要一些更大规模的、更NB的问题来让他们解决，好让他们的工作中不只是毫无灵魂地实现别人的想法。你需要的是大数据催生的大规模问题，但问题是，你并没有大数据。&lt;/p&gt;&lt;p&gt;所以，你只能雇到中庸的工程师。他们会制造出大量的烂摊子，进一步加重问题，让你走上恶性循环。最终的结果，就是数据科学家并不比传统的报告工程师厉害多少，因为他们缺乏一个创新、坚固的数据平台支持。进一步，如果你把他们定位为报告工程师，数据科学家们就该跑路了，&lt;strong&gt;毕竟，他们可是“思考者”，不是“执行者”！&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;一种不同的数据科学部门&lt;/h2&gt;&lt;p&gt;在这个问题上，我们不应该去一味地效仿那些大公司的做法，而是应该想办法去革新这个模型。别再试图去设计更快的马了[5]&lt;/p&gt;……&lt;p&gt;几年以前，当我我加入Stitch Fix也正是这个原因。在Stitch Fix，我们努力在算法和分析方面做到世界最好。我们的方法是通过输出来领导行业，而不是把结果简单地告知（inform）[6]&lt;/p&gt;。所以要想达到目的，必须从心底认为当前的模式是不对的，这样才能全身心投入地创造更好的新模式。&lt;p&gt;在见证了过去两年中我们部门发展壮大的过程后，我有信心将这些与大家分享。既然我们的目的是通过输出来领导，而不是告知，我希望分享一种我认为更好的数据科学部门的组织方式。这是一种完全“自治”的角色，一种从头到尾负责到底的责任感和ownership，并且要为结果负责。这是一种更加适合快速发展和迭代的公司的做法。&lt;/p&gt;&lt;h3&gt;让每个人都成为最好的&lt;/h3&gt;&lt;p&gt;让我们忘掉传统角色的分别，来思考一下工作中真正让人兴奋的地方。&lt;/p&gt;&lt;p&gt;不管什么角色，普通和优秀之间最大的差异之一就是对创新的渴望和能力。优秀的人能够识别并创造性地解决普通人无法解决的问题，他们更适合，也更渴望一种自治、ownership和专注的环境。&lt;/p&gt;&lt;p&gt;从数据科学家到工程师的流水线完全是这种环境的反方向（事实上数据科学家们也不喜欢如此依赖“执行者”）。所以诀窍就在于为每个人都创造足够自治、ownsership和专注的环境。&lt;/p&gt;&lt;p&gt;但需要注意的是，能让数据科学家和工程师们兴奋的点是完全不一样的：&lt;/p&gt;&lt;h4&gt;数据科学家&lt;/h4&gt;&lt;p&gt;数据科学家们喜欢的问题是与业务紧密相关，能够通过自己努力直接影响项目或者组织的成败的。他们对某些事情或者流程进行优化，或者从头创造一个东西。这些都是针对性很强的问题，所以他们的solution也会是这样。这些solution涉及到各种商业逻辑的混合，对运行流程的深入思考，以及大量的创造性。因此，这需要对业务逻辑中某个部分的深刻理解，以及对业务过程的纵向深入参与。&lt;/p&gt;&lt;h4&gt;工程师&lt;/h4&gt;&lt;p&gt;工程师们擅长将问题抽象、泛化，然后找到优雅有效的解决方案。与数据科学家们感兴趣的问题不同，这些问题一般都是横向的，也就是说，他们在被广泛应用时能够发挥最大作用。这需要对业务运转整体流程的整体深入理解，由于这些解决方法都是高度抽象的，因此并不要求工程师对业务的某一部分有非常深入的了解和参与度。&lt;/p&gt;&lt;p&gt;（译者注：我觉得这个概括非常的好，说出了两种工作的一个非常本质的区别）&lt;/p&gt;&lt;h3&gt;知行合一（Hybrid Thinker-Doer）&lt;/h3&gt;&lt;p&gt;数据工程师们最害怕的事，就是尽管你的JD写得非常炫酷，但是你心中真正想要招的，还是ETL工程师。&lt;/p&gt;&lt;p&gt;如果你还没有意识到，那我可以告诉你：&lt;strong&gt;没有人喜欢简单地编写和维护数据管道或者ETL&lt;/strong&gt;。这是这个行业里最烫手的山芋。因此，这个职位成为孕育平庸的温床也就不足为奇了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;工程师不应该写ETL&lt;/strong&gt;。这不应该是一个专门的职位，没有什么比编写、修改、维护、支持一堆自己从来不用的ETL更让人沮丧的了。&lt;/p&gt;&lt;p&gt;相反，应该将工作整体的端到端的所有权交给员工。对于数据科学家来说，这意味着对ETL的所有权，对分析和最终产出的所有权。数据科学家们工作的最好产出应该是面向机器的，而不是面向人的。最好的产出物不是PPT或者报告，而是一个算法的API，可以通过调用这些API来改变业务。自治权同时也意味着对代码的所有权。&lt;em&gt;从开始开发一直到生产上线&lt;/em&gt;。他们应该可以独立部署应用，并对其性能、效果和其他支持负责。&lt;/p&gt;&lt;p&gt;但是数据科学家们一般来说在软件开发方面并不是非常专业，最多算是合格。所以他们可能会在工程方面制造很多混乱。这也是为什么数据的ETL和算法的落地开发通常都会交给专业工程师来做。这些任务本质上都是垂直（纵向）聚焦的，&lt;strong&gt;但有天赋的工程师们最擅长的往往是应用的横向扩展[7]&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;那么在这种场景下，工程师的职责应该是什么呢？综合来说，他们需要部署平台、服务、框架，使得数据科学家们可以自主的快速开发、部署他们的想法。可以将这些工作类比为乐高积木：工程师们设计乐高积木块，数据科学家们通过组装这些积木块来实现新的想法。这样做的好处非常明显：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;工程师们的工作变成了完全横向的。这让他们可以专注于设计开发能够横跨多种算法应用的技术。这样做可以将工程技术的输出最大化。&lt;/li&gt;&lt;li&gt;工程师们可以专注于他们最擅长的：抽象、泛化，然后构建有效的，可扩展的技术方案。&lt;/li&gt;&lt;li&gt;工程师们可以自主工作。这样运作的工程团队工作起来就像变魔术，数据科学家们所期待的所需要的东西全部是可以提前预料到的，扩展性和健壮性全部交给了平台、服务和框架，而这些正是工程师们的工作。&lt;/li&gt;&lt;li&gt;为了让这套机制能够正常运转，大多数时候工程师们需要能预料到数据科学家们的需求，他们需要提前提前若干步进行开发。&lt;/li&gt;&lt;li&gt;对于有天赋的工程师和数据科学家来说，这显然有趣多了。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;所以，所有的工作都被数据科学家们干了吗？&lt;/h2&gt;&lt;p&gt;完全不是。相反，工程师们在这个系统中承担的职责要比传统方式中更加具有挑战性，也更加被需要，对于数据科学家来说也是一样。我们这套机制并不是在优化效率，而是在强调自治性。这套机制的产物是明确的自治权和对结果负责的明确责任。&lt;/p&gt;&lt;p&gt;这对富有创业精神的人来说是非常有吸引力的。它打开了快速开发和颠覆式创新（disruptive innovation）的大门。但它的代价是一定程度的专业度，也就是一定的效率。&lt;/p&gt;&lt;p&gt;我们并不期待数据科学家们忽然变成有天赋的工程师，我们同样也不希望工程师们完全不了解业务逻辑，丢掉垂直深入的主动性。事实上，团队合作（partnership）才是这个模型可以工作的核心。工程师们应该将自己看作“钢铁侠的裁缝”，他们的使命是建造出强大的钢铁战衣，防止数据科学家们落入方案不可扩展或者方案不可靠的陷阱。&lt;/p&gt;&lt;h2&gt;一条极富挑战性的路&lt;/h2&gt;&lt;p&gt;看到这里，你或许在怀疑这样的机制能否真正建立起来。但是这样做带来的收益完全值得去冒险。下面是一些可能会阻碍这个甚至会逆转这个过程的问题：&lt;/p&gt;&lt;p&gt;&lt;em&gt;人们不愿意改变。&lt;/em&gt;人们总是倾向于重建他们习惯的环境，这会导致他们倾向于返回到传统的思考者-执行者模型。新雇佣的人更容易习惯新的组织架构。当发生问题时应该尤其警觉，例如当API出了问题或者算法效果不好。&lt;/p&gt;&lt;p&gt;人们会坚持认为工程师应该为此负责，但是他们往往说的只是症状，而不是问题本身。工程师们应该做的是为平台提供更好的支持、可视化、抽象以及健壮性。同时应该认识到，工程师本来就有可能破坏东西，没人可以保证不犯错误，不破坏任何东西。&lt;/p&gt;&lt;p&gt;&lt;em&gt;平台工程师们一定要走在数据科学家们前面。&lt;/em&gt;团队里需要非常敏锐的工程师，能够提前预料到数据科学家们需要哪些服务、框架和功能。数据科学家不再把想法交给工程师来实现的一个后果就是，工程师们不再能够针对数据科学家的需求来做出反应，因此就需要能够提前预判。&lt;/p&gt;&lt;p&gt;记住，工程师们是在建造乐高积木，而数据科学家们是在组装积木。如果数据科学家们没有合适的积木可用，他们就会找出其他的解决方案。他们要么会使用错误的积木（在圆形的洞里填一个方形的积木），要么会自己造一个。通常来讲，由于这种自己造轮子的过程缺乏系统性和全局性考虑，所以会造成一团混乱。而这种混乱一旦被创造出来就很难收拾，正所谓覆水难收。&lt;/p&gt;&lt;h2&gt;不要惧怕效率问题&lt;/h2&gt;&lt;p&gt;鼓励数据科学家肩负如此广阔任务栈的后果之一，就是他们可能无法生产出和专业工程师一样专业高效的代码和方案。我们是在用效率来交换速度和自治性。对这个复杂权衡的认识是非常重要的。&lt;/p&gt;&lt;p&gt;但与此同时，这种端到端的自治性也有一些不那么明显的高效之处。在他们所实现的领域，数据科学家们是专家，所以他们能够做出一些需求和技术代价之间的权衡。例如，他们可以决定在某些合适的地方使用抽样数据，或者近似方法，他们可以决定砍掉一些实现和维护代价很高，但是收益有限的功能。这些在传统的思考者-执行者模型中是基本不会发生的，即使发生了，也是以反复沟通谈判为代价的。&lt;/p&gt;&lt;p&gt;综合来说，我们希望这种自治性带来的效率和创新会大于数据科学家“全栈开发”带来的一些低效。&lt;/p&gt;&lt;h2&gt;未来&lt;/h2&gt;&lt;p&gt;我不会声称我们发现了组织数据科学部门的最好方式，或者说这就是最适合你所在的组织的方式。但是这一定不是一种试图建造“更快的马”的尝试，而且我觉得这是更加适合我们的一种方式。&lt;/p&gt;&lt;p&gt;我真诚地希望，通过分享我们的尝试，能够鼓励其他非传统数据科学部门做出同样的尝试；能够激发正在组建新部门的负责人的灵感，让他们能够脑洞大开，挑战传统；能够告诉被传统组织架构所“伤害”的工程师和数据科学家们，还有其他可以工作的模式和环境存在。&lt;/p&gt;&lt;h2&gt;广告时间&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;转转推荐搜索团队诚招靠谱算法工程师：转转是58集团旗下的专业二手交易平台，现在正在高速发展中，拥有干净的海量数据，独一无二的挑战性问题，更拥有广阔的发展空间和一群靠谱的小伙伴，无论你是希望快速成长还是希望建功立业，这里都是你最好的选择。有意者请发简历到zhangxiangyu01@58ganji.com。&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;本文中的“数据科学家”可对应到国内更常用的“算法工程师”或“算法研究院”的角色。 &lt;a href="#fnref1" data-editable="true" data-title="↩"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;本文中的“工程师”、“数据工程师”或“数据平台工程师”可对应到国内更常用的“偏工程”或“偏架构”的工程师角色。 &lt;a href="#fnref2" data-editable="true" data-title="↩"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;问一下你的（数据平台工程师）面试官，他知不知道数据科学家坐在哪里（或者反之）。如果他们不知道，你就赶紧跑吧……  &lt;a href="#fnref3" data-editable="true" data-title="↩"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;因为这些人的主要工作是保证数据通道的畅通，就像管道工人一样。 &lt;a href="#fnref4" data-editable="true" data-title="↩"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;福特汽车的创始人福特曾经说过一句话：“如果（发明汽车时）去问人们想要的是什么的话，他们会说想要的是更快的马”。比喻默守陈规，在既有框架下做改进。 &lt;a href="#fnref5" data-editable="true" data-title="↩"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;这里的通知（inform）指的是在传统的行业中，BI很多时候只是将自己分析的结果告诉、通知业务部门，但是是否采纳并还是由业务部门决定，这也反映出了传统BI部门略显尴尬的地位。 &lt;a href="#fnref6" data-editable="true" data-title="↩"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;“横向”指的是开发具有可扩展性，高可复用性的应用或者组件。 &lt;a href="#fnref7" data-editable="true" data-title="↩"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;img rel="noreferrer" src="https://ga-beacon.appspot.com/UA-41015557-4/page-name?dt=https://zhuanlan.zhihu.com/p/22829126&amp;pixel&amp;useReferer"/&gt;</description><author>张相於</author><pubDate>Sat, 15 Oct 2016 08:21:12 GMT</pubDate></item><item><title>搜索、推荐和广告架构能统一吗？</title><link>https://zhuanlan.zhihu.com/p/22560037</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/v2-167a16ee605ea41a9b27d1ad454cc149_r.jpeg"&gt;&lt;/p&gt;&lt;p&gt;搜索，推荐，广告是互联网时代最主要的三种获取信息方式。如果你了解三个系统的具体实现，甚至自己还分别亲手做过，那么你应该有一种模模糊糊的印象：似乎有些底层的技术和数据是可以共享的啊，但是为什么我们公司是分属三个不同的团队在搞呢？有时候似乎还要打个架什么的。&lt;/p&gt;&lt;p&gt;如果你有这个模模糊糊的印象，那么我告诉你：你不是一个人！Hector Molina在Recsys'14上就提出了将搜索、推荐、广告三合一的观点[1]。同时，在国内的微博上，也因此掀起了一些讨论[2]。微博上的讨论先按下不表，我们先来看看为什么三合一是一种可能的趋势？如果要合，又有哪些困难呢？&lt;/p&gt;&lt;h2&gt;不同与相似&lt;/h2&gt;&lt;p&gt;搜索，推荐和广告本质上都在解决信息过载的问题，各自解决的手段、目标不相同，各自诞生在产品生命周期不同阶段，以至于系统实现不尽相同。&lt;/p&gt;&lt;p&gt;从几个维度对比一下，看看他们不同和相同在哪。&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/v2-e4c989986a1e2ed449fc053f70e3da89.png" data-rawwidth="886" data-rawheight="470"&gt;&lt;p&gt;搜索要解决的是精确快速找到想要的结果。最重要的目标是降低延迟和提高相关性。搜索更关注内容消费者，用双手让他们爽。搜索引擎不会像社交网站或资讯网站那样变成time killer，人们依赖搜索而不沉迷搜索就与搜索引擎的目标有关。在搜索解决用户的信息获取需求时，很少给予用户一些惊喜，这也不是搜索的目的，也不会随随便便地利用集体智慧去扩充一些不那么直接相关的结果。&lt;/p&gt;&lt;p&gt;推荐系统则不同，首先很少有靠推荐系统撑起一款产品，大都是起一个“锦上添花”的作用，好的推荐系统都会变成一个time  killer，让用户走进去就不想出来那是坠吼的。推荐系统通常不必须要明确表达需求的“query”，因此在给出的结果中就有很多发挥的余地，可以给用户制造一些惊喜，这一点和搜索很不一样。&lt;/p&gt;&lt;p&gt;根据策略不同，推荐系统有不同的实现方式。比如基于内容的推荐，很接近一个搜索引擎，实际上很多推荐引擎底层的技术实现，尤其是数据存储上大量借鉴了搜索相关技术，比如按照兴趣标签对推荐候选池做倒排索引。另外，搜索是针对个人用户的，一个用户发起一个请求，而推荐系统既可能真对单个用户进行推荐，也可能针对用户群进行推荐。&lt;/p&gt;&lt;p&gt;广告则是一个很特殊的存在，它在产品形式上很像推荐，总是“不请自来”，而在技术实现上又兼有推荐和搜索两者特点，而且它又是一个商业驱动的系统，所以更多关注商业利益最大化。&lt;/p&gt;&lt;p&gt;有一个很有意思的现象，搜索和推荐的信息对象理论上可以共用的，也就是说可以允许用户设置条件检索一堆候选对象，也可以把这些候选对象主动推荐给可能感兴趣的用户面前。但是广告的信息对象却是另一个隔离的存在，为什么不能让用户直接设置条件检索我们的广告库存呢，就像是一个通常的搜索引擎一样？也许是可能的。&lt;/p&gt;&lt;h2&gt;抽象看三者&lt;/h2&gt;&lt;p&gt;这三个系统有这些特点，对于大多数成熟公司，他们已经被把持在三个不同的团队部门手中，各自团队每天在同时填着大同小异的技术坑。&lt;/p&gt;&lt;p&gt;我们抽象一下三者的需求共性：本质上都是在匹配，匹配用户的兴趣和需求（看成context），但匹配的目标，条件和策略不尽相同。&lt;/p&gt;&lt;p&gt;进一步抽象下去，又可以分为三步：过滤候选（filter）+排序候选（ranking）+个性化输出（personalization）。&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/v2-cdf03b6e948aa9779ca9df4704e9001f.png" data-rawwidth="953" data-rawheight="625"&gt;&lt;p&gt;过滤候选这一步在搜索里面天经地义，query解析得到查询意图，或者更多结构化的搜索条件，用结构化的查询条件去倒排索引中获取搜索候选。&lt;/p&gt;&lt;p&gt;与之相似的是广告系统，搜索广告也是拿着query去获取候选广告，而联盟广告则是拿着用户标签去需求方获取广告候选。&lt;/p&gt;&lt;p&gt;filter在基于内容的推荐策略中也有类似的过程，而其它推荐策略，比如协同过滤或者隐因子模型，一般是提前计算好的，并没有明显的类似搜索一样的filter，不过我们仍然可以抽象地把各种不同召回策略视为filter这一步，只不过filter并不是同步进行的，而是异步进行的。&lt;/p&gt;&lt;p&gt;ranking这一步主要区别在于排序的目标和约束。搜索的排序目标是高相关性，无论BM25为代表的传统排序模型还是以Learn to rank为代表的机器学习排序，皆如此，用户每次在搜索上花费的时间是不是更少（而不是更多）来衡量搜索的效果。&lt;/p&gt;&lt;p&gt;推荐系统的ranking比较复杂，相关性只是很小的部分，根据推荐系统的产品形式不同，ranking时排序不同。通常推荐系统用CTR预估来融合各种召回策略得到的候选集，如果做得深入，还需要考虑Exploit－Explore问题。附加的约束则千变万化：电商中，当天买过的当天就不能再推了，新闻推荐里，重复的新闻不能再推了，某些场景需要推荐搭配，某些场景需要推荐相似，topN 推荐还需要考虑多样性，序列推荐要考虑前序和后续，etc。&lt;/p&gt;&lt;p&gt;广告系统的排序更多是从经济学角度去看，通常CPC广告的排序方式是结合预估CTR、出价、广告质量三者一起考虑。同时还要考虑很多别的因素，尤其是商业因素，平台方的要求，广告主的要求等等，是一个纯动态博弈，正如微软亚洲研究院的刘铁岩所介绍那样[4]。&lt;/p&gt;&lt;p&gt;personalization最被推荐系统看重，而且在某些场合，个性化一度成为推荐系统的代名词，然而个性化只是推荐系统的衡量指标之一而已，个性化的前提也一定是信息够丰富够垂直才行；搜索的personalization相对来说就粗浅一些，常见的是利用地域等人口统计学来做personalization，而且对于歧义较少的query，搜索如果太个性化既没意义又有风险。&lt;/p&gt;&lt;h2&gt;三者的协同&lt;/h2&gt;&lt;p&gt;虽然事实上三个系统目前是军阀割据，但其业务和技术上已经有很多重叠，也能够产生很多协同作用。&lt;/p&gt;&lt;p&gt;有一部分搜索需求是无法用搜索相关性满足的，比如“一个人的夜晚听什么歌”这样的query，需要推荐系统去满足，交互形式可能是眼下大热的bot，也可能是传统的流推荐等等。如果能够识别出这样的搜索请求，其实更应该交给推荐系统来响应。&lt;/p&gt;&lt;p&gt;推荐系统总体上滞后于用户的即时需求，所以强大如Amazon这样的推荐系统，也是有搜索引擎来与之配合的。一方面，搜索因为能够满足用户的主动寻找需求，所以能够化解一些推荐不力不及时的尴尬；另一方面，搜索可以积累用户兴趣数据；当二者结合起来考虑时，可以避免“搜什么推什么”的窘境，整个系统能够综合考虑哪些是即时快速需求，哪些是长期兴趣。&lt;/p&gt;&lt;p&gt;广告系统，在技术上和搜索跟推荐并无本质差异，差异在意图不同，功能不同。对用户的信息需求满足，搜索和推荐离真正得到满足之间总是有一定的鸿沟，要么是信息不足，要么是信息过载，这些鸿沟可以利用经济手段进行调配，也就是广告系统。&lt;/p&gt;&lt;h2&gt;业界观点&lt;/h2&gt;&lt;p&gt;以上分析只是基于纯粹技术和业务角度的简单分析，结束军阀割据，一统天下似乎是人民的殷殷期盼，然而，这个“人民”似乎只有你我这种站在“上帝视角”的人们。前面提到，之前在微博上，一众从业者集体讨论过这个问题[2][3]，讨论总结为：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;几乎所有人都觉得这个提法是意料之中，也承认三者有统一的概念基础，对此亦有共识；&lt;/li&gt;&lt;li&gt;仅有少数公司（豆瓣）有成功的统一案例，并没有人提出业界还有类似案例；&lt;/li&gt;&lt;li&gt;少数前辈（@清风运文，@张栋_机器学习） 三个系统都经历过，认为实际上困难重重，困难不在框架上，在细节上，各自优化需求差别很大；&lt;/li&gt;&lt;li&gt;还有一些人调侃说来自人的困难大于技术上的困难，这个自己体会不一样，没法写论文。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总之，从这篇微博看到的讨论来说，几乎都持悲观态度。&lt;/p&gt;&lt;h2&gt;我的看法&lt;/h2&gt;&lt;p&gt;基于以上的讨论观点及事实，虽然业界很悲观，但并不是毫无希望，总结几点：&lt;/p&gt;&lt;p&gt;1. 三者有统一的可能性，而且不低；&lt;/p&gt;&lt;p&gt;2. 在已经被割据的公司里，再重新一统天下非常困难，投入产出比会很低；&lt;/p&gt;&lt;p&gt;如果要统一，从0就开始，所以更适合创业公司或中小公司，可能这也是为什么豆瓣有成功案例的原因；&lt;/p&gt;&lt;p&gt;3. 由于人的因素很重，所以从一开始就应该把三者划归一个团队来统一规划，人员配置上：技术上统一，业务上分开。&lt;/p&gt;&lt;p&gt;4. 必须用数据证明统一之后比统一之前好，而不是工程师自己“感觉不错”，这个“好”可以体现在实际上的业务指标提升，也可以体现在开发效率提升。&lt;/p&gt;&lt;h2&gt;参考文献&lt;/h2&gt;&lt;p&gt;[1] Information Seeking: Convergence of Search, Recommendations and Advertising &lt;/p&gt;&lt;p&gt;[2] &lt;a href="http://ml.memect.com/remix/3783095167238447.html" data-editable="true" data-title="memect.com 的页面"&gt;http://ml.memect.com/remix/3783095167238447.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[3] &lt;a href="http://weibo.com/1818327890/ByRGsun39?type=repost" data-editable="true" data-title="看了Hector Molina在Recsys'14上提的Search... 来自Arber"&gt;看了Hector Molina在Recsys'14上提的Search... 来自Arber&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[4] &lt;a href="http://www.msra.cn/zh-cn/jobs/storiesatmsra/tie-yan-liu-20160120.aspx" data-editable="true" data-title="刘铁岩：在微软大学的三次华丽转型" class=""&gt;刘铁岩：在微软大学的三次华丽转型&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;本文作者：&lt;/p&gt;&lt;p&gt;陈开江@刑无刀，资深推荐系统从业者，更多交流可加他个人微信【kaijiang_chen】。添加时请注明：来自ResysChina。&lt;/p&gt;关注 ResysChina 微信公众号，查看更多推荐系统相关内容。&lt;/blockquote&gt;&lt;img rel="noreferrer" src="https://ga-beacon.appspot.com/UA-41015557-4/page-name?dt=https://zhuanlan.zhihu.com/p/22560037&amp;pixel&amp;useReferer"/&gt;</description><author>刑无刀</author><pubDate>Thu, 22 Sep 2016 00:29:46 GMT</pubDate></item><item><title>当我们谈论 Bot 的时候，我们在谈论什么</title><link>https://zhuanlan.zhihu.com/p/21973054</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/6d9b94ba18d9c08df54fcf6a14127ed9_r.jpg"&gt;&lt;/p&gt;进入2016年，Chatbot 无疑已经成为互联网业界和投资领域的热点之一。在短短几个月的时间之内，行业巨头微软、Facebook、亚马逊、Google 和苹果纷纷发布了各自在 Chatbot 领域的战略和相关产品。3月，微软在 BUILD 大会上发布聊天机器人框架 Bot Farmework；4月，Facebook 在 F8大会上展示了 Messenger 平台，Telegram 宣布为机器人开发者设立奖金；5月，Google 在 I/O 大会上正式推出 Google Assistant，同时发布了 Allo Messenger 以及语音家用音箱；Amazon 把智能音箱 Echo 背后的大脑 Alexa 开放出来，让用户可以通过浏览器使用；6月，苹果在 WWDC 大会上开放 iMessage 给第三方集成，并且发布了 Siri SDK；IBM的第一个法律机器人已经被华尔街雇佣；最近，Yahoo 也不甘寂寞在聊天工具中发布了第一款 Chatbot —Kik Messenger。至于 Chatbot 领域的创业公司，更是如雨后春笋般层出不穷。VentureRadar总结了截止到6月份Chatbot 领域最受瞩目的25家创业公司，所处的行业也是五花八门：包括个人助理，客户服务，招聘助手，品牌沟通，虚拟买手，保险代理，以及机器人平台等等，大都拿到了天使或 A/B 轮融资，一派欣欣向荣的景象。 &lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/ff29605194236527f6bfd3572e9fed10.png" data-rawwidth="2560" data-rawheight="1440"&gt;25 Chatbot Startups You Should Know, Andrew Thomson, June 14, 2016, Venture Radar&lt;b&gt;Chatbot 历史&lt;/b&gt;追根溯源，Chatbot 并不是个新鲜的概念。上点儿年纪的 IT 从业者很多都知道 ELIZA，这是上世纪60年代一位 MIT 的教授Joseph Weizenbaum开发的人工智能机器人，可以和人进行简单对话，但更多的时候可能你看到最多的回复是”What are you saying about…” （可以在 GNU Emacs 中运行 M-x doctor 唤出 ELIZA 的一个版本分支DOCTOR）。上个世纪90年代微软为 Office软件配备的虚拟助手 Clippy（回形针），可能是最早大规模推向市场并接触到主流人群的Chatbot原型，它可以在用户使用 office 软件的过程中提供对话形式的帮助，不过很多用户对它的评价是” intrusive and annoying”（冒冒失失令人讨厌），也正是因为反对的声音太多，2003年它就正式下线了。进入二十一世纪，一款名为 A.L.I.C.E (Artificial Linguistic Internet Computer Entity) 的聊天机器人吸引了行业目光，它嵌入了AIML（Artificial Intelligence Markup Language）并结合一系列启发式规则重写了后台的处理引擎，大大改善了对话质量。由于和同类应用相比显著的优势，AliceBot 三次获得了Leobner Prize——机器人领域最重要的奖项之一。遗憾的是，无论是 ELIZA 还是 ALICE，离通过图灵测试都还差得远。任何人跟他们聊上几句就会发现其中的破绽，或者答非所问，或者掉进明显的模式循环之中，感觉都是套路… …由于对话质量不尽如人意，以及应用场景的缺失，Chatbot 在过去的十年间并未吸引太多的注意，仅仅是作为一项有趣的、半科幻的不太成熟的玩具存在着。从2016年3月份开始，如本文开始所提到的，巨头们的介入使得 Chatbot 以一种意想不到的方式迅速成为各个科技媒体和开发者社区讨论的焦点。进入6月份，不光是科技和风投界的媒体，Forbes, Fortune, Financial Times 这些老牌的商业媒体也把目光投了过来，纷纷讨论 Chatbot 的广泛应用到底能够给目前的商业环境带来什么样的影响。难道真的是一夜之间 Chatbot 相关的技术发生了天翻地覆的变化，你手机里的 siri 从一个呆萌的应声虫摇身一变，成为了无所不知无所不能的百事通？先不忙下结论，我们看看过去几年，互联网的商业和技术环境中都发生了什么。 &lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/de7f568a25a7f18d7e3c814d69df38e9.png" data-rawwidth="826" data-rawheight="293"&gt;“chatbot” 在 Google Trends 上的热度随时间变化趋势&lt;b&gt;网络生态与技术变革&lt;/b&gt;过去5年间，消息服务无疑是增长最快的网络应用。内有微信，外有 What’sApp, Facebook Messenger, 月活超过6亿，在过去几年中成功占领了绝大部分用户的碎片时间，成为新的、事实上的移动互联网时代的“浏览器“入口。并且，和 web 时代相比，由于移动应用的封闭性，缺少网页之间彼此互通有无的超链接作为联系纽带，移动互联网环境下的信息孤岛效应更加明显。据统计，当前平均每个用户手机上应用的数量大约是55个，平均每月使用的应用数量大约是23个，每天使用的数量大约是12个。不过，其中大约有一半左右的使用时间给了排第一位的应用，80%的时间给了排前三位的应用。这种比”二八原则“还要夸张的注意力分配还造成了一个尴尬的事实，下载移动应用所带来的流量红利正在慢慢消失，在北美市场，2015年5月到2016年5月全年的移动应用下载量比前一年下降了20%（全球的数字为增加2%，主要由新兴市场贡献），并且，大约有65%的用户在过去一个月中没有下载任何应用。在这样的大趋势下，大家意外的发现，Chatbot 似乎可以解决 App 生态环境面临的一系列困境。Chatbot 开发成本低，而且是真正的跨平台，不必考虑 Android/iOS资源的投入。其次，在移动时代成长起来的用户天然接受即时消息通讯的方式，进入门槛低、粘性高，依附于大的平台，似乎是可以绕开 APP 越来越低的下载率和活跃度的问题。消息服务作为 Chatbot天然的载体，俨然已经成为移动生态环境的基础设施；那么，Chatbot 作为消息服务之上最自然的应用，会不会取代 App，构建出自己的生态环境？ &lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/88449ca08d5f27dfa51c880c8168f2e8.png" data-rawwidth="592" data-rawheight="302"&gt;Source: Business Insider, Fortune, Mashable, AppAnnie, AdWeek, Quartz, Yahoo Finance, Experian, TechCrunch, Forbes, Tehc in Asia, eMarketer, Compete, Activate analysis在技术层面，人工智能以一种出人意料的方式重回大众视野。2016年3月，Google Deep Mind AlphaGo 在五番棋中以压倒性的优势击败世界冠军李世石，人工智能在围棋领域战胜人类顶尖棋手，这在5年前还是遥不可及的梦想，如今却成为现实。事实上，自上世纪五十年代现代意义的人工智能诞生以来，已经至少经历过两次大起大落，也分化出大大小小各种流派，在最近一次低潮期，从业者们甚至更愿意用“数据挖掘”、“知识推理”、“机器学习”或“统计学习”这样的字眼来指代自己的工作，小心的避免使用“人工智能”这样过于耀眼承载了太多希望的词语。2006年至今深度学习技术的飞速进展，无疑是当前这次人工智能崛起的最重要基石。多层神经网络在计算机视觉和语音识别领域已经取得突破性进展，在效果上比之前的方法有了质的飞跃。比如在图像识别领域的 ImageNet 竞赛中，2012年Hinton 研究小组利用 GPU 跑的深度卷积神经网络算法远远超过了原有的各种机器学习方法，识别率甚至超过了人类。包括原本认为很难突破的围棋，机器在原本人类擅长的领域表现得更加优异，所带来的心理冲击无疑是全方位的。验证了深度学习的威力之后，人们自然而然的希望扩展到各个领域，特别是一直自成体系，也公认难度很高的自然语言处理。自从现代计算机概念诞生的第一天开始就对人类的语言处理问题有着强烈的兴趣，著名的图灵测试，也是围绕着测试者能够在多大程度上区分机器还是人类产生的语言来设计的。而 Chatbot 所做的事情，恰好综合了自然语言处理技术的各个方面。借人工智能崛起的这一波东风，一举突破当前在 Chatbot 领域面临的各种瓶颈，甚至通过图灵测试，也似乎不再是遥不可及的事情。此外，自然语言作为人机交互界面，这无疑是比从鼠标键盘到触摸屏还要令人激动的巨大变革，彻底把各种智能设备的使用门槛降低为零。并且，如果能够在理解文本语义的基础上自动进行下一步动作，很多繁琐、重复的文字类的人工劳动将被自动化的机器取代，释放出的市场潜力无疑是非常巨大的 — —这会不会是”The next big thing”？看起来市场环境和技术各自沿着自己的轨道向前发展，在这个时间点双方交汇到了一个点上。也正是因为这样的原因，在 Chatbot 领域巨头们争相投入，从前沿的算法研究到底层的基础设施平台搭建，从面向普通用户的最终应用到面向开发者的一线列工具，迅速成型并投入使用，唯恐在未来的竞争中落了后手。无论前景如何，从客观上来看，至少目前我们能够便捷的使用一系列平台和工具，使用这些工具，搭建一个 Chatbot 要比开发一个移动应用、或者是建个网站快得多。&lt;b&gt;Chatbot 相关技术&lt;/b&gt;从应用的场景来看，Chatbot 可以分为开放域（Open-Domain）问题和封闭域（Closed-Domain）问题两大类。开放域问题和图灵测试更接近，也更困难。没有任何限定的主题或明确的目标，用户和Chatbot 之间可以进行任何话题的自由对话。可想而知，由于话题内容和形式的不确定性，开放域 Chatbot要准备的知识库和模型要复杂很多。并且，从实际的应用场景来看，开放域 Chatbot 更多应用在聊天、虚拟形象等泛娱乐领域，虽然用户基数比较大，也容易传播，但由于目的性不强、内容深度不够、对话质量不高等等一系列问题，用户粘性有限、商业价值较低，至少在目前的市场环境和技术水平之下，看不到明确的应用前景和清晰的商业模式。和开放域问题不同，封闭域问题通常有若干明确的目标和限定的知识范围，也就是说，Chatbot 所面临的输入和输出通常是有限的。虽然这个限定范围会随着问题领域以及对推理深度要求的不同变化很大，但无论如何，与开放域问题相比，问题空间大大缩小，目标也更加清晰明确。特别是从应用场景上来看，用户不会期待和一个客服机器人谈论历史知识，也不会向一个电商导购机器人提各种与购物无关的刁钻古怪的问题。并且，更加垂直和场景化的应用使得封闭域的 Chatbot从诞生的第一天开始就肩负了商业使命，无论是节省人力成本还是提升人工效率，问题的定义和评判标准都是比较清晰和明确的。不过，也正是因为如此，封闭域问题 Chatbot 对对话错误的容忍度更低、对质量要求更高，这就要求Chatbot 能够整合更多的领域知识、用户的基本信息，以及对上下文语境的分析和判断。并且，针对一个领域建立的模型和知识图谱，往往是很难方便的迁移到另外的领域。在这些因素的共同作用下，建立一个封闭域的 Chatbot 就不再单单是一个技术问题，而是融合了商业、产品、运营、数据知识积累和模型调优等等方方面面的权衡和综合考量。从表现形式看，Chatbot可以分为单轮对话和多轮对话两种类型。单轮对话其实可以看做是问答系统（Question Answering System）的变形， 一般是一问一答的形式，用户提问，机器生成相应答案的文本或者是综合与答案相关的各种信息返回给用户。多轮对话则更接近我们通常理解的人与人之间的对话模式，通常是有问有答，除了用户提问，机器也会主动向用户询问，并且会根据上下文来判断该给出什么样的答案或提出什么样的问题。从应用的角度来看，单轮对话更适合使用在信息查询、客户服务、产品介绍等等目标明确、会话行程短的浅服务类项目，用户对通过使用这类产品获得的服务有明确的预期，更多的是把它看做快速获取信息、提升效率的入口。而多轮对话服务，往往会应用在信息搜集、商品和服务导购推荐、专业方案咨询等等一系列结构复杂、会话行程长的深度服务项目里，用户通过使用这类产品会在某一领域获得相对完整的服务，解决一个复杂问题，或者获得某种方向性的引导。一般来说，企业使用多轮对话服务的目标不仅仅是提升效率降低成本，还往往可以改进产品质量带来更多的收入。从技术的角度看，实现一个 Chatbot 也可以大致分为基于检索的模型和生成模型两种方案。基于检索的模型在算法流程和结构上相对更容易理解，在很大程度上和搜索引擎的技术实现类似。一方面事先定义好了问题库和答案知识库或回答的模板，另一方面通过 NLP 技术对用户提出的问题进行分析，通过关键词提取、倒排索引、文档排序等等方法与定义好的知识库进行匹配，并返回给用户。事实上，的确有一些 Chatbot 项目就是用开源搜索引擎来实现的。 在规则匹配和文档排序上可以加入各种复杂的启发式规则或者机器学习算法，从而提高匹配精度。并且，在知识库上还可以嵌入知识发现和推理机制，提升对话质量。于此相反，生成模型通常不依赖于特定的答案库，而是依据从大量语料中习得的“语言能力”来进行对话，看起来这个过程更加接近人类思考和产生语言的过程。而这个“语言能力”，往往涉及到基本语言元素的知识表示、以某种结构（比如深度神经网络）来模拟的语言模型，以及对生成的语言对象的评价和选择标准。两种模型有各自的优劣，对于领域范围清晰、指向明确的问题，基于检索的模型的对话质量更高。并且，基于检索的模型不会犯各种语法错误，但它的回答很难跳出预定的答案库，需要花费很大的精力来维护更新知识库和匹配规则。生成模型直接从语料来训练知识表示和语言模型，可以有效降低维护问答库和规则的精力；同时，生成模型可以应对各种不在预设的问题库的问题，表现形式更加灵活。但是，好的生成模型往往需要巨大规模的训练语料，并且，对话中的上下文关系、信息和人格的一致性、以及关键意图识别等等一系列问题都是生成模型需要克服的难关。早期 Chatbot 领域的架构几乎都是基于检索模型的，但深度学习技术取得突破性进展之后，越来越多的研究者和业界的工程师把目光转向了生成模型，因为深度学习的 Sequence-to-Sequence方式可以非常好的实现生成模型的框架。深度学习有一个非常诱人的优势，就是拥有可以避免人为特征工程的端到端（End-to-End）框架。通俗地讲，就是有机会利用深度学习强大的计算和抽象能力，自动从海量的数据源中归纳、抽取对解决问题有价值的知识和特征，使这一过程对于问题的解决者来说透明化，从而规避人为特征工程所带来的不确定性和繁重的工作量。例如 AlphaGo 在提升围棋水平的过程中，并没有像传统围棋程序那样硬编码大量的布局定式、死活类型和官子技巧，而是直接通过学习高质量棋谱（以及通过增强学习自身产生的棋谱）提升水平。具体到 Chatbot 领域，这让我们能够设想只要有足够多的对话语料，就可以利用端到端框架直接进行训练，而不必考虑复杂的语法规则、微妙的对话情景等等一系列人为特征工程需要关注的焦点。这无疑代表了大家都希望追寻的美好前景。 &lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/e3718cf9fd4a78603204cbfe01df7b51.png" data-rawwidth="1323" data-rawheight="780"&gt;来源： 爱因互动，EinBot Conversation Generating Framework&lt;b&gt;问题与展望&lt;/b&gt;不过，在巨头重金压注、风投界推波助澜和科技媒体摇旗呐喊的背景之下，也有一些冷静的观察者指出了一个基本事实，那就是目前 Chatbot 能够做的事情还相当有限，整体的用户体验依旧和合格的 APP 相去甚远。TechCrunch在最近的一篇文章中指出：“关于 Chatbot，看见的 demo 都很好，但这些 demo 都忽视（或者是故意不提）关键的一点——很多 APP 尤其是好用的 APP，通常并不需要涉及那么多输入，往往滑一滑、点一点就可以了... … 现阶段，很多 Chatbot 还不支持语音，因此你得手动输入文字，这样做还不如直接用 APP 省事。此外，很多时候 chatbot 搞不懂你的意思，意味着你得多次重新输入，改换表述让 chatbot 理解你的意思”这段描述点明了 Chatbot 目前在具体的应用环境中面临的两大困境：一方面在许多场景下APP的操作更加简单，Chatbot并未体现出以自然语言作为交互界面的优势。另一方面，对于机器理解人们日常使用的自然语言这件事情，事实上我们与几年前相比并未取得明显的进步，也就是说，目前的聊天机器人，还没那么“智能”，远远达不到人们对流畅对话的期待。比如下面这个 Facebook Messenger 上面颇为流行的查询天气的机器人 Poncho 和用户之间的对话： &lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/1b2b4ec80c8a5f06dccbdf316f340fa9.png" data-rawwidth="1200" data-rawheight="1068"&gt;从中可以看出，对于语法结构完整、指向明确的问题，Poncho 能够给出相应的回答；但稍微发挥一点，省略语法结构，它就难以领略用户的真正意图，迷失在语境之中了。明显可以看出，Poncho对上下文的理解是割裂的，仅仅是理解简单的天气查询也这样困难，更不用说很多需要复杂的语义和逻辑执行的问题了，这也是Chatbot 普遍面临的难题。在Chatbot 所面临的两个困境之中，第二个问题，也就是对话的质量，是最关键的，因为本质上来讲，第一个问题的解决在很大程度上依赖于我们对第二个问题的解决有多成功。试想，对于指令性的和获取信息类的操作，有什么是比自然语言作为交互界面更合适的呢？一个能够完整、准确的理解自然语言的 Chatbot 无疑能让我们放弃在界面和交互设计上所花费的额外的心思，更加贴近问题和产品的本质，贴近需求本身和用户价值。因此，无论业界和媒体在这件事情上怎样的风生水起，无论巨头和创业公司面对用户许下怎样的美好未来，能否兑现承诺，取决于我们在机器理解人类自然语言这件事情上能否取得真正的突破，哪怕是在特定的领域、特定的场景下，能否诞生不低于人和人之间平均对话质量的应用。客观来看，强 AI、顺利通过图灵测试的机器，这些科幻小说中的场景看起来依旧不会是短期内能够发生的事情，Chatbot 领域工业界的先行者们更愿意从解决具体的问题入手，一点一滴的积累经验。比如在行程规划、个人助理、售前咨询、客户服务等领域，都有不少朝气蓬勃的创业公司在深入的研究用户需求，搭建技术基础设施、开发相关的 Chatbot 产品。虽然这些 Chatbot 所提供的对话质量和服务还不能完全令人满意，但至少这些探索和尝试对提升产品体验、吸引用户关注和教育市场起到了相当有益的作用。无论如何，知识自动化和更加自然的人机交互这一趋势无可避免，由此带来了机器智能的两大应用场景：要么协助或替代人力的知识产生和传播过程，要么更好的服务于这些被替代下来的人们。相信这些都将是无比广阔的市场和商业机会，Chatbot 能不能引领我们，敲开这扇大门？&lt;b&gt;参考资料&lt;/b&gt;How Chatbots And Deep Learning Will Change The Future Of Organizations，Daniel Newman，Forbes，June 28，2016The Rise of the Chatbots: Is It Time to Embrace Them?, knowledge@Wharton, June 9, 2016Deep Learning for Chatbots, Part 1 – Introduction, April 6, 2016,  Denny Britz, WildMLDeep Learning for Chatbots, Part 2 – Implementing a Retrieval-Based Model in TensorFlow, July 4, 2016,  Denny Britz, WildML&lt;p&gt;关注 ResysChina 微信公众号，回复“bot”可以查看更多聊天机器人相关内容。&lt;/p&gt;&lt;img rel="noreferrer" src="https://ga-beacon.appspot.com/UA-41015557-4/page-name?dt=https://zhuanlan.zhihu.com/p/21973054&amp;pixel&amp;useReferer"/&gt;</description><author>王守崑</author><pubDate>Thu, 11 Aug 2016 18:33:11 GMT</pubDate></item><item><title>少数人的智慧</title><link>https://zhuanlan.zhihu.com/p/21875823</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/f9eb1b6af438ad745d3fc9145bb4580c_r.jpg"&gt;&lt;/p&gt;&lt;p&gt;在写完《&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231283&amp;amp;idx=1&amp;amp;sn=3d5f5989896a2b7be52558c9cc56e855&amp;amp;scene=21#wechat_redirect" data-editable="true" data-title="Quora是如何做推荐的"&gt;Quora是如何做推荐的&lt;/a&gt;》一文之后，我在思考一个问题：伴随着Quora、知乎这样的知识分享型社区的兴起，涌现了一大批各个领域的专家用户，这会对推荐系统带来哪些可能的变化呢？恰好今天在读马尔科姆·格拉德威尔的&lt;a href="https://www.amazon.cn/gp/product/B00JA4TFD0/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00JA4TFD0&amp;amp;linkCode=as2&amp;amp;tag=resyschina-23" data-editable="true" data-title="《眨眼之间》" class=""&gt;《眨眼之间》&lt;/a&gt;这本书的时候，看到了这么一段，&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;当我们在某一方面修炼到登堂入室的程度时，我们的品味会变得愈发专业精深、愈发让外行难以理解。也就是说，&lt;strong&gt;只有专家才能对自己的反馈信息和看法负起责任。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我忽然想起来我在09年写过一篇blog《The Wisdom of the Few》，正好和这个事情特别相关。《The Wisdom of the Few》是来自Telefonica Research的一篇论文，《The Wisdom of the Few: A Collaborative Filtering Approach Based on Expert Opinions from the Web》[1]。我当年是在SIGIR'09里面发现的，觉得很有意思。这篇论文的核心内容非常简单，主要方式是对比分析，结论也挺中肯的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;首先定义「专家/Expert」，他们必须是这样的一群人：在一个特定的领域内，能对该领域内的条目给出深思熟虑的、一致的、可靠的评价（打分）。&lt;/strong&gt;[2]&lt;/p&gt;&lt;p&gt;1）通过对 Netflix Users vs. Experts（作者自己收集的）的数据进行对比分析&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Number of Ratings and Data Sparsity&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Average Rating Distribution&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Rating Standard Deviation (std) &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;得出结论认为，&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;专家打分数据的稀疏性要好得多。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;专家的打分对象更全面&lt;/strong&gt;，好的坏的，流行的冷门的，都会涉及到；而不像大众打分会倾向于流行的和自己喜欢的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;对好电影的评价专家们更趋一致。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对于每单个电影的评价，&lt;strong&gt;专家们的分歧也相对更小&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对于每单个用户和专家的对比，&lt;strong&gt;专家给出的打分更为稳定&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;2）进行 Nearest-Neighbor CF vs. Expert CF 的推荐效果对比，主要评价「准确性/MAD」和「覆盖率/Coverage」两个指标，&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/42cbeec6e7c26423ddd508a24bc39156.png" data-rawwidth="836" data-rawheight="384"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;推荐准确性，NN-CF 差不多比 Expert-CF 要好 10%。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推荐覆盖率，Expert-CF 差不多比 NN-CF 要高 10%。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;有意思的是上面的右图，用户分布与推荐准确性的关系，&lt;/p&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;在 MAE &amp;lt; 0.5 时，两种方法覆盖的用户数差不多&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;差不多在 MAE = 0.5 时，NN-CF 比 Expert-CF 多 10%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;之后 MAE 在 [0.5, 1.0] 区间内时，NN-CF 与 Expert-CF 几乎平行&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;这个意思是说，与 Expert-CF 相比，NN-CF 仅对少部分用户（MAE&amp;lt;0.5的用户，占总数的10%）有明显优势。而这部分用户又可以认为是可预测性很高的用户，Expert-CF 比较容易利用其他方法提高效果。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;结论是，&lt;strong&gt;Expert-CF 大多数情况下与 NN-CF 效果相当。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;3）进行 Nearest-Neighbor CF vs Expert CF 的推荐效果的用户调研，推荐系统最终是为用户服务的，用户说好才是真的好！&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/6f52f0fbc30339f1adde0d3252e78b7b.png" data-rawwidth="613" data-rawheight="296"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Random，随机生成的推荐列表。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Critics' Choice，Experts 平均打分比较高的影片组成的推荐列表。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;kNN-CF/Experts-CF，文中两种算法生成的推荐列表。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;左图是用户满意度，调查推荐列表里是否包含用户喜欢的影片。两个评价指标，包含喜欢影片的多少，及是否有惊喜。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;右图是用户反感度，调查推荐列表里是否包含用户讨厌的影评。两个评价指标，包含讨厌影片的多少，及讨厌程度。推荐系统里面有句名言，「错误的推荐还不如不推荐」。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;结论是，&lt;strong&gt;Experts-CF 的用户满意度更高。&lt;/strong&gt;当然了，这个结论的现实性是有一些争议的，比如，参与用户的数量很少，且大多数是男性用户。不过论文作者在这方面都有提到，比较中肯。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;证明了 Expert-CF 的可用性之后，吸引人的是这个方法相对传统CF方法，能够带来的好处。&lt;/p&gt;&lt;p&gt;1、Data  Sparsity，&lt;strong&gt;数据稀疏性&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;专家的打分数据数据通常涵盖面更广，使用这个数据作推荐，解决了传统 CF 的数据稀疏问题。&lt;/p&gt;&lt;p&gt;2、Noise and Malicious Ratings，&lt;strong&gt;噪音及恶意打分&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;专家的打分通常更加认真或是专业，解决了用户不小心打错分及恶意捣乱的问题。&lt;/p&gt;&lt;p&gt;3、Cold Start Problem，&lt;strong&gt;冷启动问题&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;专家通常更加关注自己领域内的新事物，并能够更快地给出评价。&lt;/p&gt;&lt;p&gt;4、Scalability，&lt;strong&gt;可扩展性&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对于 (N-User, M-Item) 的推荐问题，传统 NN-CF 的算法复杂度是 O(N2M)，计算量很大。而Expert-CF方法可以大幅度降低计算成本。比如论文里的数据，169 experts vs. 500, 000 potential neighbors (Netflix database)。&lt;/p&gt;&lt;p&gt;5、Privacy，&lt;strong&gt;用户隐私&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如何更好地保护用户隐私，一直是推荐系统领域的一个热点问题。比如，基于Expert-CF方法，可以把一小撮专家打分数据下载到手机上，进行本地计算，然后得到推荐结果，而避免把过多的数据都存储在应用服务商的服务器上。&lt;/p&gt;&lt;p&gt;当年我这篇blog发出之后，在推荐圈引发了一些小讨论，当年还是豆瓣算法组小鲜肉现在已经成为机器学习大牛的阿稳同学也给出了自己的解读。[2]&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;之所以要提出专家CF的算法取代传统的CF，是基于传统CF的一些弊病，比如数据的稀疏性，数据噪声以及计算量的庞大等等，而正是这些数据上的原因导致传统CF算法推荐多样性不足、推荐不准确以及推荐可扩展性不良好等种种问题。这里提出的专家CF算法目的并不在于在某些数学精度指标上压倒传统的CF算法，而希冀能探究如下几个问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;一个庞大的用户集合的偏好是否可以通过一个比较小的用户集合的偏好预测出来；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对于一个源数据集来说，另一个与之不同源的、无直接相关的数据集是否具有对它进行推荐的能力；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分析专家的收藏是否可以用作普通用户的推荐；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;探讨专家CF是否能解决传统CF的一些难题。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;看这篇文章，更多的是看文中阐述的思想，虽然这可能并不是他们首创的，但毕竟他们作了一个很好的总结与分析。我一直在思索我们到底需要什么样的推荐，最近我觉得：&lt;strong&gt;至少在大部分的场合，我们需要的并不是与自己相似的用户的推荐，而是与自己相似的专家的推荐。无论是看书、看电影、买手机、买笔记本，那批「行内人物」的观点往往是左右我们决定的主要因素。这个结论在个性化要求相对比较低的中国显得更为真实。&lt;/strong&gt;&lt;/blockquote&gt;&lt;p&gt;在这篇论文里，作者并没有详细地探讨如何从数据中发现一批领域专家，他们挑选的是一批来自从烂番茄网站爬取的现成的电影评论专家。这也是当年使用这个方法的一个难题，去哪里找到这些各个领域的专家。而如今7年过去了，Quora、知乎、微博、包括各个垂直专业领域的自媒体的崛起，几乎已经让这个问题迎刃而解。&lt;/p&gt;&lt;p&gt;类似于SaaS，目前又有个提法叫做「数据即服务」。留个讨论，你认同DaaS吗，和本文的方法结合这里面可能有什么机会呢？一起开开脑洞吧。&lt;/p&gt;&lt;p&gt;参考资料：&lt;/p&gt;&lt;p&gt;[1] &lt;a href="http://www.nuriaoliver.com/recsys/wisdomFew_sigir09.pdf"&gt;http://www.nuriaoliver.com/recsys/wisdomFew_sigir09.pdf&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[2] &lt;a href="http://blog.sciencenet.cn/blog-64458-372804.html"&gt;http://blog.sciencenet.cn/blog-64458-372804.html&lt;/a&gt;，阿稳的blog已经访问不了了，只能放这个转载了。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;推荐关注微信公众号【ResysChina】，中国最专业的个性化推荐技术与产品社区。更多内容会首发在微信公众号。&lt;/p&gt;&lt;p&gt;★ 猜你喜欢：「&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;amp;mid=2449231335&amp;amp;idx=1&amp;amp;sn=d3ba98841e85b7cea0049cc43b3c16ca#rd"&gt;基于Deep Learning的中文分词尝试&lt;/a&gt;」&lt;/p&gt;&lt;/blockquote&gt;&lt;img rel="noreferrer" src="https://ga-beacon.appspot.com/UA-41015557-4/page-name?dt=https://zhuanlan.zhihu.com/p/21875823&amp;pixel&amp;useReferer"/&gt;</description><author>谷文栋</author><pubDate>Fri, 05 Aug 2016 01:02:44 GMT</pubDate></item><item><title>推荐系统的苟且和远方</title><link>https://zhuanlan.zhihu.com/p/21840306</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/be39bbe37297171cbb73d1fb1c41e63e_r.jpg"&gt;&lt;/p&gt;&lt;h2&gt;苟且和远方&lt;/h2&gt;&lt;p&gt;提到推荐系统，你们会首先想到什么？&lt;/p&gt;&lt;p&gt;产品和运营们首先想到的就是打标签，而做过的人还会想到协同过滤（collaborative  filter，下面简称CF）。&lt;/p&gt;&lt;p&gt;是的，CF几乎是推荐系统发展史上浓墨重彩的一笔，其背后的思想简单深刻，在万物互联的今天，协同过滤的威力更加强大。CF看上去是一种技术，不如说是一种方法论，不是机器在给你推荐，而是“集体智慧”在给你推荐。&lt;/p&gt;&lt;p&gt;CF的基本假设就是“物以类聚，人以群分”，你的圈子决定了你能见到的物品。这很靠谱，但是却隐藏了一些重要的问题：作为用户的我们还可能看到新的东西吗？还可能有惊喜吗？还可能有圈子的流动吗？&lt;/p&gt;&lt;p&gt;是咯，我就知道你会提出这么精妙的问题，要不然也不会有这篇文章了。毕竟你我都曾经站在高高的谷堆上唱过：“推荐系统不是只有眼前的苟且，还有诗和远方的田野”。这也是在推荐和广告界被大量研究的EE问题（Exploit &amp;amp; Explore），Exploit就是眼前的苟且，Explore就是诗和远方的田野。&lt;/p&gt;&lt;p&gt;做Explore的方法有很多，bandit算法是其中的一种流派。前面也介绍过几种bandit算法，基本上就是估计置信区间的做法，然后按照置信区间的上界来进行推荐，以UCB,LinUCB为代表。&lt;/p&gt;&lt;p&gt;作为要寻找诗和远方的bandit浪漫派算法，能不能和CF这种名门望族结合起来呢？事实上已经有人这么尝试过了，前阵子在arxiv看到一篇论文，题目是Collaborative Filtering Bandits[1]，arxiv上还有另一篇是同一作者先前的尝试（Online Clustering of Bandits）[2]，两者的区别是后者只对用户聚类（即只考虑了User-based的协同过滤），而前者采用了协同聚类（co-clustering，可以理解为item-based和user-based两种协同方式在同时进行），后者算是前者的一个特殊情况。今天我们就一起来开拓一下思路，看看Collaborative Filtering Bandits这篇文章是如何把CF和Bandit结合起来的。&lt;/p&gt;&lt;h2&gt;bandit怎么结合CF&lt;/h2&gt;&lt;p&gt;很多推荐场景中都有这两个规律：&lt;/p&gt;&lt;p&gt;1. 相似的用户对同一个物品的反馈可能是一样的。也就是对一个聚类用户群体推荐同一个item，他们可能都喜欢，也可能都不喜欢，同样地，同一个用户会对相似的物品反馈相同。这是属于CF可以解决的问题；&lt;/p&gt;&lt;p&gt;2. 在使用推荐系统过程中，用户的决策是动态进行的，尤其是新用户。这就导致无法提前为用户准备好推荐候选，只能“走一步看一步”，是一个动态的推荐过程。&lt;/p&gt;&lt;p&gt;这篇文章就提出，每一个推荐候选item，都可以根据用户对其偏好不同（payoff不同）将用户聚类成不同的群体，一个群体来集体预测这个item的可能的收益，这就有了协同的效果，然后再实时观察真实反馈回来更新用户的个人参数，这就有了bandit的思想在里面。&lt;/p&gt;&lt;p&gt;举个例子，如果你父母给你安排了很多相亲对象，要不要见面去相一下？那需要提前看看每一个相亲对象的资料，每次大家都分成好几派，有说好的，有说再看看的，也有说不行的；你自己也会是其中一派的一员，每次都是你所属的那一派给你集体打分，因为他们是和你“三观一致的人”，“诚不欺我”；这样从一堆资料中挑出分数最高的那个人，你出去见TA，回来后把实际感觉说给大家听，同时自己心里的标准也有些调整，重新给剩下的其它对象打分，打完分再去见，周而复始......&lt;/p&gt;&lt;p&gt;以上就是CF和bandit结合的思想。&lt;/p&gt;&lt;p&gt;另外，如果要推荐的候选item较多，还需要对item进行聚类，这样就不用按照每一个item对user聚类，而是按照每一个item的类簇对user聚类，如此以来，item的类簇数相对于item数要大大减少。&lt;/p&gt;&lt;h2&gt;COFIBA算法&lt;/h2&gt;&lt;p&gt;基于这些思想，文中设计的算法COFIBA（读作coffee bar），简要描述如下：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;在时刻t，有一个用户来访问推荐系统，推荐系统需要从已有的候选池子中挑一个最佳的物品推荐给他，然后观察他的反馈，用观察到的反馈来更新挑选策略。&lt;/p&gt;&lt;p&gt;这里的每个物品都有一个特征向量，所以这里的bandit算法是context相关的。&lt;/p&gt;&lt;p&gt;这里依然是用岭回归去拟合用户的权重向量，用于预测用户对每个物品的可能反馈（payoff），这一点和我们上一次介绍的linUCB算法是一样的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对比上一次介绍的LinUCB算法，COFIBA的不同有两个：&lt;/p&gt;&lt;p&gt;1. 基于用户聚类挑选最佳的item（相似用户集体决策的bandit）&lt;/p&gt;&lt;p&gt;2. 基于用户的反馈情况调整user和item的聚类（CF部分）&lt;/p&gt;&lt;p&gt;整体算法过程如下：&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/6f70398fb425c94d4891af9e28032dc4.png" data-rawwidth="712" data-rawheight="1206"&gt;&lt;p&gt;对关键部分用人话来说就是：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;在针对某个用户i，在每一轮试验时做以下事情：&lt;/p&gt;&lt;p&gt;1. 首先计算该用户的bandit参数W（和LinUCB相同），但是这个参数并不直接参与到bandit的选择决策中（和LinUCB不同），而是用来更新用户聚类的；&lt;/p&gt;&lt;p&gt;2. 遍历候选item，每一个item表示成一个context向量了。&lt;/p&gt;&lt;p&gt;3. 每一个item都对应一套用户聚类结果，所以遍历到每一个item时判断当前用户在当前item下属于哪个类簇，然后把对应类簇中每个用户的M矩阵(对应LinUCB里面的A矩阵)，b向量（payoff向量，对应linUCB里面的b向量）聚合起来，从而针对这个类簇求解一个岭回归参数（类似LinUCB里面单独针对每个用户所做），同时计算其payoff预测值和置信上边界&lt;/p&gt;&lt;p&gt;4. 每个item都得到一个payoff预测值及置信区间上界，挑出那个上边界最大的item推出去（和LinUCB相同）&lt;/p&gt;&lt;p&gt;5. 观察用户的真实反馈，然后更新用户自己的M矩阵和b向量（更新个人的，对应类簇里其他的不更新）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;以上是COFIBA算法的一次决策过程。在收到用户真实反馈之后，还有两个计算过程：&lt;/p&gt;&lt;p&gt;1. 更新user聚类&lt;/p&gt;&lt;p&gt;2. 更新item聚类&lt;/p&gt;&lt;p&gt;如何更新user和item的聚类呢？文章中给出了一个示意图：&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/1d4d1fc1bcae659dc8ac408a6dceb346.png" data-rawwidth="1252" data-rawheight="1032"&gt;&lt;p&gt;解释一下这个图。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;(a) 这里有6个user，8个item，初始化时，user和item的类簇个数都是1&lt;/p&gt;&lt;p&gt;(b1) 在某一轮试验时，推荐系统面对的用户是4。推荐过程就是遍历1～8每个item，然后看看对应每个item时，user4在哪个类簇中，把对应类簇中的用户聚合起来为这个item预测payoff和CB。这里假设最终item5胜出，被推荐出去了。&lt;/p&gt;&lt;p&gt;(b2) 在时刻t，item有3个类簇，需要更新的用户聚类是item5对应的user4所在类簇。更新方式：看看该类簇里面除了user4之外的用户，对item5的payoff是不是和user4相近，如果是，则保持原来的连接边，否则删除原来的连接边。删除边之后重新构建聚类结果。这里假设重新构建后原来user4所在的类簇分裂成了两个类簇：{4,5}和{6}&lt;/p&gt;&lt;p&gt;(c) 更新完用户类簇后，item5对应的类簇也要更新。更新方式是：对于每一个和item5(被推荐出的那个item)还存在连接边的item j，都去构造一个user的近邻集合N，这个集合的用户对item j有相近的payoff，然后看看N是不是和刚刚更新后的user4所在的类簇相同，是的话，保留item5和item j之间的连接边，否则删除。这里假设item 3和item 5之间的连接边被删除。item3独立后给他初始化了一个聚类结果：所有用户还是一个类簇。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;简单来说就是这样：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;User-based协同过滤来选择要推荐的item，选择时用了LinUCB的思想&lt;/li&gt;&lt;li&gt;根据用户的反馈，调整User-based和Item-based的聚类结果&lt;/li&gt;&lt;li&gt;Item-based的聚类变化又改变了User的聚类&lt;/li&gt;&lt;li&gt;不断根据用户实时动态的反馈来划分User-Item矩阵&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;cofiba算法也很容易实现，github上就有[3]。论文也从理论和实验两方面证明了它的有效性，但是能否在实际项目中用上，仍然存疑，毕竟复杂度不低。&lt;/p&gt;&lt;h2&gt;关于EE问题的思考&lt;/h2&gt;&lt;p&gt;之所以想写bandit算法系列，是因为Exploit-Explore这一对矛盾一直客观存在，而bandit算法是公认的一种比较好的解决EE问题的方案。除了bandit算法之外，还有一些其他的explore的办法，比如跟xlvector大牛讨论时，他就提到一种：在推荐时，随机地去掉一些用户历史行为（特征）。&lt;/p&gt;&lt;p&gt;解决Explore，势必就是要冒险，势必要走向未知，而这显然就是会伤害用户体验的：明知道用户肯定喜欢A，你还偏偏以某个小概率给推荐非A。&lt;/p&gt;&lt;p&gt;实际上，很少有公司会采用这些理性的办法做Explore，反而更愿意用一些盲目主观的方式。究其原因，可能是因为：&lt;/p&gt;&lt;p&gt;1. 互联网产品生命周期短，而Explore又是为了提升长期利益的，所以没有动力做；&lt;/p&gt;&lt;p&gt;2. 用户使用互联网产品时间越来越碎片化，Explore的时间长，难以体现出Explore 的价值；&lt;/p&gt;&lt;p&gt;3. 同质化互联网产品多，用户选择多，稍有不慎，用户用脚投票，分分钟弃你于不顾。&lt;/p&gt;&lt;p&gt;4. 已经成规模的平台，红利杠杠的，其实是没有动力做Explore的；&lt;/p&gt;&lt;p&gt;基于这些，我们如果想在自己的推荐系统中引入Explore机制，需要注意以下几点：&lt;/p&gt;&lt;p&gt;1. 用于Explore的item要保证其本身质量，纵使用户不感兴趣，也不至于引起其反感；&lt;/p&gt;&lt;p&gt;2. Explore本身的产品需要精心设计，让用户有耐心陪你玩儿；&lt;/p&gt;&lt;p&gt;3. 深度思考，这样才不会做出脑残的产品，产品不会早早夭折，才有可能让Explore机制有用武之地。&lt;/p&gt;&lt;p&gt;好了，让我们再唱一遍，结束本系列：&lt;/p&gt;&lt;blockquote&gt;推荐不止眼前的苟且，还有诗和远方的田野&lt;/blockquote&gt;&lt;p&gt;[1] &lt;a href="http://arxiv.org/abs/1401.8257"&gt;http://arxiv.org/abs/1401.8257&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[2] &lt;a href="http://arxiv.org/abs/1502.03473"&gt;http://arxiv.org/abs/1502.03473&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[3] &lt;a href="https://github.com/qw2ky/CoLinUCB_Revised/blob/master/COFIBA.py" class=""&gt;https://github.com/qw2ky/CoLinUCB_Revised/blob/master/COFIBA.py&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;推荐关注微信公众号【ResysChina】，中国最专业的个性化推荐技术与产品社区。更多内容会首发在微信公众号。猜你喜欢：&lt;a href="https://zhuanlan.zhihu.com/p/21404922?refer=resyschina"&gt;LinUCB算法&lt;/a&gt;&lt;/blockquote&gt;&lt;img rel="noreferrer" src="https://ga-beacon.appspot.com/UA-41015557-4/page-name?dt=https://zhuanlan.zhihu.com/p/21840306&amp;pixel&amp;useReferer"/&gt;</description><author>刑无刀</author><pubDate>Tue, 02 Aug 2016 23:30:31 GMT</pubDate></item></channel></rss>